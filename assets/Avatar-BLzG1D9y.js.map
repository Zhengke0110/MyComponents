{"version":3,"file":"Avatar-BLzG1D9y.js","sources":["../../src/libs/Avatar/config.ts","../../src/libs/Avatar/Avatar.tsx"],"sourcesContent":["// 尺寸映射\nexport const sizeMap = {\n  xs: \"size-6\",\n  sm: \"size-8\",\n  md: \"size-10\",\n  lg: \"size-12\",\n  xl: \"size-14\",\n  \"2xl\": \"size-16\",\n};\n\n// 状态指示器尺寸映射\nexport const statusSizeMap = {\n  xs: \"size-1.5\",\n  sm: \"size-2\",\n  md: \"size-2.5\",\n  lg: \"size-3\",\n  xl: \"size-3.5\",\n  \"2xl\": \"size-4\",\n};\n\n// 文字尺寸映射\nexport const fontSizeMap = {\n  xs: \"text-xs\",\n  sm: \"text-sm\",\n  md: \"text-base\",\n  lg: \"text-lg\",\n  xl: \"text-xl\",\n  \"2xl\": \"text-2xl\",\n};\n\n// 状态颜色映射\nexport const statusColorMap = {\n  online: \"bg-green-400\",\n  offline: \"bg-gray-300\",\n  busy: \"bg-red-400\",\n  away: \"bg-yellow-400\",\n};\n\nexport type AvatarSize = \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\";\nexport type AvatarShape = \"circle\" | \"square\";\nexport type AvatarStatus = \"online\" | \"offline\" | \"busy\" | \"away\" | null;\nexport type StatusPosition = \"top-right\" | \"bottom-right\";\n","import { defineComponent, PropType, computed } from 'vue';\nimport { sizeMap, statusColorMap, statusSizeMap, fontSizeMap, AvatarShape, AvatarSize, AvatarStatus, StatusPosition } from './config'\nexport default defineComponent({\n    name: 'Avatar',\n\n    props: {\n        // 头像图片源\n        src: {\n            type: String,\n            default: '',\n        },\n        // 图片替代文本\n        alt: {\n            type: String,\n            default: '',\n        },\n        // 头像尺寸\n        size: {\n            type: String as PropType<AvatarSize>,\n            default: 'md',\n            validator: (value: string) => ['xs', 'sm', 'md', 'lg', 'xl', '2xl'].includes(value),\n        },\n        // 头像形状\n        shape: {\n            type: String as PropType<AvatarShape>,\n            default: 'circle',\n            validator: (value: string) => ['circle', 'square'].includes(value),\n        },\n        // 状态指示器\n        status: {\n            type: String as PropType<AvatarStatus>,\n            default: null,\n        },\n        // 状态指示器位置\n        statusPosition: {\n            type: String as PropType<StatusPosition>,\n            default: 'top-right',\n        },\n        // 没有图片时显示的文字\n        initials: {\n            type: String,\n            default: '',\n        },\n        // 显示名称（用于资料卡片）\n        name: {\n            type: String,\n            default: '',\n        },\n        // 显示描述（用于资料卡片）\n        description: {\n            type: String,\n            default: '',\n        },\n        // 是否显示边框\n        bordered: {\n            type: Boolean,\n            default: false,\n        },\n        // 是否以资料卡片模式显示\n        profile: {\n            type: Boolean,\n            default: false,\n        },\n        // 自定义类\n        customClass: {\n            type: String,\n            default: '',\n        },\n    },\n\n    emits: ['click'],\n\n    setup(props, { emit }) {\n        // 计算头像基本类\n        const avatarClasses = computed(() => {\n            const classes = ['inline-block'];\n\n            // 尺寸\n            classes.push(sizeMap[props.size]);\n\n            // 形状\n            classes.push(props.shape === 'circle' ? 'rounded-full' : 'rounded-md');\n\n            // 边框\n            if (props.bordered) {\n                classes.push('ring-2 ring-gray-200 dark:ring-gray-700');\n            }\n\n            // 图片适配方式\n            classes.push('object-cover object-center');\n\n            // 过渡动画\n            classes.push('transition-all duration-200 ease-in-out');\n            classes.push('hover:shadow-md');\n\n            // 自定义类\n            if (props.customClass) {\n                classes.push(props.customClass);\n            }\n\n            return classes.join(' ');\n        });\n\n        // 计算状态指示器样式\n        const statusClasses = computed(() => {\n            const classes = ['block', 'rounded-full'];\n\n            // 尺寸\n            classes.push(statusSizeMap[props.size]);\n\n            // 颜色\n            if (props.status) {\n                classes.push(statusColorMap[props.status] || 'bg-gray-300');\n            }\n\n            // 环形边框\n            classes.push('ring-2 ring-white dark:ring-gray-800');\n\n            // 过渡动画\n            classes.push('transition-all duration-200');\n\n            return classes.join(' ');\n        });\n\n        // 计算状态指示器位置类\n        const statusPositionClasses = computed(() => {\n            const classes = ['absolute'];\n\n            if (props.statusPosition === 'top-right') {\n                classes.push('top-0 right-0');\n                if (props.shape === 'square') {\n                    classes.push('-translate-y-1/2 translate-x-1/2 transform');\n                }\n            } else if (props.statusPosition === 'bottom-right') {\n                classes.push('right-0 bottom-0');\n                if (props.shape === 'square') {\n                    classes.push('translate-y-1/2 translate-x-1/2 transform');\n                }\n            }\n\n            return classes.join(' ');\n        });\n\n        // 计算文字头像的文字尺寸类\n        const initialsClass = computed(() => {\n            return fontSizeMap[props.size] + ' font-medium text-white';\n        });\n\n        // 处理点击事件\n        const handleClick = () => {\n            emit('click');\n        };\n\n        return {\n            avatarClasses,\n            statusClasses,\n            statusPositionClasses,\n            initialsClass,\n            handleClick,\n            sizeMap,\n        };\n    },\n\n    render() {\n        // 渲染占位符（当没有图片和文字时）\n        const renderPlaceholder = () => (\n            <span class={[\n                'inline-block overflow-hidden',\n                sizeMap[this.size],\n                this.shape === 'circle' ? 'rounded-full' : 'rounded-md',\n                'bg-gray-100 dark:bg-gray-700',\n                'transition-colors duration-200'\n            ]}>\n                <svg class=\"size-full text-gray-300 dark:text-gray-500\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M24 20.993V24H0v-2.996A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z\" />\n                </svg>\n            </span>\n        );\n\n        // 渲染文字头像（当没有图片但有文字时）\n        const renderInitials = () => (\n            <span class={[\n                'inline-flex items-center justify-center',\n                sizeMap[this.size],\n                this.shape === 'circle' ? 'rounded-full' : 'rounded-md',\n                'bg-gray-500 dark:bg-gray-600',\n                'transition-colors duration-200'\n            ]}>\n                <span class={this.initialsClass}>{this.initials}</span>\n            </span>\n        );\n\n        // 渲染状态指示器\n        const renderStatus = () => {\n            if (!this.status) return null;\n\n            return (\n                <span class={[this.statusPositionClasses, this.statusClasses]} />\n            );\n        };\n\n        // 渲染基本头像（可能带状态指示器）\n        const renderAvatar = () => {\n            if (!this.src && this.initials) {\n                return renderInitials();\n            }\n\n            if (!this.src) {\n                return renderPlaceholder();\n            }\n\n            // 更新图片渲染方式，确保与Vue版本一致\n            return (\n                <span class=\"relative inline-block\">\n                    <img\n                        class={this.avatarClasses}\n                        src={this.src}\n                        alt={this.alt}\n                        loading=\"lazy\"\n                        onError={(e) => {\n                            // 图片加载失败时显示占位符或文字头像\n                            const imgElement = e.target as HTMLImageElement;\n                            imgElement.style.display = 'none';\n                            if (this.initials) {\n                                const parent = imgElement.parentElement;\n                                if (parent) {\n                                    parent.appendChild(renderInitials() as unknown as Node);\n                                }\n                            } else {\n                                const parent = imgElement.parentElement;\n                                if (parent) {\n                                    parent.appendChild(renderPlaceholder() as unknown as Node);\n                                }\n                            }\n                        }}\n                    />\n                    {renderStatus()}\n                </span>\n            );\n        };\n\n        // 渲染带名称和描述的头像（资料卡片模式）\n        const renderProfile = () => (\n            <a\n                href=\"#\"\n                class=\"group block shrink-0\"\n                onClick={(e: Event) => {\n                    e.preventDefault();\n                    this.handleClick();\n                }}\n            >\n                <div class=\"flex items-center\">\n                    <div>{renderAvatar()}</div>\n                    <div class=\"ml-3\">\n                        {this.name && (\n                            <p class=\"text-sm font-medium text-gray-700 dark:text-gray-300 group-hover:text-gray-900 dark:group-hover:text-white transition-colors duration-200\">\n                                {this.name}\n                            </p>\n                        )}\n                        {this.description && (\n                            <p class=\"text-xs font-medium text-gray-500 dark:text-gray-400 group-hover:text-gray-700 dark:group-hover:text-gray-300 transition-colors duration-200\">\n                                {this.description}\n                            </p>\n                        )}\n                    </div>\n                </div>\n            </a>\n        );\n\n        // 根据模式决定渲染方式\n        if (this.profile) {\n            return renderProfile();\n        }\n\n        return renderAvatar();\n    }\n});\n"],"names":["sizeMap","statusSizeMap","fontSizeMap","statusColorMap","defineComponent","name","props","src","type","String","default","alt","size","validator","value","includes","shape","status","statusPosition","initials","description","bordered","Boolean","profile","customClass","emits","setup","emit","avatarClasses","computed","classes","push","join","statusClasses","statusPositionClasses","initialsClass","handleClick","render","renderPlaceholder","_createVNode","renderInitials","renderStatus","renderAvatar","e","imgElement","target","style","display","parent","parentElement","appendChild","renderProfile","preventDefault"],"mappings":"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"}