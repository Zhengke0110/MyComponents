{"version":3,"file":"index-DUoswfWj.js","sources":["../../src/libs/Waterfall/utils.ts","../../src/libs/Waterfall/Waterfall.tsx","../../src/libs/Waterfall/View.vue"],"sourcesContent":["/**\n * 获取图像元素数组\n * 该函数接受一个HTMLElement数组，返回一个HTMLImageElement数组，包含所有子图像元素\n * 如果输入数组为空或未提供，则返回一个空数组\n *\n * @param itemElements HTMLElement数组，代表可能包含图像的元素集合\n * @returns HTMLImageElement数组，包含所有找到的图像元素\n */\nexport const getImgElements = (\n  itemElements: HTMLElement[]\n): HTMLImageElement[] => {\n  // 检查输入数组是否为空或未提供，如果是，则返回一个空数组\n  if (!itemElements || itemElements.length === 0) return [];\n\n  // 初始化一个空数组，用于存储所有图像元素\n  const imgElements: HTMLImageElement[] = [];\n\n  // 遍历输入的元素数组\n  for (const el of itemElements) {\n    // 检查当前元素是否为HTMLElement，如果不是，则输出警告并跳过当前元素\n    if (!(el instanceof HTMLElement)) {\n      console.warn(\"Non-HTMLElement found in itemElements, skipping...\");\n      continue;\n    }\n\n    // 将当前元素中的所有图像元素添加到图像元素数组中\n    imgElements.push(...Array.from(el.querySelectorAll(\"img\")));\n  }\n\n  // 返回包含所有图像元素的数组\n  return imgElements;\n};\n\n/**\n * 获取所有图片元素的 src 属性数组\n *\n * 此函数接受一个 HTMLImageElement 类型的数组作为输入，返回一个包含这些元素 src 属性的字符串数组\n * 主要用途是快速收集页面上一组 img 标签的图片地址\n *\n * @param itemElements HTMLImageElement 类型的数组，代表一组 img 标签\n * @returns 返回一个字符串数组，包含每个 img 标签的 src 属性\n * @throws 如果输入不是数组，则抛出错误\n */\nexport const getAllImg = (itemElements: HTMLImageElement[]): string[] => {\n  // 检查输入是否为数组，避免意外传入非数组类型\n  if (!Array.isArray(itemElements)) {\n    throw new Error(\"Input must be an array of HTMLImageElement\");\n  }\n\n  // 如果数组为空，直接返回空数组\n  if (itemElements.length === 0) return [];\n\n  // 获取所有图片元素的 src 属性\n  return itemElements.map((imgElement) => imgElement.src);\n};\n\n/**\n * 等待一组图像加载完成\n *\n * 此函数接收一个图像URL数组，并返回一个Promise，该Promise在所有图像加载成功时解析，\n * 解析值为一个对象数组，每个对象包含加载成功的图像URL和其在原数组中的索引如果某个图像加载失败，\n * Promise将被拒绝，并提供加载失败的图像URL和错误信息这使得调用者可以处理图像加载过程中的错误\n *\n * @param imgs 图像URL数组，代表需要加载的图像\n * @returns 返回一个Promise，该Promise解析为一个对象数组，每个对象包含图像URL和索引\n */\nexport const onComplateImgs = (\n  imgs: string[]\n): Promise<{ img: string; index: number }[]> => {\n  // 如果图像数组为空，直接返回一个解析为空数组的Promise\n  if (imgs.length === 0) return Promise.resolve([]);\n\n  // 使用map创建一个Promise数组，用于加载每个图像\n  const promiseAll = imgs.map((img, index) => {\n    // 返回一个新的Promise，用于处理单个图像的加载\n    return new Promise<{ img: string; index: number }>((resolve, reject) => {\n      // 创建一个新的Image对象\n      const imageObj = new Image();\n      // 设置Image对象的src属性为当前图像URL\n      imageObj.src = img;\n      // 当图像加载成功时，解析Promise\n      imageObj.onload = () => {\n        resolve({ img, index });\n      };\n      // 当图像加载失败或中止时，拒绝Promise\n      imageObj.onerror = imageObj.onabort = () => {\n        reject(new Error(`Failed to load image: ${img}`));\n      };\n    });\n  });\n\n  // 使用Promise.all等待所有图像加载完成，如果加载过程中有图像失败，则捕获错误并重新抛出\n  return Promise.all(promiseAll).catch((error) => {\n    // 打印错误信息到控制台\n    console.error(\"Error loading images:\", error);\n    // 抛出错误，让调用者处理\n    throw error;\n  });\n};\n\n/**\n * 获取对象中最小的数值\n * 该函数旨在找出给定对象中所有数值属性的最小值，用于场景如布局调整等\n * @param columnHeightObj 一个包含数值的非空对象，键值对中的值应为数字类型\n * @returns 返回对象中最小的数值，如果对象为空或不包含数字类型，则返回null\n * @throws 如果输入不是非空对象，则抛出错误\n */\nexport const getMinHeight = (\n  columnHeightObj: Record<string, number>\n): number | null => {\n  // 参数验证\n  if (typeof columnHeightObj !== \"object\" || columnHeightObj === null) {\n    throw new Error(\"Input must be a non-null object\");\n  }\n\n  // 获取对象值并过滤非数字类型\n  const columnHeightArr: number[] = Object.values(columnHeightObj).filter(\n    (value): value is number => typeof value === \"number\"\n  );\n\n  // 处理空对象或过滤后为空的情况\n  if (columnHeightArr.length === 0) {\n    return null;\n  }\n\n  // 计算最小值\n  return Math.min(...columnHeightArr);\n};\n\n/**\n * 获取最大高度\n *\n * 该函数旨在找出给定对象中所有有效高度值的最大值它首先提取对象中的所有高度值，\n * 过滤掉无效的数值，然后找出剩余值中的最大值如果没有任何有效的高度值，则返回0\n *\n * @param columnHeightObj 一个键值对对象，其中包含不同列的高度值\n * @returns 返回最大的高度值如果没有任何有效的高度值，则返回0\n */\nexport const getMaxHeight = (\n  columnHeightObj: Record<string, number>\n): number => {\n  // 将对象中的高度值提取到一个数组中，并过滤掉非有限数值\n  const columnHeightArr: number[] = Object.values(columnHeightObj).filter(\n    Number.isFinite\n  );\n\n  // 如果数组为空，则返回0\n  if (columnHeightArr.length === 0) return 0;\n\n  // 返回数组中的最大值\n  return Math.max(...columnHeightArr);\n};\n\nexport interface ColumnHeightObj {\n  [key: string]: number;\n}\n\n/**\n * 获取具有最小高度的列的键\n *\n * 此函数通过遍历一个包含列高度的对象，找到高度最小的列，并返回其键\n * 如果输入对象为空或无效，函数将返回undefined\n * 如果高度值不是数字，函数将抛出错误\n *\n * @param columnHeightObj 一个包含列键和对应高度的对象\n * @returns 返回具有最小高度的列的键，如果没有有效输入则返回undefined\n */\nexport const getMinHeightColumn = (\n  columnHeightObj: ColumnHeightObj\n): string | undefined => {\n  // 验证输入是否为空对象或无效输入\n  if (Object.keys(columnHeightObj).length === 0) {\n    return undefined;\n  }\n\n  // 获取最小高度\n  let minHeight = Infinity;\n  for (const key in columnHeightObj) {\n    if (columnHeightObj.hasOwnProperty(key)) {\n      const height = columnHeightObj[key];\n      // 验证高度值是否为数字\n      if (typeof height !== \"number\") {\n        throw new Error(\"Invalid height value, expected a number\");\n      }\n      // 更新最小高度\n      if (height < minHeight) {\n        minHeight = height;\n      }\n    }\n  }\n\n  // 找到最小高度对应的键\n  for (const key in columnHeightObj) {\n    if (columnHeightObj.hasOwnProperty(key)) {\n      // 返回具有最小高度的键\n      if (columnHeightObj[key] === minHeight) {\n        return key;\n      }\n    }\n  }\n\n  // 理论上不会到达这里，但为了类型系统完整\n  return undefined;\n};\n\n/**\n * 布局算法类型定义\n * 定义瀑布流可以使用的不同布局算法类型\n */\nexport enum LayoutAlgorithm {\n  DEFAULT = 'default',   // 默认算法 - 找最短列\n  BALANCED = 'balanced', // 均衡算法 - 尝试平衡所有列高度\n  COMPACT = 'compact'    // 紧凑算法 - 尝试填充所有可用空间\n}\n\n/**\n * 计算符合均衡布局算法的下一个列索引\n * 尝试保持所有列的高度大致相等\n * \n * @param columnHeightObj 列高度对象\n * @param itemHeight 当前项的高度\n * @returns 最适合放置当前项的列索引\n */\nexport const getBalancedColumn = (\n  columnHeightObj: Record<string, number>,\n  itemHeight: number\n): string => {\n  // 计算放入每列后的高度差异\n  const heightDifferences: Record<string, number> = {};\n  let totalHeight = 0;\n  \n  // 计算当前总高度\n  Object.values(columnHeightObj).forEach(height => {\n    totalHeight += height;\n  });\n  \n  // 计算平均高度\n  const avgHeight = totalHeight / Object.keys(columnHeightObj).length;\n  \n  // 计算每列添加新项后与平均高度的差异\n  for (const column in columnHeightObj) {\n    if (columnHeightObj.hasOwnProperty(column)) {\n      const newHeight = columnHeightObj[column] + itemHeight;\n      heightDifferences[column] = Math.abs(newHeight - avgHeight);\n    }\n  }\n  \n  // 找出差异最小的列\n  let minDiffColumn = Object.keys(columnHeightObj)[0];\n  let minDiff = heightDifferences[minDiffColumn];\n  \n  for (const column in heightDifferences) {\n    if (heightDifferences[column] < minDiff) {\n      minDiff = heightDifferences[column];\n      minDiffColumn = column;\n    }\n  }\n  \n  return minDiffColumn;\n};\n\n/**\n * 计算符合紧凑布局算法的下一个位置\n * 尝试找到最小化空白空间的位置\n * \n * @param columnHeightObj 列高度对象\n * @param itemWidth 当前项的宽度\n * @param itemHeight 当前项的高度\n * @param containerWidth 容器宽度\n * @returns 最适合放置当前项的位置和列索引\n */\nexport const getCompactPosition = (\n  columnHeightObj: Record<string, number>,\n  itemWidth: number,\n  itemHeight: number,\n  containerWidth: number\n): { column: string; left: number; top: number } => {\n  // 先使用最小高度列作为默认选择\n  const minColumn = getMinHeightColumn(columnHeightObj) || '0';\n  const minHeight = columnHeightObj[minColumn];\n  \n  // 默认位置\n  const defaultPosition = {\n    column: minColumn,\n    left: parseInt(minColumn) * itemWidth,\n    top: minHeight\n  };\n  \n  // 这里是简化的紧凑布局实现\n  // 完整实现可能需要检查每个可能的位置以找出最优放置点\n  return defaultPosition;\n};\n\n/**\n * 检测浏览器是否支持Intersection Observer API\n * 用于确定是否可以使用懒加载和虚拟滚动功能\n * \n * @returns 布尔值，表示是否支持Intersection Observer\n */\nexport const supportsIntersectionObserver = (): boolean => {\n  return 'IntersectionObserver' in window && \n         'IntersectionObserverEntry' in window && \n         'intersectionRatio' in window.IntersectionObserverEntry.prototype;\n};\n\n/**\n * 节流函数，用于限制高频率事件的执行频率\n * \n * @param fn 需要节流的函数\n * @param delay 延迟执行的毫秒数\n * @returns 节流后的函数\n */\nexport const throttle = <T extends (...args: any[]) => any>(\n  fn: T, \n  delay: number\n): ((...args: Parameters<T>) => void) => {\n  let lastCall = 0;\n  return (...args: Parameters<T>) => {\n    const now = Date.now();\n    if (now - lastCall < delay) return;\n    lastCall = now;\n    return fn(...args);\n  };\n};\n\n/**\n * 计算元素的自然高度，考虑内部图像加载\n * \n * @param element 要计算高度的HTML元素\n * @param defaultHeight 默认高度，当无法计算时返回\n * @returns Promise，解析为元素的自然高度\n */\nexport const calculateNaturalHeight = (\n  element: HTMLElement, \n  defaultHeight: number = 0\n): Promise<number> => {\n  return new Promise((resolve) => {\n    // 检查元素是否包含图像\n    const images = Array.from(element.querySelectorAll('img'));\n    \n    if (images.length === 0) {\n      // 无图像，直接返回当前高度\n      resolve(element.offsetHeight || defaultHeight);\n      return;\n    }\n    \n    // 为所有图像创建加载Promise\n    const imagePromises = images.map(img => \n      new Promise<void>((resolveImg) => {\n        if (img.complete) {\n          resolveImg();\n        } else {\n          img.onload = () => resolveImg();\n          img.onerror = () => resolveImg();\n        }\n      })\n    );\n    \n    // 当所有图像加载完成后，返回元素高度\n    Promise.all(imagePromises).then(() => {\n      // 给DOM时间更新布局\n      setTimeout(() => {\n        resolve(element.offsetHeight || defaultHeight);\n      }, 10);\n    });\n  });\n};\n","import { defineComponent, ref, computed, watch, onMounted, onUnmounted, nextTick, PropType } from 'vue';\nimport {\n  getImgElements,\n  getAllImg,\n  onComplateImgs,\n  getMinHeight,\n  getMaxHeight,\n  getMinHeightColumn,\n  LayoutAlgorithm,\n  getBalancedColumn,\n  getCompactPosition,\n  supportsIntersectionObserver,\n  throttle,\n  calculateNaturalHeight\n} from './utils';\n\nimport { WaterfallItem, ResponsiveBreakpoint } from './config'\n\nconst Waterfall = defineComponent({\n  name: 'Waterfall',\n\n  props: {\n    // 数据源\n    data: {\n      type: Array as PropType<WaterfallItem[]>,\n      required: true\n    },\n    // 唯一标识\n    nodeKey: {\n      type: String,\n      required: true\n    },\n    // 列数\n    column: {\n      type: Number,\n      default: 2\n    },\n    // 列间距\n    columnSpacing: {\n      type: Number,\n      default: 20\n    },\n    // 行间距\n    rowSpacing: {\n      type: Number,\n      default: 20\n    },\n    // 是否开启图片预加载\n    picturePreReading: {\n      type: Boolean,\n      default: true\n    },\n    // 是否开启动画\n    animation: {\n      type: Boolean,\n      default: true\n    },\n    // 布局算法\n    layoutAlgorithm: {\n      type: String as PropType<LayoutAlgorithm>,\n      default: LayoutAlgorithm.DEFAULT,\n      validator: (value: string) => {\n        return Object.values(LayoutAlgorithm).includes(value as LayoutAlgorithm);\n      }\n    },\n    // 是否开启虚拟滚动\n    virtualScroll: {\n      type: Boolean,\n      default: false\n    },\n    // 虚拟滚动缓冲项数量\n    virtualScrollBuffer: {\n      type: Number,\n      default: 5\n    },\n    // 响应式布局配置\n    responsive: {\n      type: Array as PropType<ResponsiveBreakpoint[]>,\n      default: () => []\n    },\n    // 自动调整容器高度的延迟\n    resizeDebounceTime: {\n      type: Number,\n      default: 200\n    },\n    // 自定义加载指示器类名\n    loadingClass: {\n      type: String,\n      default: ''\n    },\n    // 自定义空状态类名\n    emptyClass: {\n      type: String,\n      default: ''\n    },\n    // 瀑布流内容区最大高度，超出后启用滚动\n    maxHeight: {\n      type: [String, Number],\n      default: null\n    }\n  } as const,\n\n  emits: [\n    'item-rendered', // 项渲染完成\n    'layout-complete', // 布局完成\n    'resize', // 容器大小改变\n    'visible-items-change', // 可见项变化（用于虚拟滚动）\n    'error' // 错误事件\n  ],\n\n  // 使用类型推导，让 Vue 自动推导出正确的类型\n  setup(props, { slots, emit, expose }) {\n    // 容器总高度\n    const containerHeight = ref<number>(0);\n    // 记录每列高度的容器 key:列 value: 列高\n    const columnHeightObj = ref<Record<string, number>>({});\n    // 容器实例\n    const containerTarget = ref<HTMLElement | null>(null);\n    // 容器总宽度 不包含 padding margin border\n    const containerWidth = ref<number>(0);\n    // 容器左边距，计算 item 的 left\n    const containerLeft = ref<number>(0);\n    // 列宽\n    const columnWidth = ref<number>(0);\n    // item 高度集合\n    let itemHeights: number[] = [];\n    // 当前布局状态\n    const isLayouting = ref<boolean>(false);\n    // 记录可见的项（用于虚拟滚动）\n    const visibleItems = ref<Set<number>>(new Set());\n    // 当前应用的响应式配置\n    const currentResponsive = ref<ResponsiveBreakpoint | null>(null);\n    // 是否有数据正在加载中\n    const isLoading = ref<boolean>(false);\n    // 是否显示加载中状态\n    const showLoading = computed(() => isLoading.value && props.data.length === 0);\n    // 监听滚动事件的观察者\n    let intersectionObserver: IntersectionObserver | null = null;\n\n    // 实际使用的列数（考虑响应式）\n    const actualColumn = computed(() => currentResponsive.value?.column || props.column);\n    // 实际使用的列间距（考虑响应式）\n    const actualColumnSpacing = computed(() =>\n      currentResponsive.value?.columnSpacing !== undefined\n        ? currentResponsive.value.columnSpacing\n        : props.columnSpacing\n    );\n    // 实际使用的行间距（考虑响应式）\n    const actualRowSpacing = computed(() =>\n      currentResponsive.value?.rowSpacing !== undefined\n        ? currentResponsive.value.rowSpacing\n        : props.rowSpacing\n    );\n\n    /**\n     * 列间距合计\n     */\n    const columnSpacingTotal = computed(() => {\n      return (actualColumn.value - 1) * actualColumnSpacing.value;\n    });\n\n    /**\n     * 构建记录每列高度的对象\n     */\n    const useColumnHeightObj = () => {\n      const newColumnHeightObj: Record<string, number> = {};\n      for (let i = 0; i < actualColumn.value; i++) {\n        newColumnHeightObj[i] = 0;\n      }\n      columnHeightObj.value = newColumnHeightObj;\n    };\n\n    /**\n     * 计算容器宽度\n     */\n    const useContainerWidth = () => {\n      if (!containerTarget.value) return;\n\n      const style = getComputedStyle(containerTarget.value, null);\n      const paddingLeft = parseFloat(style.paddingLeft);\n      const paddingRight = parseFloat(style.paddingRight);\n\n      // 容器左边距\n      containerLeft.value = paddingLeft;\n\n      // 容器的宽度\n      containerWidth.value =\n        containerTarget.value.offsetWidth - paddingLeft - paddingRight;\n\n      // 检查并应用响应式配置\n      applyResponsiveConfig();\n    };\n\n    /**\n     * 应用响应式配置\n     */\n    const applyResponsiveConfig = () => {\n      if (!props.responsive || props.responsive.length === 0) return;\n\n      // 根据当前容器宽度选择合适的配置\n      let matchedConfig: ResponsiveBreakpoint | null = null;\n\n      // 按断点宽度降序排列\n      const sortedBreakpoints = [...props.responsive].sort((a, b) => b.width - a.width);\n\n      // 找到第一个匹配的断点\n      for (const breakpoint of sortedBreakpoints) {\n        if (containerWidth.value <= breakpoint.width) {\n          matchedConfig = breakpoint;\n        } else {\n          break;\n        }\n      }\n\n      // 如果找到匹配的配置并且与当前不同，则应用新配置\n      if (matchedConfig &&\n        (!currentResponsive.value ||\n          currentResponsive.value.column !== matchedConfig.column ||\n          currentResponsive.value.columnSpacing !== matchedConfig.columnSpacing ||\n          currentResponsive.value.rowSpacing !== matchedConfig.rowSpacing)) {\n        currentResponsive.value = matchedConfig;\n        // 需要重新计算布局\n        nextTick(() => {\n          reset();\n        });\n      } else if (!matchedConfig && currentResponsive.value) {\n        // 恢复到默认配置\n        currentResponsive.value = null;\n        nextTick(() => {\n          reset();\n        });\n      }\n    };\n\n    /**\n     * 计算列宽\n     */\n    const useColumnWidth = () => {\n      // 计算容器宽度\n      useContainerWidth();\n\n      // 计算列宽\n      columnWidth.value =\n        (containerWidth.value - columnSpacingTotal.value) / actualColumn.value;\n    };\n\n    /**\n     * 根据布局算法获取下一个item的位置\n     */\n    const getNextItemPosition = (index: number) => {\n      switch (props.layoutAlgorithm) {\n        case LayoutAlgorithm.BALANCED:\n          // 使用均衡算法\n          const balancedColumn = getBalancedColumn(columnHeightObj.value, itemHeights[index]);\n          return {\n            left: parseInt(balancedColumn) * (columnWidth.value + actualColumnSpacing.value) + containerLeft.value,\n            top: columnHeightObj.value[balancedColumn],\n            column: balancedColumn\n          };\n\n        case LayoutAlgorithm.COMPACT:\n          // 使用紧凑算法\n          const position = getCompactPosition(\n            columnHeightObj.value,\n            columnWidth.value,\n            itemHeights[index],\n            containerWidth.value\n          );\n          return {\n            left: position.left + containerLeft.value,\n            top: position.top,\n            column: position.column\n          };\n\n        case LayoutAlgorithm.DEFAULT:\n        default:\n          // 使用默认算法\n          const minColumn = getMinHeightColumn(columnHeightObj.value);\n          if (!minColumn) return { left: containerLeft.value, top: 0, column: '0' };\n\n          return {\n            left: parseInt(minColumn) * (columnWidth.value + actualColumnSpacing.value) + containerLeft.value,\n            top: getMinHeight(columnHeightObj.value) ?? 0,\n            column: minColumn\n          };\n      }\n    };\n\n    /**\n     * 指定列高度自增\n     */\n    const increasingHeight = (index: number, column: string) => {\n      columnHeightObj.value[column] += itemHeights[index] + actualRowSpacing.value;\n    };\n\n    // 渲染位置\n    const useItemLocation = () => {\n      isLayouting.value = true;\n\n      try {\n        const newData = [...props.data];\n\n        // 遍历数据源\n        newData.forEach((item, index) => {\n          // 避免重复运算\n          if (item._style) {\n            return;\n          }\n\n          // 生成 style\n          item._style = { left: 0, top: 0, width: columnWidth.value };\n\n          // 获取位置\n          const position = getNextItemPosition(index);\n\n          // 应用位置信息\n          item._style.left = position.left;\n          item._style.top = position.top;\n\n          // 存储真实高度用于后续计算\n          item._style.height = itemHeights[index];\n\n          // 指定列高度自增\n          increasingHeight(index, position.column);\n\n          // 触发单项渲染完成事件\n          emit('item-rendered', { item, index, position });\n        });\n\n        // 指定容器的高度\n        // 添加额外的底部空间，确保容器高度足够\n        containerHeight.value = getMaxHeight(columnHeightObj.value) + 50;\n\n        // 触发布局完成事件\n        emit('layout-complete', {\n          containerHeight: containerHeight.value,\n          itemsCount: props.data.length,\n          columnHeights: { ...columnHeightObj.value }\n        });\n      } catch (error) {\n        console.error('Layout calculation error:', error);\n        emit('error', {\n          type: 'layout',\n          message: 'Failed to calculate layout',\n          error\n        });\n      } finally {\n        isLayouting.value = false;\n      }\n    };\n\n    /**\n     * 不需要图片预加载的情况下计算布局\n     */\n    const useItemHeight = async () => {\n      itemHeights = [];\n      // 获取所有瀑布流项元素\n      const itemElements = Array.from(\n        document.getElementsByClassName(\"m-waterfall-item\")\n      ) as HTMLElement[];\n\n      if (itemElements.length === 0) return;\n\n      isLoading.value = true;\n\n      try {\n        // 计算 item 高度\n        for (const el of itemElements) {\n          // 使用更准确的方法计算高度\n          const height = await calculateNaturalHeight(el, 100);\n          itemHeights.push(height);\n        }\n\n        useItemLocation();\n      } catch (error) {\n        console.error('Error calculating item heights:', error);\n        emit('error', {\n          type: 'height-calculation',\n          message: 'Failed to calculate item heights',\n          error\n        });\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    /**\n     * 监听图片加载完成 需要图片预加载\n     */\n    const waitImgComplate = () => {\n      itemHeights = [];\n\n      // 拿到所有的元素\n      const itemElements = Array.from(\n        document.getElementsByClassName(\"m-waterfall-item\")\n      ) as HTMLElement[];\n\n      if (itemElements.length === 0) return;\n\n      isLoading.value = true;\n\n      try {\n        // 获取到元素的 img 标签\n        const imgElements = getImgElements(itemElements);\n\n        // 获取所有 img标签的图片\n        const allImgs = getAllImg(imgElements);\n\n        // 等待图片加载完成\n        onComplateImgs(allImgs).then(() => {\n          // 图片加载完成\n          itemElements.forEach((el) => {\n            itemHeights.push(el.offsetHeight);\n          });\n          // 渲染位置\n          useItemLocation();\n          isLoading.value = false;\n        }).catch(error => {\n          console.error('Error loading images:', error);\n          // 在图片加载失败时仍然尝试计算布局\n          itemElements.forEach((el) => {\n            itemHeights.push(el.offsetHeight);\n          });\n          useItemLocation();\n          isLoading.value = false;\n\n          emit('error', {\n            type: 'image-loading',\n            message: 'Failed to load some images',\n            error\n          });\n        });\n      } catch (error) {\n        console.error('Error in image preloading:', error);\n        isLoading.value = false;\n        emit('error', {\n          type: 'image-preloading',\n          message: 'Error setting up image preloading',\n          error\n        });\n      }\n    };\n\n    /**\n     * 设置虚拟滚动\n     */\n    const setupVirtualScroll = () => {\n      if (!props.virtualScroll || !supportsIntersectionObserver() || !containerTarget.value) {\n        return;\n      }\n\n      // 如果已经有观察者，先清除\n      if (intersectionObserver) {\n        intersectionObserver.disconnect();\n      }\n\n      // 创建新的交叉观察者\n      intersectionObserver = new IntersectionObserver(\n        (entries) => {\n          entries.forEach(entry => {\n            const index = parseInt(entry.target.getAttribute('data-index') || '-1');\n            if (index >= 0) {\n              if (entry.isIntersecting) {\n                visibleItems.value.add(index);\n              } else {\n                // 只有在项目完全离开视口时才移除\n                if (entry.intersectionRatio === 0) {\n                  visibleItems.value.delete(index);\n                }\n              }\n            }\n          });\n\n          // 触发可见项变化事件\n          emit('visible-items-change', Array.from(visibleItems.value));\n        },\n        {\n          root: null, // 使用视口作为根\n          rootMargin: `${props.virtualScrollBuffer * 100}px`,\n          threshold: 0.0 // 任何可见度都会触发\n        }\n      );\n\n      // 观察所有瀑布流项元素\n      const itemElements = Array.from(\n        document.getElementsByClassName(\"m-waterfall-item\")\n      ) as HTMLElement[];\n\n      itemElements.forEach(el => {\n        intersectionObserver!.observe(el);\n      });\n    };\n\n    /**\n     * 更新容器大小的监听函数\n     */\n    const updateContainerSize = throttle(() => {\n      useColumnWidth();\n      emit('resize', {\n        width: containerWidth.value,\n        height: containerHeight.value\n      });\n    }, props.resizeDebounceTime);\n\n    /**\n     * 重新构建瀑布流\n     */\n    const reset = async () => {\n      return new Promise<void>((resolve) => {\n        // 标记正在重置布局\n        isLayouting.value = true;\n\n        try {\n          useColumnWidth();\n\n          // 重置所有样式\n          props.data.forEach((item) => {\n            item._style = undefined;\n          });\n\n          // 重置容器高度和列高度\n          containerHeight.value = 0;\n          useColumnHeightObj();\n\n          // 清除虚拟滚动状态\n          visibleItems.value.clear();\n\n          nextTick(() => {\n            // 延迟执行以确保DOM更新\n            setTimeout(() => {\n              // 重新计算布局\n              if (props.picturePreReading) {\n                waitImgComplate();\n              } else {\n                useItemHeight();\n              }\n\n              // 如果启用了虚拟滚动，重新设置\n              if (props.virtualScroll) {\n                setupVirtualScroll();\n              }\n\n              isLayouting.value = false;\n              resolve();\n            }, props.animation ? 300 : 0); // 如果启用了动画，匹配过渡动画时长\n          });\n        } catch (error) {\n          console.error('Error resetting waterfall:', error);\n          isLayouting.value = false;\n          emit('error', {\n            type: 'reset',\n            message: 'Failed to reset waterfall layout',\n            error\n          });\n          resolve(); // 即使出错也要resolve以避免promise hanging\n        }\n      });\n    };\n\n    /**\n     * 强制刷新指定索引项的布局\n     * 用于动态高度变化的情况\n     */\n    const refreshItem = async (index: number) => {\n      if (index < 0 || index >= props.data.length || !props.data[index]) {\n        return;\n      }\n\n      // 移除该项的样式信息\n      props.data[index]._style = undefined;\n\n      // 重新计算整体布局\n      // 这是简化处理，更高效的方法是只重新计算受影响的项\n      await reset();\n    };\n\n    /**\n     * 添加窗口调整大小监听器\n     */\n    const addResizeListener = () => {\n      window.addEventListener('resize', updateContainerSize);\n    };\n\n    /**\n     * 移除窗口调整大小监听器\n     */\n    const removeResizeListener = () => {\n      window.removeEventListener('resize', updateContainerSize);\n    };\n\n    /**\n     * 获取当前布局信息\n     */\n    const getLayoutInfo = () => {\n      return {\n        containerWidth: containerWidth.value,\n        containerHeight: containerHeight.value,\n        columnWidth: columnWidth.value,\n        columns: actualColumn.value,\n        columnHeights: { ...columnHeightObj.value }\n      };\n    };\n\n    // 初始化\n    onMounted(() => {\n      useColumnWidth();\n      addResizeListener();\n    });\n\n    // 在组件销毁时，清除所有资源\n    onUnmounted(() => {\n      // 清除所有 _style\n      props.data.forEach((item) => {\n        delete item._style;\n      });\n\n      // 清除交叉观察者\n      if (intersectionObserver) {\n        intersectionObserver.disconnect();\n        intersectionObserver = null;\n      }\n\n      // 移除事件监听器\n      removeResizeListener();\n    });\n\n    // 监听数据变化\n    watch(\n      () => props.data,\n      (newValue) => {\n        // 如果数据为空，重置容器高度\n        if (newValue.length === 0) {\n          containerHeight.value = 0;\n          return;\n        }\n\n        nextTick(() => {\n          // 第一次获取数据时，构建高度记录容器\n          const resetColumnHeight = newValue.every((item) => !item._style);\n          if (resetColumnHeight) {\n            // 构建高度记录容器\n            useColumnHeightObj();\n          }\n\n          if (props.picturePreReading) {\n            waitImgComplate();\n          } else {\n            useItemHeight();\n          }\n\n          // 如果启用了虚拟滚动，重新设置\n          if (props.virtualScroll) {\n            nextTick(() => {\n              setupVirtualScroll();\n            });\n          }\n        });\n      },\n      {\n        deep: true,\n        immediate: true,\n      }\n    );\n\n    // 监听列数变化\n    watch(\n      () => actualColumn.value,\n      () => {\n        if (!containerTarget.value) return;\n\n        if (props.picturePreReading) {\n          columnWidth.value = 0;\n          // 数据改变后 视图变化后的回调\n          reset();\n        } else {\n          reset();\n        }\n      }\n    );\n\n    // 监听虚拟滚动设置变化\n    watch(\n      () => props.virtualScroll,\n      (newValue) => {\n        if (newValue) {\n          nextTick(() => {\n            setupVirtualScroll();\n          });\n        } else if (intersectionObserver) {\n          intersectionObserver.disconnect();\n          intersectionObserver = null;\n        }\n      }\n    );\n\n    // 暴露方法给父组件\n    expose({\n      reset,\n      refreshItem,\n      getLayoutInfo,\n      containerRef: containerTarget\n    });\n\n    // 判断项是否应该渲染（用于虚拟滚动）\n    const shouldRenderItem = (index: number) => {\n      // 如果未启用虚拟滚动，始终渲染\n      if (!props.virtualScroll) return true;\n\n      // 如果没有可见项，渲染全部\n      if (visibleItems.value.size === 0) return true;\n\n      // 如果项在可见项集合中，则渲染\n      if (visibleItems.value.has(index)) return true;\n\n      // 计算可见项的范围\n      const visibleIndexes = Array.from(visibleItems.value);\n      if (visibleIndexes.length === 0) return true;\n\n      const minVisible = Math.min(...visibleIndexes);\n      const maxVisible = Math.max(...visibleIndexes);\n\n      // 判断项是否在可见区域或缓冲区内\n      const buffer = props.virtualScrollBuffer;\n      return (index >= minVisible - buffer && index <= maxVisible + buffer);\n    };\n\n    // 渲染加载状态\n    const renderLoading = () => {\n      if (props.loadingClass && slots.loading) {\n        return slots.loading();\n      }\n\n      return (\n        <div class=\"flex items-center justify-center p-4\">\n          <div class=\"animate-pulse flex space-x-4\">\n            <div class=\"rounded-full bg-slate-200 h-10 w-10\"></div>\n            <div class=\"flex-1 space-y-6 py-1\">\n              <div class=\"h-2 bg-slate-200 rounded\"></div>\n              <div class=\"space-y-3\">\n                <div class=\"grid grid-cols-3 gap-4\">\n                  <div class=\"h-2 bg-slate-200 rounded col-span-2\"></div>\n                  <div class=\"h-2 bg-slate-200 rounded col-span-1\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    };\n\n    // 渲染空状态\n    const renderEmpty = () => {\n      if (props.emptyClass && slots.empty) {\n        return slots.empty();\n      }\n\n      return (\n        <div class=\"flex items-center justify-center p-6 text-gray-500\">\n          暂无数据\n        </div>\n      );\n    };\n\n    return () => {\n      // 确定容器样式\n      const containerStyle: Record<string, string | number> = {\n        height: `${containerHeight.value}px`,\n        minHeight: props.data.length === 0 ? '100px' : 'auto',\n        overflow: props.maxHeight ? 'auto' : 'hidden',\n      };\n\n      // 如果设置了最大高度\n      if (props.maxHeight) {\n        containerStyle.maxHeight = typeof props.maxHeight === 'number'\n          ? `${props.maxHeight}px`\n          : props.maxHeight;\n      }\n\n      return (\n        <div\n          class=\"relative waterfall-component\"\n          ref={containerTarget}\n          style={containerStyle}\n        >\n          {/* 加载中状态 */}\n          {showLoading.value && renderLoading()}\n\n          {/* 空数据状态 */}\n          {props.data.length === 0 && !showLoading.value && renderEmpty()}\n\n          {/* 瀑布流布局内容 */}\n          {columnWidth.value > 0 && props.data.length > 0 && (\n            <div class=\"waterfall-items-container\">\n              {props.data.map((item, index) =>\n                // 只有应该渲染的项才会显示\n                shouldRenderItem(index) && (\n                  <div\n                    key={props.nodeKey ? item[props.nodeKey] : index}\n                    class={[\n                      \"m-waterfall-item absolute\",\n                      {\n                        \"transition-all duration-300 ease-in-out\": props.animation,\n                        \"hover:shadow-lg\": props.animation,\n                        \"opacity-0\": !item._style\n                      },\n                    ]}\n                    style={{\n                      width: `${columnWidth.value}px`,\n                      left: `${item._style?.left ?? 0}px`,\n                      top: `${item._style?.top ?? 0}px`,\n                      transform: item._style ? \"translateY(0)\" : \"translateY(20px)\",\n                      opacity: item._style ? 1 : 0,\n                      visibility: item._style ? \"visible\" : \"hidden\",\n                      backfaceVisibility: \"hidden\",\n                      willChange: props.animation ? \"transform, opacity\" : \"auto\",\n                      transformOrigin: \"center center\",\n                    }}\n                    data-index={index}\n                  >\n                    {slots.default?.({\n                      item,\n                      width: columnWidth.value,\n                      index,\n                      isVisible: visibleItems.value.has(index)\n                    })}\n                  </div>\n                )\n              )}\n            </div>\n          )}\n\n          {/* 底部插槽 */}\n          {slots.footer && !isLoading.value && props.data.length > 0 && (\n            <div\n              class=\"waterfall-footer\"\n              style={{\n                position: 'relative',\n                marginTop: `${containerHeight.value}px`\n              }}\n            >\n              {slots.footer()}\n            </div>\n          )}\n\n          {/* 加载中遮罩 - 数据加载但非首次加载时显示 */}\n          {isLoading.value && props.data.length > 0 && (\n            <div class=\"absolute inset-0 bg-white bg-opacity-60 flex items-center justify-center\">\n              {slots.loadingOverlay?.() || (\n                <div class=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary\"></div>\n              )}\n            </div>\n          )}\n        </div>\n      );\n    };\n  },\n});\n\nexport default Waterfall;\n","<template>\n    <div class=\"max-w-[1200px] mx-auto p-5 transition-colors duration-300 dark:bg-gray-900\">\n        <h1 class=\"text-2xl font-bold mb-6 dark:text-white\">瀑布流组件示例</h1>\n\n        <!-- 基本用法示例 -->\n        <section class=\"mb-12 relative pb-10 border-b border-dashed border-gray-200 dark:border-gray-700\">\n            <h2 class=\"text-xl font-semibold mb-4 dark:text-white\">基本用法</h2>\n            <div class=\"flex items-center mb-4 flex-wrap gap-2\">\n                <span class=\"mr-2 dark:text-gray-300\">列数：</span>\n                <button v-for=\"col in [2, 3, 4]\" :key=\"col\" @click=\"basicColumn = col\"\n                    class=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded mr-2 transition-colors duration-200\"\n                    :class=\"{ 'bg-blue-700 dark:bg-blue-800': basicColumn === col }\">\n                    {{ col }}列\n                </button>\n            </div>\n\n            <div class=\"relative min-h-[400px] border border-gray-100 dark:border-gray-700 rounded-lg overflow-hidden\">\n                <Waterfall :data=\"basicItems\" nodeKey=\"id\" :column=\"basicColumn\" :columnSpacing=\"16\" :rowSpacing=\"16\"\n                    :animation=\"true\" @layout-complete=\"handleLayoutComplete\">\n                    <template #default=\"{ item, width }\">\n                        <div\n                            class=\"rounded-lg overflow-hidden shadow-md hover:shadow-xl transition-all duration-300 hover:-translate-y-1 bg-white dark:bg-gray-800\">\n                            <img :src=\"item.image\" :alt=\"item.title\" class=\"w-full block\" loading=\"lazy\" />\n                            <div class=\"p-4\">\n                                <h3 class=\"text-lg font-semibold mb-2 dark:text-white\">{{ item.title }}</h3>\n                                <p class=\"text-sm text-gray-600 dark:text-gray-300 leading-relaxed\">{{ item.description\n                                    }}</p>\n                            </div>\n                        </div>\n                    </template>\n                </Waterfall>\n            </div>\n        </section>\n\n        <!-- 主题适配示例 -->\n        <section class=\"mb-12 relative pb-10 border-b border-dashed border-gray-200 dark:border-gray-700\">\n            <h2 class=\"text-xl font-semibold mb-4 dark:text-white\">深色/浅色模式适配</h2>\n            <p class=\"mb-4 dark:text-gray-300\">瀑布流组件自动适应当前主题模式，提供最佳视觉体验。</p>\n\n            <div class=\"relative min-h-[500px] border border-gray-100 dark:border-gray-700 rounded-lg overflow-hidden\">\n                <Waterfall :data=\"themeItems\" nodeKey=\"id\" :column=\"3\" :picturePreReading=\"true\">\n                    <template #default=\"{ item, width }\">\n                        <div\n                            class=\"rounded-lg overflow-hidden shadow-md transition-all duration-300 hover:-translate-y-1 bg-white dark:bg-gray-800\">\n                            <div class=\"relative\">\n                                <img :src=\"item.image\" :alt=\"item.title\" class=\"w-full block\" loading=\"lazy\" />\n                                <span class=\"absolute top-3 right-3 py-1 px-3 rounded-full text-xs font-medium\"\n                                    :class=\"tagColors[item.category as Category]\">\n                                    {{ item.category }}\n                                </span>\n                            </div>\n                            <div class=\"p-4\">\n                                <h3 class=\"text-lg font-semibold mb-2 dark:text-white\">{{ item.title }}</h3>\n                                <p class=\"text-sm text-gray-600 dark:text-gray-300 leading-relaxed mb-3\">{{\n                                    item.description }}</p>\n                                <div class=\"flex justify-between items-center text-xs\">\n                                    <span class=\"text-gray-500 dark:text-gray-400\">{{ item.date }}</span>\n                                    <div class=\"flex items-center\">\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\"\n                                            class=\"h-4 w-4 text-gray-500 dark:text-gray-400 mr-1\" fill=\"none\"\n                                            viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                                                d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                                                d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                                        </svg>\n                                        <span class=\"dark:text-gray-400\">{{ item.views }}</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </template>\n                </Waterfall>\n            </div>\n        </section>\n\n        <!-- 动态加载示例 -->\n        <section class=\"mb-12 relative pb-10 border-b border-dashed border-gray-200 dark:border-gray-700\">\n            <h2 class=\"text-xl font-semibold mb-4 dark:text-white\">动态加载数据</h2>\n            <div class=\"flex gap-4 mb-4\">\n                <button @click=\"loadMoreItems\"\n                    class=\"bg-blue-500 hover:bg-blue-600 disabled:bg-gray-400 disabled:cursor-not-allowed text-white px-4 py-2 rounded transition-colors duration-200\"\n                    :disabled=\"loading\">\n                    {{ loading ? '加载中...' : '加载更多' }}\n                </button>\n                <div v-if=\"page > 1\" class=\"text-sm text-gray-500 dark:text-gray-400 self-center\">\n                    已加载 {{ dynamicItems.length }} 项数据\n                </div>\n            </div>\n\n            <div class=\"relative min-h-[600px] border border-gray-100 dark:border-gray-700 rounded-lg overflow-hidden\">\n                <Waterfall ref=\"dynamicWaterfall\" :data=\"dynamicItems\" nodeKey=\"id\" :column=\"3\">\n                    <template #default=\"{ item, width, index }\">\n                        <div\n                            class=\"rounded-lg overflow-hidden shadow-md hover:shadow-xl transition-all duration-300 hover:-translate-y-1 bg-white dark:bg-gray-800\">\n                            <div class=\"relative\">\n                                <img :src=\"item.image\" :alt=\"item.title\" class=\"w-full block\" loading=\"lazy\" />\n                                <div class=\"absolute bottom-2 right-2 bg-black/60 text-white px-2 py-1 rounded text-xs\">\n                                    #{{ index + 1 }}\n                                </div>\n                            </div>\n                            <div class=\"p-4\">\n                                <h3 class=\"text-lg font-semibold mb-2 dark:text-white\">{{ item.title }}</h3>\n                                <p class=\"text-sm text-gray-600 dark:text-gray-300 leading-relaxed\">{{ item.description\n                                    }}</p>\n                                <div class=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-3\">\n                                    <span>{{ item.date }}</span>\n                                    <span>{{ item.views }} 浏览</span>\n                                </div>\n                            </div>\n                        </div>\n                    </template>\n\n                    <template #footer>\n                        <div class=\"p-6 w-full text-center\">\n                            <div v-if=\"loading\" class=\"text-gray-500 dark:text-gray-400\">\n                                <div\n                                    class=\"inline-block animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-blue-500 dark:border-blue-400 mr-2\">\n                                </div>\n                                正在加载更多...\n                            </div>\n                            <div v-else\n                                class=\"text-gray-500 dark:text-gray-400 cursor-pointer hover:text-blue-500 dark:hover:text-blue-400 transition-colors duration-200\"\n                                @click=\"loadMoreItems\">\n                                <span>点击加载更多</span>\n                            </div>\n                        </div>\n                    </template>\n                </Waterfall>\n            </div>\n        </section>\n\n        <!-- 自定义卡片样式示例 -->\n        <section class=\"mb-12 relative\">\n            <h2 class=\"text-xl font-semibold mb-4 dark:text-white\">自定义卡片样式</h2>\n\n            <div class=\"relative min-h-[600px] border border-gray-100 dark:border-gray-700 rounded-lg overflow-hidden\">\n                <Waterfall :data=\"styledItems\" nodeKey=\"id\" :column=\"2\">\n                    <template #default=\"{ item, width }\">\n                        <div :class=\"[\n                            'rounded-lg overflow-hidden p-5 shadow-md transition-all duration-500 transform hover:scale-[1.02]',\n                            item.theme === 'blue' ? 'bg-gradient-to-br from-blue-500 to-blue-700 dark:from-blue-600 dark:to-blue-900' : '',\n                            item.theme === 'green' ? 'bg-gradient-to-br from-green-500 to-green-700 dark:from-green-600 dark:to-green-900' : '',\n                            item.theme === 'orange' ? 'bg-gradient-to-br from-orange-500 to-orange-700 dark:from-orange-600 dark:to-orange-900' : '',\n                            item.theme === 'purple' ? 'bg-gradient-to-br from-purple-500 to-purple-700 dark:from-purple-600 dark:to-purple-900' : '',\n                            'text-white'\n                        ]\">\n                            <div class=\"mb-4 border-b border-white/20 pb-2.5\">\n                                <h3 class=\"text-xl font-bold\">{{ item.title }}</h3>\n                            </div>\n                            <div class=\"mb-4 leading-relaxed\">\n                                <p>{{ item.content }}</p>\n                            </div>\n                            <div class=\"flex justify-between items-center mt-5\">\n                                <div class=\"flex items-center\">\n                                    <img :src=\"item.avatar\" alt=\"avatar\"\n                                        class=\"w-[30px] h-[30px] rounded-full mr-2 border-2 border-white/60\"\n                                        loading=\"lazy\" />\n                                    <span>{{ item.author }}</span>\n                                </div>\n                                <div class=\"flex flex-wrap gap-1.5\">\n                                    <span v-for=\"(tag, i) in item.tags\" :key=\"i\"\n                                        class=\"bg-white/20 px-2 py-1 rounded text-xs backdrop-blur-sm\">\n                                        {{ tag }}\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                    </template>\n                </Waterfall>\n            </div>\n        </section>\n\n        <!-- API 文档部分 -->\n        <section class=\"mb-12 relative\">\n            <h2 class=\"text-xl font-semibold mb-4 dark:text-white\">组件API</h2>\n            <div class=\"rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800\">\n                <h3 class=\"mb-4 text-lg font-medium text-gray-900 dark:text-white\">属性 (Props)</h3>\n                <div class=\"mb-6 overflow-x-auto\">\n                    <table class=\"min-w-full border-collapse\">\n                        <thead>\n                            <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">属性名</th>\n                                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">类型</th>\n                                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">默认值</th>\n                                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">描述</th>\n                            </tr>\n                        </thead>\n                        <tbody class=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">data</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">Array</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">[]</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">瀑布流数据源，数组中的每个对象代表一个瀑布流项</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">nodeKey</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">String</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">-</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">数据中用作唯一标识的字段名，用于优化重渲染</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">column</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">Number</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">2</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">瀑布流列数</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">columnSpacing</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">Number</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">20</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">列间距（单位：像素）</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">rowSpacing</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">Number</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">20</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">行间距（单位：像素）</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">picturePreReading</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">Boolean</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">true</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">是否开启图片预加载，开启后会等待图片加载完成再计算布局</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">animation</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">Boolean</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">true</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">是否启用动画效果</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">layoutAlgorithm</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">String</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">'default'</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">布局算法，可选值：'default'(默认)、'balanced'(均衡)、'compact'(紧凑)</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">virtualScroll</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">Boolean</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">false</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">是否开启虚拟滚动，适用于大数据量场景</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">virtualScrollBuffer</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">Number</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">5</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">虚拟滚动缓冲项数量</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">responsive</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">Array</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">[]</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">响应式配置断点，格式为 [{width, column, columnSpacing?, rowSpacing?}]</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">resizeDebounceTime</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">Number</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">200</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">窗口大小改变时的节流延迟，单位毫秒</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">loadingClass</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">String</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">''</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">自定义加载状态类名</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">emptyClass</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">String</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">''</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">自定义空状态类名</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">maxHeight</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">String/Number</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">null</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">瀑布流最大高度，超出后显示滚动条</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n\n                <h3 class=\"mb-4 text-lg font-medium text-gray-900 dark:text-white\">事件 (Events)</h3>\n                <div class=\"mb-6 overflow-x-auto\">\n                    <table class=\"min-w-full border-collapse\">\n                        <thead>\n                            <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">事件名</th>\n                                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">回调参数</th>\n                                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">描述</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">item-rendered</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">{item, index, position}</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">某一项渲染完成时触发</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">layout-complete</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">{containerHeight, itemsCount, columnHeights}</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">布局计算完成时触发</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">resize</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">{width, height}</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">容器大小改变时触发</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">visible-items-change</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">number[]</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">可见项变化时触发（虚拟滚动模式下）</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">error</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">{type, message, error}</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">发生错误时触发</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n\n                <h3 class=\"mb-4 text-lg font-medium text-gray-900 dark:text-white\">插槽 (Slots)</h3>\n                <div class=\"mb-6 overflow-x-auto\">\n                    <table class=\"min-w-full border-collapse\">\n                        <thead>\n                            <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">插槽名</th>\n                                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">插槽属性</th>\n                                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">描述</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">default</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">{item, width, index, isVisible}</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">瀑布流项的内容</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">loading</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">-</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">首次加载状态</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">loadingOverlay</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">-</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">加载叠加层</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">empty</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">-</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">空状态</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">footer</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">-</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">底部内容，常用于加载更多触发器</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n\n                <h3 class=\"mb-4 text-lg font-medium text-gray-900 dark:text-white\">方法 (Methods)</h3>\n                <div class=\"overflow-x-auto\">\n                    <table class=\"min-w-full border-collapse\">\n                        <thead>\n                            <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">方法名</th>\n                                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">参数</th>\n                                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">返回值</th>\n                                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">描述</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">reset</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">-</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">Promise&lt;void&gt;</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">重置瀑布流布局，当容器尺寸变化或需要强制重新计算布局时使用</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">refreshItem</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">index: number</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">Promise&lt;void&gt;</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">刷新指定索引的项，用于动态高度变化的场景</td>\n                            </tr>\n                            <tr>\n                                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">getLayoutInfo</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">-</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">Object</td>\n                                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">获取当前布局信息，包含容器宽度、高度、列宽等数据</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </section>\n\n        <!-- 小结与最佳实践 -->\n        <section class=\"mb-10\">\n            <h2 class=\"mb-4 text-xl font-semibold text-gray-900 dark:text-white\">小结与最佳实践</h2>\n            <div class=\"rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800\">\n                <div class=\"space-y-4\">\n                    <p class=\"text-gray-700 dark:text-gray-300\">\n                        瀑布流组件是一个功能强大的布局组件，适用于展示不同高度的内容，特别是图片和卡片。\n                        以下是一些使用建议：\n                    </p>\n\n                    <ul class=\"ml-6 list-disc space-y-2 text-gray-700 dark:text-gray-300\">\n                        <li>始终为组件设置适当的 <code class=\"bg-gray-100 px-1 py-0.5 rounded dark:bg-gray-700\">nodeKey</code> 属性，确保唯一标识，提升渲染性能</li>\n                        <li>对于包含图片的内容，建议保持 <code class=\"bg-gray-100 px-1 py-0.5 rounded dark:bg-gray-700\">picturePreReading</code> 为 true，确保正确的布局计算</li>\n                        <li>在处理大量数据（&gt; 200项）时，启用 <code class=\"bg-gray-100 px-1 py-0.5 rounded dark:bg-gray-700\">virtualScroll</code> 以提升性能</li>\n                        <li>使用 <code class=\"bg-gray-100 px-1 py-0.5 rounded dark:bg-gray-700\">responsive</code> 配置，根据不同设备屏幕大小调整列数和间距</li>\n                        <li>针对不同的使用场景选择合适的布局算法：\n                            <ul class=\"ml-6 list-disc space-y-1 mt-1\">\n                                <li><code class=\"bg-gray-100 px-1 py-0.5 rounded dark:bg-gray-700\">default</code>: 适合普通瀑布流，优先考虑加载速度</li>\n                                <li><code class=\"bg-gray-100 px-1 py-0.5 rounded dark:bg-gray-700\">balanced</code>: 适合需要平衡列高的场景，视觉更为统一</li>\n                                <li><code class=\"bg-gray-100 px-1 py-0.5 rounded dark:bg-gray-700\">compact</code>: 适合追求紧凑布局的场景，最大化利用空间</li>\n                            </ul>\n                        </li>\n                    </ul>\n\n                    <div class=\"rounded-lg border border-blue-100 bg-blue-50 p-4 dark:border-blue-900 dark:bg-blue-900/20\">\n                        <h4 class=\"mb-2 flex items-center text-blue-800 dark:text-blue-300\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"mr-2 h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                            </svg>\n                            性能优化提示\n                        </h4>\n                        <p class=\"text-sm text-blue-700 dark:text-blue-300\">\n                            对于有大量频繁更新的场景，可以考虑使用 <code class=\"rounded bg-blue-100 px-1 py-0.5 font-mono dark:bg-blue-800/60\">resizeDebounceTime</code> 属性调整窗口大小变化的响应灵敏度，以减少不必要的重新计算。在移动设备上，设置更大的延迟值（如 300-500ms）可以显著提升性能。\n                        </p>\n                    </div>\n\n                    <p class=\"text-gray-700 dark:text-gray-300\">\n                        结合无限滚动和瀑布流组件，可以实现高效、美观的内容浏览体验。通过合理配置和优化，即使是在移动设备上处理大量内容时，也能保持流畅的用户体验。\n                    </p>\n\n                    <div class=\"flex flex-wrap gap-4 mt-6\">\n                        <div class=\"flex-1 min-w-[200px] rounded-lg border border-gray-200 dark:border-gray-700 p-4\">\n                            <h4 class=\"font-medium mb-2 text-gray-900 dark:text-white\">常见应用场景</h4>\n                            <ul class=\"space-y-1 text-sm text-gray-700 dark:text-gray-300\">\n                                <li>• 图片画廊与照片墙</li>\n                                <li>• 商品展示列表</li>\n                                <li>• 社交媒体信息流</li>\n                                <li>• 文章卡片布局</li>\n                                <li>• 动态内容瀑布流</li>\n                            </ul>\n                        </div>\n                        \n                        <div class=\"flex-1 min-w-[200px] rounded-lg border border-gray-200 dark:border-gray-700 p-4\">\n                            <h4 class=\"font-medium mb-2 text-gray-900 dark:text-white\">常见陷阱与解决方案</h4>\n                            <ul class=\"space-y-1 text-sm text-gray-700 dark:text-gray-300\">\n                                <li>• 图片未加载完成导致布局错误 → 启用图片预加载</li>\n                                <li>• 列表频繁更新卡顿 → 使用虚拟滚动</li> \n                                <li>• 响应式布局不合理 → 优化断点配置</li>\n                                <li>• 性能问题 → 减少数据量或分页加载</li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, nextTick } from 'vue';\nimport Waterfall from './Waterfall';\n\n// 基本用法示例数据\nconst basicColumn = ref(3);\nconst basicItems = ref([\n    {\n        id: 1,\n        title: '瀑布流示例图片1',\n        description: '这是一张示例图片的描述内容，展示瀑布流的基本布局效果。',\n        image: 'https://picsum.photos/400/200?random=1'\n    },\n    {\n        id: 2,\n        title: '瀑布流示例图片2',\n        description: '不同高度的卡片会自动排列，形成紧凑的视觉效果。',\n        image: 'https://picsum.photos/400/300?random=2'\n    },\n    {\n        id: 3,\n        title: '瀑布流示例图片3',\n        description: '瀑布流布局特别适合展示图片、商品或卡片内容。',\n        image: 'https://picsum.photos/400/250?random=3'\n    },\n    {\n        id: 4,\n        title: '瀑布流示例图片4',\n        description: '用户可以持续浏览内容，非常适合展示大量信息。',\n        image: 'https://picsum.photos/400/280?random=4'\n    },\n    {\n        id: 5,\n        title: '瀑布流示例图片5',\n        description: '可以根据屏幕大小动态调整列数，实现响应式布局。',\n        image: 'https://picsum.photos/400/220?random=5'\n    },\n    {\n        id: 6,\n        title: '瀑布流示例图片6',\n        description: '图片加载完成后会重新计算布局，确保排列整齐。',\n        image: 'https://picsum.photos/400/320?random=6'\n    },\n]);\n\n// 布局完成回调\nconst handleLayoutComplete = (info: any) => {\n    console.log('布局完成', info);\n};\ntype Category = '设计' | '开发' | '用户体验' | '性能' | '动效';\n\n// 主题适配示例数据\nconst themeItems = ref<{\n    id: number;\n    title: string;\n    description: string;\n    image: string;\n    category: Category; // 使用明确的类型\n    date: string;\n    views: number;\n}[]>([\n    {\n        id: 101,\n        title: '深色模式优化体验',\n        description: '暗色主题不仅可以减轻眼睛疲劳，还能节省设备电量。',\n        image: 'https://picsum.photos/400/250?random=101',\n        category: '设计',\n        date: '2023-05-12',\n        views: 1280\n    },\n    {\n        id: 102,\n        title: '响应式布局设计',\n        description: '自动适应不同屏幕尺寸，提供最佳的用户体验。',\n        image: 'https://picsum.photos/400/220?random=102',\n        category: '开发',\n        date: '2023-06-18',\n        views: 943\n    },\n    {\n        id: 103,\n        title: '无障碍访问功能',\n        description: '确保所有用户都能方便地访问和使用内容，提高可访问性。',\n        image: 'https://picsum.photos/400/280?random=103',\n        category: '用户体验',\n        date: '2023-07-23',\n        views: 756\n    },\n    {\n        id: 104,\n        title: '高效加载策略',\n        description: '通过延迟加载和图像优化，提高页面加载速度，减少资源消耗。',\n        image: 'https://picsum.photos/400/260?random=104',\n        category: '性能',\n        date: '2023-08-05',\n        views: 1125\n    },\n    {\n        id: 105,\n        title: '动画效果增强',\n        description: '适当的动画和过渡效果可以提升用户体验，增加应用的活力。',\n        image: 'https://picsum.photos/400/230?random=105',\n        category: '动效',\n        date: '2023-09-14',\n        views: 867\n    }\n]);\n\n// 标签颜色\nconst tagColors: Record<Category, string> = {\n    '设计': 'bg-purple-500 text-white dark:bg-purple-600',\n    '开发': 'bg-blue-500 text-white dark:bg-blue-600',\n    '用户体验': 'bg-green-500 text-white dark:bg-green-600',\n    '性能': 'bg-orange-500 text-white dark:bg-orange-600',\n    '动效': 'bg-pink-500 text-white dark:bg-pink-600'\n};\n\n// 动态加载示例\nconst dynamicWaterfall = ref<any>(null);\nconst dynamicItems = ref<{ id: number; title: string; description: string; image: string; date: string; views: number; }[]>([]);\nconst page = ref(0);\nconst loading = ref(false);\n\nconst generateItems = (pageNum: number, count: number) => {\n    const items = [];\n    const baseId = (pageNum - 1) * count + 201;\n\n    for (let i = 0; i < count; i++) {\n        const id = baseId + i;\n        items.push({\n            id,\n            title: `动态加载项目 ${id - 200}`,\n            description: `这是第${pageNum}页加载的内容，展示动态加载数据的能力。适用于大数据量的场景。`,\n            image: `https://picsum.photos/400/${200 + Math.floor(Math.random() * 150)}?random=${id}`,\n            date: `2023-${Math.floor(Math.random() * 12) + 1}-${Math.floor(Math.random() * 28) + 1}`,\n            views: Math.floor(Math.random() * 1000) + 100\n        });\n    }\n\n    return items;\n};\n\nconst loadMoreItems = async () => {\n    if (loading.value) return;\n\n    loading.value = true;\n\n    // 模拟异步请求\n    await new Promise(resolve => setTimeout(resolve, 800));\n\n    page.value += 1;\n    const newItems = generateItems(page.value, 6);\n    dynamicItems.value = [...dynamicItems.value, ...newItems];\n\n    // 确保瀑布流布局更新\n    nextTick(async () => {\n        if (dynamicWaterfall.value && typeof dynamicWaterfall.value.reset === 'function') {\n            await dynamicWaterfall.value.reset();\n        }\n        loading.value = false;\n    });\n};\n\n// 自定义样式示例\nconst styledItems = ref([\n    {\n        id: 301,\n        title: '卡片样式自定义',\n        content: '瀑布流组件支持完全自定义卡片样式，包括渐变背景、动画效果等，可根据深浅主题自动适应。',\n        author: '张三',\n        avatar: 'https://randomuser.me/api/portraits/men/32.jpg',\n        tags: ['设计', '前端'],\n        theme: 'blue'\n    },\n    {\n        id: 302,\n        title: '响应式设计',\n        content: '这是一个响应式设计的示例，可以根据屏幕大小自动调整列数。自定义样式可以让您的应用更具个性化，同时保持良好的用户体验。',\n        author: '李四',\n        avatar: 'https://randomuser.me/api/portraits/women/44.jpg',\n        tags: ['开发', 'Vue', 'UI'],\n        theme: 'green'\n    },\n    {\n        id: 303,\n        title: '简约风格',\n        content: '瀑布流布局非常适合展示各种长度不一的内容，简约的设计风格可以让用户更专注于内容本身。',\n        author: '王五',\n        avatar: 'https://randomuser.me/api/portraits/men/22.jpg',\n        tags: ['简约'],\n        theme: 'orange'\n    },\n    {\n        id: 304,\n        title: '自定义主题色',\n        content: '您可以为每个卡片应用不同的主题色彩，创造丰富的视觉体验。在深色模式下，色彩会自动调整以提供更舒适的阅读体验。',\n        author: '赵六',\n        avatar: 'https://randomuser.me/api/portraits/women/24.jpg',\n        tags: ['设计', '创意', '色彩'],\n        theme: 'purple'\n    }\n]);\n\n// 初始化加载动态数据\nonMounted(() => {\n    loadMoreItems();\n});\n</script>\n\n<style scoped>\n.waterfall-component {\n    will-change: transform;\n}\n\n.m-waterfall-item {\n    backface-visibility: hidden;\n    transform: translateZ(0);\n}\n\n/* 暗黑模式过渡效果 */\n.dark .m-waterfall-item {\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n\n/* 加载动画效果 */\n@keyframes pulse {\n\n    0%,\n    100% {\n        opacity: 1;\n    }\n\n    50% {\n        opacity: 0.5;\n    }\n}\n\n.pulse-animation {\n    animation: pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n</style>\n"],"names":["getImgElements","itemElements","imgElements","el","getAllImg","imgElement","onComplateImgs","imgs","promiseAll","img","index","resolve","reject","imageObj","error","getMinHeight","columnHeightObj","columnHeightArr","value","getMaxHeight","getMinHeightColumn","minHeight","key","height","LayoutAlgorithm","getBalancedColumn","itemHeight","heightDifferences","totalHeight","avgHeight","column","newHeight","minDiffColumn","minDiff","getCompactPosition","itemWidth","containerWidth","minColumn","supportsIntersectionObserver","throttle","fn","delay","lastCall","args","now","calculateNaturalHeight","element","defaultHeight","images","imagePromises","resolveImg","Waterfall","defineComponent","name","props","data","type","Array","required","nodeKey","String","Number","default","columnSpacing","rowSpacing","picturePreReading","Boolean","animation","layoutAlgorithm","DEFAULT","validator","Object","values","includes","virtualScroll","virtualScrollBuffer","responsive","resizeDebounceTime","loadingClass","emptyClass","maxHeight","emits","setup","slots","emit","expose","containerHeight","ref","containerTarget","containerLeft","columnWidth","itemHeights","isLayouting","visibleItems","Set","currentResponsive","isLoading","showLoading","computed","length","intersectionObserver","actualColumn","actualColumnSpacing","undefined","actualRowSpacing","columnSpacingTotal","useColumnHeightObj","newColumnHeightObj","i","useContainerWidth","style","getComputedStyle","paddingLeft","parseFloat","paddingRight","offsetWidth","applyResponsiveConfig","matchedConfig","sortedBreakpoints","sort","a","b","width","breakpoint","nextTick","reset","useColumnWidth","getNextItemPosition","BALANCED","balancedColumn","left","parseInt","top","COMPACT","position","increasingHeight","useItemLocation","forEach","item","_style","itemsCount","columnHeights","console","message","useItemHeight","from","document","getElementsByClassName","push","waitImgComplate","allImgs","then","offsetHeight","catch","setupVirtualScroll","disconnect","IntersectionObserver","entries","entry","target","getAttribute","isIntersecting","add","intersectionRatio","delete","root","rootMargin","threshold","observe","updateContainerSize","Promise","clear","setTimeout","refreshItem","addResizeListener","window","addEventListener","removeResizeListener","removeEventListener","getLayoutInfo","columns","onMounted","onUnmounted","watch","newValue","every","deep","immediate","containerRef","shouldRenderItem","size","has","visibleIndexes","minVisible","Math","min","maxVisible","max","buffer","renderLoading","loading","_createVNode","renderEmpty","empty","_createTextVNode","containerStyle","overflow","map","transform","opacity","visibility","backfaceVisibility","willChange","transformOrigin","isVisible","footer","marginTop","loadingOverlay","basicColumn","basicItems","handleLayoutComplete","info","themeItems","tagColors","dynamicWaterfall","dynamicItems","page","generateItems","pageNum","count","items","baseId","id","loadMoreItems","newItems","styledItems"],"mappings":"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"}