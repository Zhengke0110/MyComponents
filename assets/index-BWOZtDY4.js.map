{"version":3,"file":"index-BWOZtDY4.js","sources":["../../src/libs/Popover/config.ts","../../src/libs/Popover/hooks.ts","../../src/libs/Popover/Popover.tsx","../../src/libs/Popover/View.vue"],"sourcesContent":["// 所有可用的颜色类型\nexport type ColorType =\n  | \"slate\"\n  | \"gray\"\n  | \"zinc\"\n  | \"neutral\"\n  | \"stone\" // 灰色系\n  | \"red\"\n  | \"orange\"\n  | \"amber\"\n  | \"yellow\" // 暖色系\n  | \"lime\"\n  | \"green\"\n  | \"emerald\"\n  | \"teal\" // 绿色系\n  | \"cyan\"\n  | \"sky\"\n  | \"blue\"\n  | \"indigo\" // 蓝色系\n  | \"violet\"\n  | \"purple\"\n  | \"fuchsia\"\n  | \"pink\"\n  | \"rose\"; // 紫粉色系\n\nexport type PlacementType =\n  | \"top\"\n  | \"top-start\"\n  | \"top-end\"\n  | \"bottom\"\n  | \"bottom-start\"\n  | \"bottom-end\"\n  | \"left\"\n  | \"left-start\"\n  | \"left-end\"\n  | \"right\"\n  | \"right-start\"\n  | \"right-end\";\n\nexport interface PopoverProps {\n  placement?: PlacementType;\n  offset?: number;\n  delay?: number;\n  trigger?: \"hover\" | \"click\";\n  arrow?: boolean;\n  customClass?: string;\n  contentClass?: string;\n  closeOnContentClick?: boolean;\n  showDelay?: number;\n  hideDelay?: number;\n  persistent?: boolean;\n  // 添加自定义背景色属性\n  backgroundColor?: string;\n  darkBackgroundColor?: string;\n  theme?: ColorType;\n  variant?: \"solid\" | \"light\" | \"glass\";\n}\n\n// 添加颜色映射对象\nexport const colorMap = {\n  slate: { light: \"#f8fafc\", dark: \"#334155\" },\n  gray: { light: \"#f9fafb\", dark: \"#374151\" },\n  zinc: { light: \"#fafafa\", dark: \"#3f3f46\" },\n  neutral: { light: \"#fafafa\", dark: \"#404040\" },\n  stone: { light: \"#fafaf9\", dark: \"#44403c\" },\n  red: { light: \"#fef2f2\", dark: \"#991b1b\" },\n  orange: { light: \"#fff7ed\", dark: \"#9a3412\" },\n  amber: { light: \"#fffbeb\", dark: \"#92400e\" },\n  yellow: { light: \"#fefce8\", dark: \"#854d0e\" },\n  lime: { light: \"#f7fee7\", dark: \"#3f6212\" },\n  green: { light: \"#f0fdf4\", dark: \"#166534\" },\n  emerald: { light: \"#ecfdf5\", dark: \"#065f46\" },\n  teal: { light: \"#f0fdfa\", dark: \"#115e59\" },\n  cyan: { light: \"#ecfeff\", dark: \"#155e75\" },\n  sky: { light: \"#f0f9ff\", dark: \"#075985\" },\n  blue: { light: \"#eff6ff\", dark: \"#1e40af\" },\n  indigo: { light: \"#eef2ff\", dark: \"#3730a3\" },\n  violet: { light: \"#f5f3ff\", dark: \"#5b21b6\" },\n  purple: { light: \"#faf5ff\", dark: \"#6b21a8\" },\n  fuchsia: { light: \"#fdf4ff\", dark: \"#86198f\" },\n  pink: { light: \"#fdf2f8\", dark: \"#9d174d\" },\n  rose: { light: \"#fff1f2\", dark: \"#9f1239\" },\n} as const;\n","import { ref } from \"vue\";\nimport { computed, nextTick } from \"vue\";\nimport {\n  useElementBounding,\n  useEventListener,\n  useTimeoutFn,\n  onClickOutside,\n  useElementHover,\n  useToggle,\n  tryOnUnmounted,\n  whenever,\n} from \"@vueuse/core\";\nimport { PopoverProps } from \"./config\";\n// Hook: usePopover\nexport function usePopover(\n  props: PopoverProps,\n  emit: (event: \"show\" | \"hide\") => void,\n) {\n  const containerRef = ref<HTMLElement | null>(null);\n  const triggerRef = ref<HTMLElement | null>(null);\n  const popoverRef = ref<HTMLElement | null>(null);\n  const [isVisible, _] = useToggle(false);\n\n  // VueUse composables\n  const triggerBounds = useElementBounding(triggerRef);\n  const popoverBounds = useElementBounding(popoverRef);\n  const isHovered = useElementHover(containerRef);\n\n  // Timeout handlers\n  const { start: startShowTimer, stop: stopShowTimer } = useTimeoutFn(() => {\n    isVisible.value = true;\n    emit(\"show\");\n  }, props.showDelay || 0);\n\n  const { start: startHideTimer, stop: stopHideTimer } = useTimeoutFn(() => {\n    isVisible.value = false;\n    emit(\"hide\");\n  }, props.hideDelay || 300);\n\n  // Methods\n  const show = () => {\n    stopHideTimer();\n    startShowTimer();\n  };\n\n  const hide = () => {\n    if (props.persistent) return;\n    stopShowTimer();\n    startHideTimer();\n  };\n\n  // Event handlers setup\n  onClickOutside(\n    containerRef,\n    () => {\n      // 移除 trigger 判断，让点击外部始终触发关闭\n      if (!props.persistent) {\n        hide();\n      }\n    },\n    { ignore: [triggerRef] },\n  );\n\n  whenever(isHovered, (value) => {\n    if (props.trigger !== \"hover\") return;\n    if (value) {\n      show();\n    } else {\n      // 添加延迟以防止过快关闭\n      setTimeout(() => {\n        if (!isHovered.value) {\n          hide();\n        }\n      }, 100);\n    }\n  });\n\n  useEventListener(triggerRef, \"click\", (event: Event) => {\n    if (props.trigger !== \"click\") return;\n    event.stopPropagation();\n    if (isVisible.value) {\n      hide();\n    } else {\n      show();\n    }\n  });\n\n  useEventListener(popoverRef, \"click\", (event: Event) => {\n    if (props.closeOnContentClick) {\n      event.stopPropagation();\n      hide();\n    }\n  });\n\n  whenever(isVisible, async () => {\n    await nextTick();\n    triggerBounds.update();\n    popoverBounds.update();\n  });\n\n  // Cleanup\n  tryOnUnmounted(() => {\n    stopShowTimer();\n    stopHideTimer();\n  });\n\n  // Computed styles\n  const getArrowPositionClass = computed(() => {\n    const baseClasses = \"border-gray-200 dark:border-zinc-700\";\n    const positions = {\n      top: `bottom-[-6px] border-b border-r ${baseClasses}`,\n      bottom: `top-[-6px] border-t border-l ${baseClasses}`,\n      left: `right-[-6px] border-r border-t ${baseClasses}`,\n      right: `left-[-6px] border-l border-b ${baseClasses}`,\n    };\n\n    const direction = props.placement?.split(\"-\")[0] as keyof typeof positions;\n    return positions[direction];\n  });\n\n  const getAnimationClass = computed(() => {\n    const direction = props.placement?.split(\"-\")[0];\n    return (\n      {\n        top: \"slide-down-fade\",\n        bottom: \"slide-up-fade\",\n        left: \"slide-right-fade\",\n        right: \"slide-left-fade\",\n      }[direction as string] || \"slide-up-fade\"\n    );\n  });\n\n  // 获取当前视口尺寸\n  const viewportWidth = computed(() => window.innerWidth);\n  const viewportHeight = computed(() => window.innerHeight);\n\n  const popoverStyle = computed(() => {\n    const style: Record<string, string | number> = {};\n    if (!triggerBounds.width.value || !popoverBounds.width.value) return style;\n\n    const {\n      width: triggerWidth,\n      height: triggerHeight,\n      left: triggerLeft,\n      top: triggerTop,\n      right: triggerRight,\n      bottom: triggerBottom,\n    } = triggerBounds;\n\n    const { width: popoverWidth, height: popoverHeight } = popoverBounds;\n\n    const offset = props.offset ?? 8;\n    let mainPlacement = props.placement?.split(\"-\")[0] as string;\n    let alignment = props.placement?.split(\"-\")[1];\n\n    // 基本位置计算\n    let calcPosition = () => {\n      switch (mainPlacement) {\n        case \"top\":\n          style.bottom = `${triggerHeight.value + offset}px`;\n          if (alignment === \"start\") {\n            style.left = \"0px\";\n          } else if (alignment === \"end\") {\n            style.right = \"0px\";\n          } else {\n            style.left = `${(triggerWidth.value - popoverWidth.value) / 2}px`;\n          }\n          break;\n\n        case \"bottom\":\n          style.top = `${triggerHeight.value + offset}px`;\n          if (alignment === \"start\") {\n            style.left = \"0px\";\n          } else if (alignment === \"end\") {\n            style.right = \"0px\";\n          } else {\n            style.left = `${(triggerWidth.value - popoverWidth.value) / 2}px`;\n          }\n          break;\n\n        case \"left\":\n          style.right = `${triggerWidth.value + offset}px`;\n          if (alignment === \"start\") {\n            style.top = \"0px\";\n          } else if (alignment === \"end\") {\n            style.bottom = \"0px\";\n          } else {\n            style.top = `${(triggerHeight.value - popoverHeight.value) / 2}px`;\n          }\n          break;\n\n        case \"right\":\n          style.left = `${triggerWidth.value + offset}px`;\n          if (alignment === \"start\") {\n            style.top = \"0px\";\n          } else if (alignment === \"end\") {\n            style.bottom = \"0px\";\n          } else {\n            style.top = `${(triggerHeight.value - popoverHeight.value) / 2}px`;\n          }\n          break;\n      }\n    };\n\n    // 执行基本位置计算\n    calcPosition();\n\n    // 安全区域检测与调整逻辑\n    nextTick(() => {\n      if (!popoverRef.value || !containerRef.value) return;\n\n      const popoverRect = popoverRef.value.getBoundingClientRect();\n      const containerRect = containerRef.value.getBoundingClientRect();\n      const safeMargin = 10; // 安全边距\n\n      // 计算容器在视口中的绝对位置\n      const containerAbsLeft = containerRect.left;\n      const containerAbsTop = containerRect.top;\n\n      // 检查并调整水平位置\n      if (popoverRect.right > viewportWidth.value - safeMargin) {\n        // 如果右侧超出视口\n        if (mainPlacement === \"left\" || mainPlacement === \"right\") {\n          // 对于左右定位，调整为相反方向\n          if (mainPlacement === \"right\") {\n            delete style.left;\n            style.right = `${triggerWidth.value + offset}px`;\n          }\n        } else {\n          // 对于上下定位，调整水平偏移\n          delete style.left;\n          style.right = \"0px\";\n        }\n      } else if (popoverRect.left < safeMargin) {\n        // 如果左侧超出视口\n        if (mainPlacement === \"left\" || mainPlacement === \"right\") {\n          // 对于左右定位，调整为相反方向\n          if (mainPlacement === \"left\") {\n            delete style.right;\n            style.left = `${triggerWidth.value + offset}px`;\n          }\n        } else {\n          // 对于上下定位，调整水平偏移\n          delete style.right;\n          style.left = \"0px\";\n        }\n      }\n\n      // 检查并调整垂直位置\n      if (popoverRect.bottom > viewportHeight.value - safeMargin) {\n        // 如果底部超出视口\n        if (mainPlacement === \"top\" || mainPlacement === \"bottom\") {\n          // 对于上下定位，调整为相反方向\n          if (mainPlacement === \"bottom\") {\n            delete style.top;\n            style.bottom = `${triggerHeight.value + offset}px`;\n          }\n        } else {\n          // 对于左右定位，调整垂直偏移\n          delete style.top;\n          style.bottom = \"0px\";\n        }\n      } else if (popoverRect.top < safeMargin) {\n        // 如果顶部超出视口\n        if (mainPlacement === \"top\" || mainPlacement === \"bottom\") {\n          // 对于上下定位，调整为相反方向\n          if (mainPlacement === \"top\") {\n            delete style.bottom;\n            style.top = `${triggerHeight.value + offset}px`;\n          }\n        } else {\n          // 对于左右定位，调整垂直偏移\n          delete style.bottom;\n          style.top = \"0px\";\n        }\n      }\n\n      // 应用调整后的样式\n      Object.keys(style).forEach((key) => {\n        if (popoverRef.value) {\n          popoverRef.value.style[key as any] = style[key] as string;\n        }\n      });\n    });\n\n    return style;\n  });\n\n  return {\n    containerRef,\n    triggerRef,\n    popoverRef,\n    isVisible,\n    getArrowPositionClass,\n    getAnimationClass,\n    popoverStyle,\n    show,\n    hide,\n  } as const;\n}\n","import { defineComponent, PropType, StyleValue, Transition } from \"vue\";\nimport { computed } from \"vue\";\nimport { whenever } from \"@vueuse/core\";\nimport \"./styles.css\"; // 引入外部样式文件\nimport { ColorType, PlacementType, colorMap } from \"./config\";\nimport { usePopover } from \"./hooks\";\n\nexport default defineComponent({\n  name: \"Popover\",\n  props: {\n    placement: {\n      type: String as PropType<PlacementType>,\n      default: \"bottom\",\n    },\n    offset: { type: Number, default: 8 },\n    delay: { type: Number, default: 300 },\n    trigger: {\n      type: String as PropType<\"hover\" | \"click\">,\n      default: \"hover\",\n    },\n    arrow: { type: Boolean, default: false },\n    customClass: { type: String, default: \"\" },\n    contentClass: { type: String, default: \"\" },\n    closeOnContentClick: { type: Boolean, default: false },\n    showDelay: { type: Number, default: 0 },\n    hideDelay: { type: Number, default: 300 },\n    persistent: { type: Boolean, default: false },\n    // 新增自定义背景色属性\n    backgroundColor: { type: String, default: \"rgba(255, 255, 255, 0.9)\" },\n    darkBackgroundColor: { type: String, default: \"rgba(39, 39, 42, 0.9)\" },\n    theme: {\n      type: String as PropType<ColorType>,\n      default: undefined,\n    },\n    variant: {\n      type: String as PropType<\"solid\" | \"light\" | \"glass\">,\n      default: \"solid\",\n    },\n  },\n  emits: [\"show\", \"hide\"],\n  setup(props, { slots, emit }) {\n    const {\n      containerRef,\n      triggerRef,\n      popoverRef,\n      isVisible,\n      getArrowPositionClass,\n      popoverStyle,\n    } = usePopover(props, (event) => emit(event));\n\n    // 检测当前是否为暗黑模式\n    const isDarkMode = computed(() => {\n      if (typeof window === \"undefined\") return false;\n      return document.documentElement.classList.contains(\"dark\");\n    });\n\n    // 计算背景色样式\n    const backgroundStyle = computed(() => {\n      // 如果指定了自定义类，优先使用自定义类\n      if (props.customClass) {\n        return {};\n      }\n\n      return {\n        backgroundColor: isDarkMode.value\n          ? props.darkBackgroundColor\n          : props.backgroundColor,\n        backdropFilter: \"blur(8px)\",\n      };\n    });\n\n    // 合并所有样式\n    const mergedPopoverStyle = computed(() => {\n      return {\n        ...(popoverStyle.value as object),\n        ...(backgroundStyle.value as object),\n      } as StyleValue;\n    });\n\n    // 处理箭头背景色\n    const arrowStyle = computed(() => {\n      if (!props.arrow) return {};\n\n      // 如果指定了自定义类，不应用内联背景色\n      if (props.customClass) {\n        return { backgroundColor: \"inherit\" };\n      }\n\n      // 使用与主体相同的背景色\n      return {\n        backgroundColor: isDarkMode.value\n          ? props.darkBackgroundColor\n          : props.backgroundColor,\n      };\n    });\n\n    // 使用监听器动态更新箭头背景色\n    whenever(isDarkMode, () => {\n      if (popoverRef.value && props.arrow) {\n        const arrowElement = popoverRef.value.querySelector(\n          \".popover-arrow\",\n        ) as HTMLElement;\n        if (arrowElement) {\n          arrowElement.style.backgroundColor = isDarkMode.value\n            ? props.darkBackgroundColor\n            : props.backgroundColor;\n        }\n      }\n    });\n\n\n    // 修改 getThemeClasses 计算逻辑\n    const getThemeStyles = computed(() => {\n      if (!props.theme || !colorMap[props.theme]) return {};\n\n      const colors = colorMap[props.theme];\n      const variants = {\n        solid: {\n          backgroundColor: colors.dark,\n          color: \"#ffffff\",\n          borderColor: \"transparent\",\n        },\n        light: {\n          backgroundColor: colors.light,\n          color: colors.dark,\n          borderColor: colors.light,\n        },\n        glass: {\n          backgroundColor: `${colors.light}cc`,\n          color: colors.dark,\n          borderColor: `${colors.light}33`,\n          backdropFilter: \"blur(8px)\",\n        },\n      };\n\n      return variants[props.variant];\n    });\n\n    // 修改箭头样式计算逻辑\n    const getArrowStyles = computed(() => {\n      if (!props.theme || !colorMap[props.theme]) return {};\n\n      const colors = colorMap[props.theme];\n      const variants = {\n        solid: {\n          backgroundColor: colors.dark,\n          borderColor: \"transparent\",\n        },\n        light: {\n          backgroundColor: colors.light,\n          borderColor: colors.light,\n        },\n        glass: {\n          backgroundColor: `${colors.light}cc`,\n          borderColor: `${colors.light}33`,\n        },\n      };\n\n      return variants[props.variant];\n    });\n\n    return () => (\n      <div ref={containerRef} class=\"relative inline-block\">\n        <div ref={triggerRef} class=\"inline-block\">\n          {slots.reference?.()}\n        </div>\n        <Transition\n          enterActiveClass=\"transform-gpu transition-all duration-200 ease-out\"\n          leaveActiveClass=\"transform-gpu transition-all duration-150 ease-in\"\n          enterFromClass=\"opacity-0 scale-95\"\n          leaveToClass=\"opacity-0 scale-95\"\n        >\n          {isVisible.value && (\n            <div\n              ref={popoverRef}\n              class={[\n                \"absolute z-50\",\n                \"rounded-xl shadow-lg\",\n                \"border\",\n                props.customClass,\n              ].filter(Boolean)}\n              style={{\n                // 使用类型断言确保扩展的对象类型正确\n                ...(mergedPopoverStyle.value as Record<string, string>),\n                ...getThemeStyles.value,\n              }}\n            >\n              <div class={[\"p-2\", props.contentClass].filter(Boolean)}>\n                {slots.default?.()}\n              </div>\n              {props.arrow && (\n                <div\n                  class={[\n                    \"absolute h-3 w-3 rotate-45 border\",\n                    getArrowPositionClass.value, // 直接添加类名\n                  ].join(\" \")}\n                  style={{\n                    ...(getArrowStyles.value as Record<string, string>),\n                  }}\n                />\n              )}\n            </div>\n          )}\n        </Transition>\n      </div>\n    );\n  },\n});\n","<template>\n  <div class=\"p-8 space-y-12\">\n    <!-- 基础用法和触发方式 -->\n    <section class=\"space-y-4\">\n      <div class=\"mb-6\">\n        <h2 class=\"text-xl font-bold mb-1\">基础用法</h2>\n        <p class=\"text-gray-500 dark:text-gray-400 text-sm\">展示了基本的悬浮和点击触发效果</p>\n      </div>\n      <div class=\"flex flex-wrap gap-6\">\n        <Popover arrow>\n          <template #reference>\n            <button class=\"px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md\">默认悬浮</button>\n          </template>\n          这是一个基础的 Popover\n        </Popover>\n\n        <Popover trigger=\"click\" arrow>\n          <template #reference>\n            <button\n              class=\"px-4 py-2 border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md\">点击触发</button>\n          </template>\n          点击触发的 Popover\n        </Popover>\n      </div>\n    </section>\n\n    <!-- 位置示例 -->\n    <section class=\"space-y-4\">\n      <div class=\"mb-6\">\n        <h2 class=\"text-xl font-bold mb-1\">弹出位置</h2>\n        <p class=\"text-gray-500 dark:text-gray-400 text-sm\">支持12个不同的弹出位置</p>\n      </div>\n      <div class=\"grid gap-8\">\n        <!-- 基础位置 -->\n        <div class=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\n          <Popover v-for=\"placement in ['top', 'right', 'bottom', 'left'] as const\" :key=\"placement\"\n            :placement=\"placement\" arrow>\n            <template #reference>\n              <button\n                class=\"w-full px-4 py-2 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-md\">{{\n                placement }} 方向</button>\n            </template>\n            {{ placement }} 位置的 Popover\n          </Popover>\n        </div>\n\n        <!-- 对齐方式 -->\n        <div class=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\n          <Popover v-for=\"align in ['-start', '', '-end']\" :key=\"align\" :placement=\"(`top${align}`) as PlacementType\"\n            arrow>\n            <template #reference>\n              <button\n                class=\"w-full px-4 py-2 border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md\">\n                top{{ align || '-center' }}\n              </button>\n            </template>\n            对齐方式: {{ align || 'center' }}\n          </Popover>\n        </div>\n      </div>\n    </section>\n\n    <!-- 主题展示 -->\n    <section class=\"space-y-4\">\n      <div class=\"mb-6\">\n        <h2 class=\"text-xl font-bold mb-1\">主题与变体</h2>\n        <p class=\"text-gray-500 dark:text-gray-400 text-sm\">展示不同的主题颜色和风格变体</p>\n      </div>\n\n      <!-- 主题色分组展示 -->\n      <div class=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n        <div v-for=\"variant in ['solid', 'light', 'glass'] as const\" :key=\"variant\" class=\"space-y-4\">\n          <h3 class=\"font-medium capitalize text-gray-700 dark:text-gray-300\">\n            {{ variant }} 风格\n          </h3>\n          <!-- 每组显示代表性的颜色 -->\n          <div class=\"grid grid-cols-2 gap-3\">\n            <Popover v-for=\"color in ['blue', 'red', 'green', 'purple'] as const\" :key=\"color\" :theme=\"color\"\n              :variant=\"variant\" arrow placement=\"right\">\n              <template #reference>\n                <button class=\"w-full px-3 py-1.5 text-sm rounded-md\" :class=\"{\n                  'bg-blue-500 text-white': color === 'blue',\n                  'bg-red-500 text-white': color === 'red',\n                  'bg-green-500 text-white': color === 'green',\n                  'bg-purple-500 text-white': color === 'purple'\n                }\">\n                  {{ color }}\n                </button>\n              </template>\n              <div class=\"text-sm\">\n                {{ variant }} 风格的 {{ color }} 主题\n              </div>\n            </Popover>\n          </div>\n        </div>\n      </div>\n    </section>\n\n    <!-- 自定义样式 -->\n    <section class=\"space-y-4\">\n      <div class=\"mb-6\">\n        <h2 class=\"text-xl font-bold mb-1\">自定义样式</h2>\n        <p class=\"text-gray-500 dark:text-gray-400 text-sm\">通过不同方式自定义 Popover 的样式</p>\n      </div>\n      <div class=\"flex flex-wrap gap-6\">\n        <Popover backgroundColor=\"rgba(219, 234, 254, 0.9)\" darkBackgroundColor=\"rgba(30, 64, 175, 0.5)\" arrow>\n          <template #reference>\n            <button class=\"px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md\">自定义背景色</button>\n          </template>\n          使用背景色属性设置样式\n        </Popover>\n\n        <Popover customClass=\"bg-gradient-to-r from-sky-500/90 to-indigo-500/90 text-white\" arrow>\n          <template #reference>\n            <button\n              class=\"px-4 py-2 border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md\">渐变背景</button>\n          </template>\n          使用 Tailwind 类创建渐变效果\n        </Popover>\n\n        <Popover contentClass=\"w-64 p-0 overflow-hidden rounded-lg\" persistent>\n          <template #reference>\n            <button\n              class=\"px-4 py-2 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-md\">复杂内容</button>\n          </template>\n          <div class=\"divide-y divide-gray-100 dark:divide-gray-800\">\n            <div class=\"p-4 bg-blue-50/50 dark:bg-blue-900/30\">\n              <h3 class=\"font-medium\">自定义内容区域</h3>\n            </div>\n            <div class=\"p-4\">\n              <p class=\"text-sm text-gray-600 dark:text-gray-300 mb-3\">\n                支持任意的自定义内容和样式组合\n              </p>\n              <div class=\"flex justify-end\">\n                <button\n                  class=\"px-3 py-1.5 text-sm border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md\">操作按钮</button>\n              </div>\n            </div>\n          </div>\n        </Popover>\n      </div>\n    </section>\n\n    <!-- 交互行为 -->\n    <section class=\"space-y-4\">\n      <div class=\"mb-6\">\n        <h2 class=\"text-xl font-bold mb-1\">交互行为</h2>\n        <p class=\"text-gray-500 dark:text-gray-400 text-sm\">展示不同的交互方式和控制选项</p>\n      </div>\n      <div class=\"flex flex-wrap gap-6\">\n        <Popover :showDelay=\"500\" :hideDelay=\"500\" arrow>\n          <template #reference>\n            <button class=\"px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md\">延迟显示</button>\n          </template>\n          显示和隐藏有 500ms 延迟\n        </Popover>\n\n        <Popover trigger=\"click\" :closeOnContentClick=\"true\" arrow>\n          <template #reference>\n            <button\n              class=\"px-4 py-2 border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md\">点击内容关闭</button>\n          </template>\n          点击此处会关闭 Popover\n        </Popover>\n\n        <Popover trigger=\"click\" persistent arrow>\n          <template #reference>\n            <button\n              class=\"px-4 py-2 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-md\">持久显示</button>\n          </template>\n          <div class=\"w-56 space-y-3\">\n            <p class=\"text-sm\">此 Popover 不会因点击外部而关闭</p>\n            <div class=\"flex justify-end\">\n              <button @click=\"closePopover\"\n                class=\"px-3 py-1.5 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded-md\">\n                关闭\n              </button>\n            </div>\n          </div>\n        </Popover>\n      </div>\n    </section>\n\n    <!-- API 文档部分 -->\n    <section class=\"mb-10\">\n      <h2 class=\"mb-4 text-xl font-semibold text-gray-900 dark:text-white\">组件API</h2>\n      <div class=\"rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800\">\n        <h3 class=\"mb-4 text-lg font-medium text-gray-900 dark:text-white\">属性 (Props)</h3>\n        <div class=\"mb-6 overflow-x-auto\">\n          <table class=\"min-w-full border-collapse\">\n            <thead>\n              <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">属性名</th>\n                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">类型</th>\n                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">默认值</th>\n                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">描述</th>\n              </tr>\n            </thead>\n            <tbody class=\"divide-y divide-gray-200 dark:divide-gray-700\">\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">placement</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">PlacementType</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">'bottom'</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">\n                  弹出位置，可选值：top/top-start/top-end/bottom/bottom-start/bottom-end/left/left-start/left-end/right/right-start/right-end\n                </td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">trigger</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">'hover' | 'click'</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">'hover'</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">触发方式</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">offset</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">number</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">8</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">弹出框偏移距离</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">arrow</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">boolean</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">false</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">是否显示箭头</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">customClass</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">string</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">''</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">自定义弹出框 class</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">contentClass</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">string</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">''</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">自定义内容区域 class</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">closeOnContentClick</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">boolean</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">false</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">点击内容区域是否关闭</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">showDelay</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">number</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">0</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">显示延迟时间(ms)</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">hideDelay</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">number</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">300</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">隐藏延迟时间(ms)</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">persistent</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">boolean</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">false</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">是否保持显示状态</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">backgroundColor</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">string</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">'rgba(255, 255, 255, 0.9)'</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">自定义背景色（亮色模式）</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">darkBackgroundColor</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">string</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">'rgba(39, 39, 42, 0.9)'</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">自定义背景色（暗色模式）</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">theme</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">ColorType</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">undefined</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">主题颜色</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">variant</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">'solid' | 'light' | 'glass'</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">'solid'</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">主题变体样式</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        <h3 class=\"mb-4 text-lg font-medium text-gray-900 dark:text-white\">事件 (Events)</h3>\n        <div class=\"mb-6 overflow-x-auto\">\n          <table class=\"min-w-full border-collapse\">\n            <thead>\n              <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">事件名</th>\n                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">参数</th>\n                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">描述</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">show</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">-</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">弹出框显示时触发</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">hide</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">-</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">弹出框隐藏时触发</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        <h3 class=\"mb-4 text-lg font-medium text-gray-900 dark:text-white\">插槽 (Slots)</h3>\n        <div class=\"overflow-x-auto\">\n          <table class=\"min-w-full border-collapse\">\n            <thead>\n              <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">插槽名</th>\n                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">描述</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">reference</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">触发元素</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">default</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">弹出框内容</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </section>\n\n    <!-- 总结与最佳实践 -->\n    <section class=\"mb-10\">\n      <h2 class=\"mb-4 text-xl font-semibold text-gray-900 dark:text-white\">小结与最佳实践</h2>\n      <div class=\"rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800\">\n        <div class=\"space-y-4\">\n          <p class=\"text-gray-700 dark:text-gray-300\">\n            Popover 组件是一个灵活、轻量的弹出框组件，适用于展示提示信息、下拉菜单、额外内容等场景。\n            它提供了丰富的配置选项，支持多种触发方式和位置，能满足各种交互需求。\n          </p>\n\n          <ul class=\"ml-6 list-disc space-y-2 text-gray-700 dark:text-gray-300\">\n            <li>根据交互需求选择合适的触发方式，如信息提示使用<code>hover</code>，菜单或操作面板使用<code>click</code></li>\n            <li>根据UI布局和内容设置合适的弹出位置，使用<code>placement</code>属性</li>\n            <li>对于重要提示内容，建议添加箭头(<code>arrow: true</code>)增强视觉引导</li>\n            <li>根据内容重要性设置适当的显示和隐藏延迟，避免频繁闪烁</li>\n            <li>对于需要用户交互的内容，使用<code>persistent: true</code>保持弹出框显示</li>\n            <li>利用主题和变体属性与整体UI风格保持一致</li>\n            <li>根据内容类型选择合适的变体，信息提示使用<code>solid</code>，辅助内容使用<code>light</code>或<code>glass</code></li>\n          </ul>\n\n          <div class=\"rounded-lg border border-blue-100 bg-blue-50 p-4 dark:border-blue-900 dark:bg-blue-900/20\">\n            <h4 class=\"mb-2 flex items-center text-blue-800 dark:text-blue-300\">\n              <span class=\"icon-[material-symbols--info-outline-rounded] mr-2 h-5 w-5\"></span>\n              暗色模式提示\n            </h4>\n            <p class=\"text-sm text-blue-700 dark:text-blue-300\">\n              Popover 组件已内置支持暗色模式，会根据<code\n                class=\"rounded bg-blue-100 px-1 py-0.5 font-mono dark:bg-blue-800/60\">.dark</code>类自动切换样式。\n              您可以通过<code>darkBackgroundColor</code>属性自定义暗色模式下的背景色，或通过<code>customClass</code>添加Tailwind的暗色模式类。\n              使用<code>theme</code>属性时，组件会自动处理亮色和暗色模式的颜色差异。\n            </p>\n          </div>\n\n          <p class=\"text-gray-700 dark:text-gray-300\">\n            在设计系统中，Popover 组件是构建二级交互和信息补充的重要元素。合理使用可以减少页面复杂度，\n            提供更清晰的信息层次，让用户可以按需获取详细内容，从而提升整体用户体验。\n          </p>\n        </div>\n      </div>\n    </section>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport Popover from './Popover';\nimport { PlacementType } from './config';\n\n// 处理持久化 Popover 的关闭\nconst closePopover = (event: MouseEvent) => {\n  const target = event.target as HTMLElement;\n  const popover = target.closest('[role=\"tooltip\"]');\n  if (popover) {\n    const container = popover.parentElement;\n    if (container) {\n      // 触发过渡动画并移除元素\n      container.style.opacity = '0';\n      container.style.transform = 'scale(0.95)';\n      setTimeout(() => container.remove(), 200);\n    }\n  }\n};\n</script>\n\n<script lang=\"ts\">\nexport default {\n  name: 'PopoverView'\n};\n</script>\n"],"names":["colorMap","usePopover","props","emit","containerRef","ref","triggerRef","popoverRef","isVisible","_","useToggle","triggerBounds","useElementBounding","popoverBounds","isHovered","useElementHover","startShowTimer","stopShowTimer","useTimeoutFn","startHideTimer","stopHideTimer","show","hide","onClickOutside","whenever","value","useEventListener","event","nextTick","tryOnUnmounted","getArrowPositionClass","computed","baseClasses","positions","direction","_a","getAnimationClass","viewportWidth","viewportHeight","popoverStyle","style","triggerWidth","triggerHeight","popoverWidth","popoverHeight","offset","mainPlacement","alignment","_b","popoverRect","containerRect","safeMargin","key","defineComponent","name","placement","type","String","default","Number","delay","trigger","arrow","Boolean","customClass","contentClass","closeOnContentClick","showDelay","hideDelay","persistent","backgroundColor","darkBackgroundColor","theme","undefined","variant","emits","setup","slots","isDarkMode","window","document","documentElement","classList","contains","backgroundStyle","backdropFilter","mergedPopoverStyle","arrowElement","querySelector","getThemeStyles","colors","solid","dark","color","borderColor","light","glass","getArrowStyles","_createVNode","reference","Transition","filter","join","__default__","closePopover","popover","container"],"mappings":"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"}