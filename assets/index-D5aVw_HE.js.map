{"version":3,"file":"index-D5aVw_HE.js","sources":["../../src/libs/ColorInput/colorUtils.ts","../../src/libs/ColorInput/constant.ts","../../src/libs/ColorInput/ColorInput.tsx","../../src/libs/ColorInput/View.vue"],"sourcesContent":["export type ColorFormat = \"hex\" | \"rgb\" | \"0x\" | \"rgba\";\n\nexport interface ColorUtilsOptions {\n  /** 输出的颜色格式 */\n  outputFormat: ColorFormat;\n  /** 是否包含 alpha 通道 */\n  includeAlpha?: boolean;\n}\n\n// Improve hexToRgb function with better validation\nexport function hexToRgb(hex: string): [number, number, number] {\n  try {\n    // Remove 0x or # prefix and convert to lowercase\n    hex = hex.toLowerCase().replace(/^(0x|#)/, \"\");\n\n    // Handle shorthand hex format (e.g., #fff)\n    if (hex.length === 3) {\n      hex = hex\n        .split(\"\")\n        .map((char) => char + char)\n        .join(\"\");\n    }\n\n    // Ensure valid hex length\n    if (hex.length !== 6) {\n      throw new Error(\"Invalid hex color length\");\n    }\n\n    // Validate hex characters\n    if (!/^[0-9a-f]{6}$/.test(hex)) {\n      throw new Error(\"Invalid hex color characters\");\n    }\n\n    const r = parseInt(hex.slice(0, 2), 16);\n    const g = parseInt(hex.slice(2, 4), 16);\n    const b = parseInt(hex.slice(4, 6), 16);\n\n    // Validate RGB values are within bounds\n    if ([r, g, b].some((v) => isNaN(v) || v < 0 || v > 255)) {\n      throw new Error(\"Invalid RGB values\");\n    }\n\n    return [r, g, b];\n  } catch (e) {\n    console.warn(\"Error in hexToRgb:\", e);\n    throw e;\n  }\n}\n\n// 将RGB转换为十六进制\nexport function rgbToHex(r: number, g: number, b: number): string {\n  return \"#\" + [r, g, b].map((x) => x.toString(16).padStart(2, \"0\")).join(\"\");\n}\n\n// 修改 isValidColor 函数，使其更宽容\nexport function isValidColor(color: string): boolean {\n  if (!color || typeof color !== \"string\") return false;\n\n  try {\n    const normalized = formatColor(color, { outputFormat: \"hex\" });\n    return normalized !== \"#000000\" || color.toLowerCase().endsWith(\"000000\");\n  } catch (e) {\n    return false;\n  }\n}\n\n// 添加颜色格式规范化函数\nexport function normalizeColor(color: string): string {\n  console.log(\"normalizeColor\", color);\n  const trimmed = color.trim().toLowerCase();\n\n  // 处理 rgb 格式\n  if (trimmed.startsWith(\"rgb\")) {\n    const match = trimmed.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n    if (match) {\n      const [r, g, b] = match.slice(1).map(Number);\n      return rgbToHex(r, g, b);\n    }\n  }\n\n  // 处理 0x 格式\n  if (trimmed.startsWith(\"0x\")) {\n    return \"#\" + trimmed.slice(2);\n  }\n\n  // 处理 hex 格式或纯数字格式\n  if (trimmed.startsWith(\"#\") || /^[0-9a-f]{6}$/.test(trimmed)) {\n    return trimmed.startsWith(\"#\") ? trimmed : \"#\" + trimmed;\n  }\n\n  throw new Error(\"Unsupported color format\");\n}\n\n// 更新 formatColor 函数\nexport function formatColor(color: string, options: ColorUtilsOptions): string {\n  try {\n    let rgb: [number, number, number];\n\n    // 处理空值情况\n    if (!color) {\n      return options.outputFormat === \"0x\" ? \"0x000000\" : \"#000000\";\n    }\n\n    // 标准化输入颜色\n    color = color.trim().toLowerCase();\n\n    // 处理各种输入格式\n    if (color.startsWith(\"0x\")) {\n      // 处理 0x 格式\n      const hex = color.slice(2);\n      if (!/^[0-9a-f]{6}$/i.test(hex)) {\n        const fixedHex = hex.replace(/[^0-9a-f]/gi, \"0\").padEnd(6, \"0\");\n        rgb = [\n          parseInt(fixedHex.slice(0, 2), 16),\n          parseInt(fixedHex.slice(2, 4), 16),\n          parseInt(fixedHex.slice(4, 6), 16),\n        ];\n      } else {\n        rgb = [\n          parseInt(hex.slice(0, 2), 16),\n          parseInt(hex.slice(2, 4), 16),\n          parseInt(hex.slice(4, 6), 16),\n        ];\n      }\n    } else if (color.startsWith(\"#\")) {\n      rgb = hexToRgb(color);\n    } else if (color.startsWith(\"rgb\")) {\n      const match = color.match(\n        /^rgb\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$/,\n      );\n      if (!match) {\n        throw new Error(\"Invalid rgb format\");\n      }\n      rgb = match.slice(1).map((n) => parseInt(n)) as [number, number, number];\n    } else {\n      // 尝试作为纯十六进制处理\n      rgb = hexToRgb(\"#\" + color);\n    }\n\n    // 规范化 RGB 值\n    rgb = rgb.map((v) => Math.min(255, Math.max(0, Math.round(v)))) as [\n      number,\n      number,\n      number,\n    ];\n\n    // 转换为目标格式\n    switch (options.outputFormat) {\n      case \"hex\":\n        return rgbToHex(...rgb);\n      case \"0x\":\n        return \"0x\" + rgbToHex(...rgb).slice(1);\n      case \"rgb\":\n        return `rgb(${rgb.join(\", \")})`;\n      case \"rgba\":\n        return `rgba(${rgb.join(\", \")}, 1)`;\n      default:\n        return rgbToHex(...rgb);\n    }\n  } catch (e) {\n    console.warn(\"Color format error:\", e, \"| Input color:\", color);\n    return options.outputFormat === \"0x\" ? \"0x000000\" : \"#000000\";\n  }\n}\n","export type ColorType = \n  | 'slate' | 'gray' | 'zinc' | 'neutral' | 'stone'  // 灰色系\n  | 'red' | 'orange' | 'amber' | 'yellow'            // 暖色系\n  | 'lime' | 'green' | 'emerald' | 'teal'            // 绿色系\n  | 'cyan' | 'sky' | 'blue' | 'indigo'               // 蓝色系\n  | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose'; // 紫粉色系\n\n// 默认颜色列表 - 改为普通数组以允许修改\nexport const DEFAULT_COLORS = [\n  \"#f44336\",\n  \"#e91e63\",\n  \"#9c27b0\",\n  \"#673ab7\",\n  \"#3f51b5\",\n  \"#2196f3\",\n  \"#03a9f4\",\n  \"#00bcd4\",\n  \"#009688\",\n  \"#4caf50\",\n  \"#8bc34a\",\n  \"#cddc39\",\n  \"#ffeb3b\",\n  \"#ffc107\",\n  \"#ff9800\",\n  \"#ff5722\",\n  \"#795548\",\n  \"#9e9e9e\",\n  \"#607d8b\",\n  \"#000000\",\n  \"#ffffff\",\n  \"#f1f1f1\",\n  \"#333333\",\n  \"#666666\",\n] as string[];\n\n// 颜色强度选项\nexport const COLOR_INTENSITIES = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900] as const;\nexport type ColorIntensity = typeof COLOR_INTENSITIES[number];\n\n// 主题色映射表 - 基于 Tailwind CSS 颜色\nexport const THEME_COLOR_MAP: Record<ColorType, Record<ColorIntensity, string>> = {\n  slate: {\n    50: '#f8fafc',\n    100: '#f1f5f9',\n    200: '#e2e8f0',\n    300: '#cbd5e1',\n    400: '#94a3b8',\n    500: '#64748b',\n    600: '#475569',\n    700: '#334155',\n    800: '#1e293b',\n    900: '#0f172a'\n  },\n  gray: {\n    50: '#f9fafb',\n    100: '#f3f4f6',\n    200: '#e5e7eb',\n    300: '#d1d5db',\n    400: '#9ca3af',\n    500: '#6b7280',\n    600: '#4b5563',\n    700: '#374151',\n    800: '#1f2937',\n    900: '#111827'\n  },\n  zinc: {\n    50: '#fafafa',\n    100: '#f4f4f5',\n    200: '#e4e4e7',\n    300: '#d4d4d8',\n    400: '#a1a1aa',\n    500: '#71717a',\n    600: '#52525b',\n    700: '#3f3f46',\n    800: '#27272a',\n    900: '#18181b'\n  },\n  neutral: {\n    50: '#fafafa',\n    100: '#f5f5f5',\n    200: '#e5e5e5',\n    300: '#d4d4d4',\n    400: '#a3a3a3',\n    500: '#737373',\n    600: '#525252',\n    700: '#404040',\n    800: '#262626',\n    900: '#171717'\n  },\n  stone: {\n    50: '#fafaf9',\n    100: '#f5f5f4',\n    200: '#e7e5e4',\n    300: '#d6d3d1',\n    400: '#a8a29e',\n    500: '#78716c',\n    600: '#57534e',\n    700: '#44403c',\n    800: '#292524',\n    900: '#1c1917'\n  },\n  red: {\n    50: '#fef2f2',\n    100: '#fee2e2',\n    200: '#fecaca',\n    300: '#fca5a5',\n    400: '#f87171',\n    500: '#ef4444',\n    600: '#dc2626',\n    700: '#b91c1c',\n    800: '#991b1b',\n    900: '#7f1d1d'\n  },\n  orange: {\n    50: '#fff7ed',\n    100: '#ffedd5',\n    200: '#fed7aa',\n    300: '#fdba74',\n    400: '#fb923c',\n    500: '#f97316',\n    600: '#ea580c',\n    700: '#c2410c',\n    800: '#9a3412',\n    900: '#7c2d12'\n  },\n  amber: {\n    50: '#fffbeb',\n    100: '#fef3c7',\n    200: '#fde68a',\n    300: '#fcd34d',\n    400: '#fbbf24',\n    500: '#f59e0b',\n    600: '#d97706',\n    700: '#b45309',\n    800: '#92400e',\n    900: '#78350f'\n  },\n  yellow: {\n    50: '#fefce8',\n    100: '#fef9c3',\n    200: '#fef08a',\n    300: '#fde047',\n    400: '#facc15',\n    500: '#eab308',\n    600: '#ca8a04',\n    700: '#a16207',\n    800: '#854d0e',\n    900: '#713f12'\n  },\n  lime: {\n    50: '#f7fee7',\n    100: '#ecfccb',\n    200: '#d9f99d',\n    300: '#bef264',\n    400: '#a3e635',\n    500: '#84cc16',\n    600: '#65a30d',\n    700: '#4d7c0f',\n    800: '#3f6212',\n    900: '#365314'\n  },\n  green: {\n    50: '#f0fdf4',\n    100: '#dcfce7',\n    200: '#bbf7d0',\n    300: '#86efac',\n    400: '#4ade80',\n    500: '#22c55e',\n    600: '#16a34a',\n    700: '#15803d',\n    800: '#166534',\n    900: '#14532d'\n  },\n  emerald: {\n    50: '#ecfdf5',\n    100: '#d1fae5',\n    200: '#a7f3d0',\n    300: '#6ee7b7',\n    400: '#34d399',\n    500: '#10b981',\n    600: '#059669',\n    700: '#047857',\n    800: '#065f46',\n    900: '#064e3b'\n  },\n  teal: {\n    50: '#f0fdfa',\n    100: '#ccfbf1',\n    200: '#99f6e4',\n    300: '#5eead4',\n    400: '#2dd4bf',\n    500: '#14b8a6',\n    600: '#0d9488',\n    700: '#0f766e',\n    800: '#115e59',\n    900: '#134e4a'\n  },\n  cyan: {\n    50: '#ecfeff',\n    100: '#cffafe',\n    200: '#a5f3fc',\n    300: '#67e8f9',\n    400: '#22d3ee',\n    500: '#06b6d4',\n    600: '#0891b2',\n    700: '#0e7490',\n    800: '#155e75',\n    900: '#164e63'\n  },\n  sky: {\n    50: '#f0f9ff',\n    100: '#e0f2fe',\n    200: '#bae6fd',\n    300: '#7dd3fc',\n    400: '#38bdf8',\n    500: '#0ea5e9',\n    600: '#0284c7',\n    700: '#0369a1',\n    800: '#075985',\n    900: '#0c4a6e'\n  },\n  blue: {\n    50: '#eff6ff',\n    100: '#dbeafe',\n    200: '#bfdbfe',\n    300: '#93c5fd',\n    400: '#60a5fa',\n    500: '#3b82f6',\n    600: '#2563eb',\n    700: '#1d4ed8',\n    800: '#1e40af',\n    900: '#1e3a8a'\n  },\n  indigo: {\n    50: '#eef2ff',\n    100: '#e0e7ff',\n    200: '#c7d2fe',\n    300: '#a5b4fc',\n    400: '#818cf8',\n    500: '#6366f1',\n    600: '#4f46e5',\n    700: '#4338ca',\n    800: '#3730a3',\n    900: '#312e81'\n  },\n  violet: {\n    50: '#f5f3ff',\n    100: '#ede9fe',\n    200: '#ddd6fe',\n    300: '#c4b5fd',\n    400: '#a78bfa',\n    500: '#8b5cf6',\n    600: '#7c3aed',\n    700: '#6d28d9',\n    800: '#5b21b6',\n    900: '#4c1d95'\n  },\n  purple: {\n    50: '#faf5ff',\n    100: '#f3e8ff',\n    200: '#e9d5ff',\n    300: '#d8b4fe',\n    400: '#c084fc',\n    500: '#a855f7',\n    600: '#9333ea',\n    700: '#7e22ce',\n    800: '#6b21a8',\n    900: '#581c87'\n  },\n  fuchsia: {\n    50: '#fdf4ff',\n    100: '#fae8ff',\n    200: '#f5d0fe',\n    300: '#f0abfc',\n    400: '#e879f9',\n    500: '#d946ef',\n    600: '#c026d3',\n    700: '#a21caf',\n    800: '#86198f',\n    900: '#701a75'\n  },\n  pink: {\n    50: '#fdf2f8',\n    100: '#fce7f3',\n    200: '#fbcfe8',\n    300: '#f9a8d4',\n    400: '#f472b6',\n    500: '#ec4899',\n    600: '#db2777',\n    700: '#be185d',\n    800: '#9d174d',\n    900: '#831843'\n  },\n  rose: {\n    50: '#fff1f2',\n    100: '#ffe4e6',\n    200: '#fecdd3',\n    300: '#fda4af',\n    400: '#fb7185',\n    500: '#f43f5e',\n    600: '#e11d48',\n    700: '#be123c',\n    800: '#9f1239',\n    900: '#881337'\n  }\n};\n\n// 默认强度\nexport const DEFAULT_INTENSITY = 500;\n\n// 生成默认主题色调色板\nexport function generateThemePalette(colors: ColorType[] = ['blue', 'red', 'green', 'yellow', 'purple', 'gray']): string[] {\n  return colors.map(color => THEME_COLOR_MAP[color][DEFAULT_INTENSITY]);\n}\n","import { computed, defineComponent, PropType, ref, nextTick, watch } from \"vue\";\nimport { onClickOutside, useEventListener } from \"@vueuse/core\";\nimport { formatColor, isValidColor as validateColor } from \"./colorUtils\";\nimport {\n  DEFAULT_COLORS,\n  COLOR_INTENSITIES,\n  THEME_COLOR_MAP,\n  ColorIntensity,\n  DEFAULT_INTENSITY,\n  ColorType\n} from './constant';\n\n// 修改颜色验证函数以支持 0x 格式\nexport const isValidHexColor = (color: string | null): boolean => {\n  if (!color) return false;\n  // 支持 # 和 0x 开头的颜色\n  return /^(#|0x)[0-9A-Fa-f]{6}$/.test(color);\n};\n\nexport interface ColorOptions {\n  outputFormat: \"hex\" | \"0x\";\n}\n\nexport interface ColorInputProps {\n  modelValue?: string;\n  position?: \"top\" | \"bottom\";\n  colors?: string[];\n  allowCustom?: boolean;\n  colorOptions?: ColorOptions;\n  color?: ColorType;\n  selectedIntensity?: ColorIntensity;\n}\n\nexport const ColorInput = defineComponent({\n  name: \"ColorInput\",\n  props: {\n    modelValue: {\n      type: String,\n      default: \"#000000\",\n    },\n    position: {\n      type: String as PropType<\"top\" | \"bottom\">,\n      default: \"bottom\",\n    },\n    colors: {\n      type: Array as PropType<string[]>,\n      default: null,\n    },\n    allowCustom: {\n      type: Boolean,\n      default: true,\n    },\n    colorOptions: {\n      type: Object as PropType<ColorOptions>,\n      default: () => ({ outputFormat: \"hex\" }),\n    },\n    color: {\n      type: String as PropType<ColorType>,\n      default: 'blue'\n    },\n    selectedIntensity: {\n      type: Number as PropType<ColorIntensity>,\n      default: DEFAULT_INTENSITY,\n    },\n  },\n  emits: [\"update:modelValue\", \"change\"],\n  setup(props, { emit }) {\n    const colorPickerRef = ref<HTMLElement | null>(null);\n    const showPalette = ref(false);\n    const currentCustomColor = ref(\"\");\n    const focusedIndex = ref(-1);\n    const colorBlockRefs = ref<Array<HTMLElement | null>>([]);\n    const currentIntensity = ref<ColorIntensity>(props.selectedIntensity);\n    const selectedColorType = ref<ColorType>(props.color);\n\n    // 监听颜色类型变化\n    watch(() => props.color, (newColor) => {\n      selectedColorType.value = newColor;\n      if (showPalette.value) {\n        updateSelectedColor();\n      }\n    });\n\n    // 监听颜色强度变化\n    watch(() => props.selectedIntensity, (newVal) => {\n      currentIntensity.value = newVal;\n      if (showPalette.value) {\n        updateSelectedColor();\n      }\n    });\n\n    // 更新选中的颜色\n    const updateSelectedColor = () => {\n      if (selectedColorType.value) {\n        const colorValue = THEME_COLOR_MAP[selectedColorType.value][currentIntensity.value];\n        selectColor(colorValue);\n      }\n    };\n\n    // Click outside handling\n    onClickOutside(colorPickerRef, () => {\n      showPalette.value = false;\n    });\n\n    // Key event handling\n    useEventListener(\"keydown\", (e: KeyboardEvent) => {\n      if (e.key === \"Escape\" && showPalette.value) {\n        showPalette.value = false;\n      }\n    });\n\n    // Color utilities\n    const formatColorForDisplay = (color: string): string => {\n      try {\n        return formatColor(color, { outputFormat: \"hex\" });\n      } catch (e) {\n        return \"#000000\";\n      }\n    };\n\n    const normalizeColorForComparison = (color: string): string => {\n      try {\n        return formatColor(color, props.colorOptions);\n      } catch (e) {\n        return props.colorOptions.outputFormat === \"0x\"\n          ? \"0x000000\"\n          : \"#000000\";\n      }\n    };\n\n    // 主题色选择\n    const handleThemeColorSelect = (colorType: ColorType) => {\n      selectedColorType.value = colorType;\n      const colorValue = THEME_COLOR_MAP[colorType][currentIntensity.value];\n      selectColor(colorValue);\n    };\n\n    // 检查颜色类型是否被选中\n    const isColorTypeSelected = (colorType: ColorType): boolean => {\n      return selectedColorType.value === colorType;\n    };\n\n    // 从当前颜色值猜测颜色类型和强度\n    const guessColorTypeAndIntensity = () => {\n      if (!props.modelValue) return;\n\n      const normalizedColor = formatColorForDisplay(props.modelValue).toLowerCase();\n\n      // 遍历所有主题色和强度\n      for (const colorType of Object.keys(THEME_COLOR_MAP) as ColorType[]) {\n        for (const intensity of COLOR_INTENSITIES) {\n          if (THEME_COLOR_MAP[colorType][intensity].toLowerCase() === normalizedColor) {\n            selectedColorType.value = colorType;\n            currentIntensity.value = intensity;\n            return;\n          }\n        }\n      }\n    };\n\n    // Computed properties\n    const displayColor = computed(() =>\n      formatColorForDisplay(props.modelValue || \"#000000\"),\n    );\n    const isValidColor = computed(() =>\n      validateColor(currentCustomColor.value),\n    );\n    const colorList = computed(() => {\n      // 使用自定义颜色列表或默认列表\n      const baseColors = props.colors || DEFAULT_COLORS;\n\n      return baseColors.map((color) => {\n        try {\n          if (\n            props.colorOptions.outputFormat === \"0x\" &&\n            color.startsWith(\"0x\")\n          ) {\n            return color;\n          }\n          return formatColor(color, props.colorOptions);\n        } catch (e) {\n          return props.colorOptions.outputFormat === \"0x\"\n            ? \"0x000000\"\n            : \"#000000\";\n        }\n      });\n    });\n\n    // Event handlers\n    const togglePalette = () => {\n      showPalette.value = !showPalette.value;\n      if (showPalette.value) {\n        guessColorTypeAndIntensity();\n      }\n    };\n\n    const handleKeyDown = (event: KeyboardEvent, index: number) => {\n      const cols = 8;\n      const total = colorList.value.length;\n      let newIndex = index;\n\n      switch (event.key) {\n        case \"ArrowRight\":\n          event.preventDefault();\n          newIndex = index + 1;\n          break;\n        case \"ArrowLeft\":\n          event.preventDefault();\n          newIndex = index - 1;\n          break;\n        case \"ArrowUp\":\n          event.preventDefault();\n          newIndex = index - cols;\n          break;\n        case \"ArrowDown\":\n          event.preventDefault();\n          newIndex = index + cols;\n          break;\n        case \"Enter\":\n        case \" \":\n          event.preventDefault();\n          selectColor(colorList.value[index]);\n          return;\n        case \"Home\":\n          event.preventDefault();\n          newIndex = 0;\n          break;\n        case \"End\":\n          event.preventDefault();\n          newIndex = total - 1;\n          break;\n        default:\n          return;\n      }\n\n      newIndex = ((newIndex % total) + total) % total;\n      focusedIndex.value = newIndex;\n      nextTick(() => {\n        colorBlockRefs.value[newIndex]?.focus();\n      });\n    };\n\n    const selectColor = (color: string) => {\n      if (!color) return;\n      try {\n        const formattedColor = formatColor(color, props.colorOptions);\n        emit(\"update:modelValue\", formattedColor);\n        emit(\"change\", formattedColor);\n        currentCustomColor.value = formattedColor;\n        showPalette.value = false;\n      } catch (e) {\n        console.error(\"Error selecting color:\", e);\n      }\n    };\n\n    const applyCustomColor = () => {\n      if (!props.allowCustom) return;\n      if (validateColor(currentCustomColor.value)) {\n        const formattedColor = formatColor(\n          currentCustomColor.value,\n          props.colorOptions,\n        );\n        emit(\"update:modelValue\", formattedColor);\n        emit(\"change\", formattedColor);\n        showPalette.value = false;\n        currentCustomColor.value = \"\";\n      }\n    };\n\n    // 渲染颜色块\n    const renderColorBlock = (color: string, index: number) => {\n      const isSelected =\n        normalizeColorForComparison(color) ===\n        normalizeColorForComparison(props.modelValue);\n      const isFocused = focusedIndex.value === index;\n\n      return (\n        <div key={index} class=\"group relative\">\n          <div\n            ref={(el) => (colorBlockRefs.value[index] = el as HTMLElement)}\n            class={[\n              \"relative h-8 w-8 cursor-pointer rounded-lg ring-2 transition-all duration-200\",\n              isSelected && !isFocused\n                ? \"ring-blue-400 ring-offset-2 hover:ring-blue-500 dark:ring-blue-500 dark:hover:ring-blue-400\"\n                : \"ring-transparent\",\n              isFocused\n                ? [\n                  \"z-10 scale-125 shadow-lg ring-offset-2\",\n                  \"ring-indigo-500 dark:ring-indigo-400\",\n                  \"after:absolute after:inset-0 after:rounded-lg after:ring-2 after:ring-white/50 dark:after:ring-gray-800/50\",\n                  \"before:absolute before:-inset-1 before:rounded-xl before:bg-indigo-500/20 dark:before:bg-indigo-400/20\",\n                ]\n                : \"\",\n              \"hover:scale-110 hover:ring-blue-400 hover:ring-offset-2 dark:hover:ring-blue-400\",\n              \"focus:outline-none\",\n            ]}\n            style={{ backgroundColor: formatColorForDisplay(color) }}\n            onClick={() => selectColor(color)}\n            onKeydown={(e) => handleKeyDown(e, index)}\n            onBlur={() =>\n              focusedIndex.value === index && (focusedIndex.value = -1)\n            }\n            tabindex={0}\n            role=\"gridcell\"\n            aria-label={`选择颜色: ${color}`}\n            aria-selected={color === props.modelValue}\n          />\n        </div>\n      );\n    };\n\n    return () => (\n      <div class=\"relative\" ref={colorPickerRef}>\n        <div\n          class=\"color-input group relative h-12 w-12 cursor-pointer rounded-xl shadow-lg ring-2 ring-gray-200 transition-all duration-300 hover:scale-105 hover:ring-blue-400 hover:ring-offset-2 dark:ring-gray-700 dark:hover:ring-blue-500\"\n          style={{ backgroundColor: displayColor.value }}\n          onClick={togglePalette}\n        >\n          <div class=\"absolute inset-0 rounded-xl bg-black/5 transition-colors group-hover:bg-black/0 dark:bg-black/20 dark:group-hover:bg-black/10\" />\n        </div>\n\n        {showPalette.value && (\n          <div\n            class=\"absolute z-20 min-w-[320px] border border-gray-100 rounded-2xl bg-white/95 p-4 shadow-[0_10px_40px_-5px_rgba(0,0,0,0.15)] backdrop-blur-sm mt-4 transform transition-all duration-200 opacity-100 translate-y-0 dark:border-gray-700 dark:bg-gray-800/95 dark:text-gray-100\"\n            style={{\n              [props.position === \"top\" ? \"bottom\" : \"top\"]: \"100%\",\n              marginBottom: props.position === \"top\" ? \"0.5rem\" : \"0\",\n              marginTop: props.position === \"top\" ? \"0\" : \"0.5rem\",\n            }}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div class=\"mb-4 flex items-center justify-between\">\n              <span class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">选择颜色</span>\n              <div class=\"flex items-center gap-2\">\n                <span class=\"font-mono text-xs text-gray-500 dark:text-gray-400\">\n                  {props.modelValue}\n                </span>\n                <div\n                  class=\"h-8 w-8 rounded-lg shadow-inner\"\n                  style={{ backgroundColor: displayColor.value }}\n                />\n              </div>\n            </div>\n\n            {/* 预设颜色选择区 */}\n            <div class=\"mb-4 grid grid-cols-8 gap-2 rounded-xl bg-gray-50 p-2 dark:bg-gray-900\" role=\"grid\">\n              {colorList.value.map((color, index) =>\n                renderColorBlock(color, index)\n              )}\n            </div>\n\n            {/* 自定义颜色输入 */}\n            {props.allowCustom && (\n              <div class=\"flex items-center gap-3\">\n                <div class=\"relative flex-1\">\n                  <input\n                    type=\"text\"\n                    v-model={currentCustomColor.value}\n                    class=\"w-full rounded-lg border border-gray-200 bg-gray-50 px-3 py-2 font-mono text-sm text-gray-800 transition-all focus:outline-none focus:ring-2 focus:ring-blue-400 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 dark:focus:ring-blue-500\"\n                    placeholder={props.colorOptions.outputFormat === \"hex\" ? \"#ffffff\" : \"0xffffff\"}\n                    onKeydown={(e) => e.key === \"Enter\" && applyCustomColor()}\n                    onClick={(e) => e.stopPropagation()}\n                  />\n                  {isValidColor.value && (\n                    <div\n                      class=\"absolute top-1/2 right-2 h-4 w-4 -translate-y-1/2 rounded transition-all duration-200\"\n                      style={{\n                        backgroundColor: currentCustomColor.value\n                      }}\n                    />\n                  )}\n                </div>\n                <button\n                  onClick={applyCustomColor}\n                  disabled={!isValidColor.value}\n                  class=\"rounded-lg bg-blue-500 px-4 py-2 text-sm font-medium text-white transition-all whitespace-nowrap hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-700\"\n                >\n                  应用颜色\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  },\n});\n\nexport default ColorInput;\n","<template>\n  <div class=\"p-8 space-y-8 min-h-screen bg-white dark:bg-gray-900 text-gray-800 dark:text-gray-100\">\n    <h1 class=\"text-2xl font-bold\">ColorInput 颜色选择器</h1>\n\n    <!-- Basic Usage -->\n    <section>\n      <h2 class=\"text-xl font-semibold mb-4 text-gray-800 dark:text-gray-100\">基础用法</h2>\n      <div class=\"flex items-start gap-8\">\n        <div class=\"space-y-2\">\n          <ColorInput v-model=\"basicColor\" @change=\"handleColorChange\" />\n          <p class=\"text-sm text-gray-500 dark:text-gray-400\">当前颜色值: {{ basicColor }}</p>\n        </div>\n      </div>\n    </section>\n\n    <!-- Different Positions -->\n    <section>\n      <h2 class=\"text-xl font-semibold mb-4 text-gray-800 dark:text-gray-100\">不同弹出位置</h2>\n      <div class=\"flex items-start gap-8\">\n        <div class=\"space-y-2\">\n          <ColorInput v-model=\"topColor\" position=\"top\" />\n          <p class=\"text-sm text-gray-500 dark:text-gray-400\">顶部弹出</p>\n        </div>\n        <div class=\"space-y-2\">\n          <ColorInput v-model=\"bottomColor\" position=\"bottom\" />\n          <p class=\"text-sm text-gray-500 dark:text-gray-400\">底部弹出（默认）</p>\n        </div>\n      </div>\n    </section>\n\n    <!-- Theme Colors -->\n    <section>\n      <h2 class=\"text-xl font-semibold mb-4 text-gray-800 dark:text-gray-100\">主题色选择</h2>\n      <div class=\"flex items-start gap-8\">\n        <div class=\"space-y-2\">\n          <ColorInput v-model=\"themeBasedColor\" color=\"blue\" :selected-intensity=\"500\" />\n          <p class=\"text-sm text-gray-500 dark:text-gray-400\">使用主题色系统</p>\n        </div>\n        <div class=\"space-y-2\">\n          <ColorInput v-model=\"themeCustomColor\" color=\"indigo\" :selected-intensity=\"700\" />\n          <p class=\"text-sm text-gray-500 dark:text-gray-400\">自定义主题色和强度</p>\n        </div>\n      </div>\n    </section>\n\n    <!-- Dark Mode -->\n    <section class=\"p-6 rounded-xl bg-gray-100 dark:bg-gray-800 border border-gray-700\">\n      <h2 class=\"text-xl font-semibold mb-4 text-gray-800 dark:text-white\">\n        {{ isDark ? '暗色模式' : '亮色模式' }}\n      </h2>\n      <div class=\"flex items-start gap-8\">\n        <div class=\"space-y-2\">\n          <ColorInput v-model=\"darkModeColor\" color=\"blue\" :selected-intensity=\"500\" />\n          <p class=\"text-sm text-gray-500 dark:text-gray-400\">\n            {{ isDark ? '暗色模式基础用法' : '亮色模式基础用法' }}\n          </p>\n        </div>\n        <div class=\"space-y-2\">\n          <ColorInput v-model=\"darkThemeColor\" color=\"purple\" :selected-intensity=\"600\" />\n          <p class=\"text-sm text-gray-500 dark:text-gray-400\">\n            {{ isDark ? '暗色模式 + 主题色' : '亮色模式 + 主题色' }}\n          </p>\n        </div>\n      </div>\n    </section>\n\n    <!-- Custom Colors -->\n    <section>\n      <h2 class=\"text-xl font-semibold mb-4 text-gray-800 dark:text-gray-100\">自定义颜色列表</h2>\n      <div class=\"flex items-start gap-8\">\n        <div class=\"space-y-2\">\n          <ColorInput v-model=\"customListColor\" :colors=\"customColors\" />\n          <p class=\"text-sm text-gray-500 dark:text-gray-400\">使用自定义颜色列表</p>\n        </div>\n      </div>\n    </section>\n\n    <!-- Different Output Formats -->\n    <section>\n      <h2 class=\"text-xl font-semibold mb-4 text-gray-800 dark:text-gray-100\">不同输出格式</h2>\n      <div class=\"flex items-start gap-8\">\n        <div class=\"space-y-2\">\n          <ColorInput v-model=\"hexColor\" :color-options=\"{ outputFormat: 'hex' }\" />\n          <p class=\"text-sm text-gray-500 dark:text-gray-400\">HEX 格式: {{ hexColor }}</p>\n        </div>\n        <div class=\"space-y-2\">\n          <ColorInput v-model=\"oxColor\" :color-options=\"{ outputFormat: '0x' }\" />\n          <p class=\"text-sm text-gray-500 dark:text-gray-400\">0x 格式: {{ oxColor }}</p>\n        </div>\n      </div>\n    </section>\n\n    <!-- Disabled Custom Input -->\n    <section>\n      <h2 class=\"text-xl font-semibold mb-4 text-gray-800 dark:text-gray-100\">禁用自定义输入</h2>\n      <div class=\"flex items-start gap-8\">\n        <div class=\"space-y-2\">\n          <ColorInput v-model=\"noCustomColor\" :allow-custom=\"false\" />\n          <p class=\"text-sm text-gray-500 dark:text-gray-400\">仅允许从预设颜色中选择</p>\n        </div>\n      </div>\n    </section>\n\n    <!-- Integration Example -->\n    <section>\n      <h2 class=\"text-xl font-semibold mb-4 text-gray-800 dark:text-gray-100\">实际应用示例</h2>\n      <div class=\"flex items-start gap-8\">\n        <div class=\"space-y-4\">\n          <div class=\"flex items-center gap-4\">\n            <ColorInput v-model=\"themeColor\" position=\"top\" :theme=\"true\" />\n            <div class=\"p-4 rounded-lg transition-colors\" :style=\"{ backgroundColor: themeColor }\"\n              :class=\"isDark ? 'border border-gray-700' : ''\">\n              <p class=\"text-lg font-medium\" :style=\"{ color: getContrastColor(themeColor) }\">\n                示例文本\n              </p>\n            </div>\n          </div>\n          <p class=\"text-sm text-gray-500 dark:text-gray-400\">主题色应用示例</p>\n        </div>\n      </div>\n    </section>\n\n    <!-- API 文档部分 -->\n    <section class=\"mb-10\">\n      <h2 class=\"mb-4 text-xl font-semibold text-gray-900 dark:text-white\">组件API</h2>\n      <div class=\"rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800\">\n        <h3 class=\"mb-4 text-lg font-medium text-gray-900 dark:text-white\">属性 (Props)</h3>\n        <div class=\"mb-6 overflow-x-auto\">\n          <table class=\"min-w-full border-collapse\">\n            <thead>\n              <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">属性名</th>\n                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">类型</th>\n                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">默认值</th>\n                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">描述</th>\n              </tr>\n            </thead>\n            <tbody class=\"divide-y divide-gray-200 dark:divide-gray-700\">\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">modelValue</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">string</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">'#000000'</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">当前选中的颜色值</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">position</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">'top' | 'bottom'</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">'bottom'</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">颜色选择面板的弹出位置</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">colors</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">string[]</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">[...]</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">预设颜色列表</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">allowCustom</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">boolean</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">true</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">是否允许自定义颜色输入</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">colorOptions</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">ColorOptions</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">{ outputFormat: 'hex' }</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">颜色输出格式配置</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">color</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">ColorType</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">'blue'</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">默认的颜色类型</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">selectedIntensity</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">number</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">500</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">默认的颜色强度（50-900）</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        <h3 class=\"mb-4 text-lg font-medium text-gray-900 dark:text-white\">事件 (Events)</h3>\n        <div class=\"mb-6 overflow-x-auto\">\n          <table class=\"min-w-full border-collapse\">\n            <thead>\n              <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">事件名</th>\n                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">回调参数</th>\n                <th class=\"px-4 py-2 text-left font-medium text-gray-900 dark:text-white\">描述</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">update:modelValue</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">(color: string)</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">颜色值更新时触发</td>\n              </tr>\n              <tr>\n                <td class=\"px-4 py-2 font-medium text-gray-900 dark:text-white\">change</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">(color: string)</td>\n                <td class=\"px-4 py-2 text-gray-700 dark:text-gray-300\">颜色改变时触发</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        <h3 class=\"mt-6 mb-4 text-lg font-medium text-gray-900 dark:text-white\">类型定义</h3>\n        <div class=\"mb-4 rounded-lg bg-gray-50 p-4 dark:bg-gray-700/30\">\n          <p class=\"mb-2 text-sm text-gray-700 dark:text-gray-300\">ColorInput 组件使用以下 TypeScript 类型：</p>\n          <pre class=\"overflow-x-auto rounded bg-gray-100 p-3 text-xs text-gray-800 dark:bg-gray-800 dark:text-gray-200\">\ninterface ColorOptions {\n  outputFormat: \"hex\" | \"0x\";\n}\n\ninterface ColorInputProps {\n  modelValue?: string;\n  position?: \"top\" | \"bottom\";\n  colors?: string[];\n  allowCustom?: boolean;\n  colorOptions?: ColorOptions;\n  color?: ColorType;\n  selectedIntensity?: ColorIntensity;\n}</pre>\n        </div>\n      </div>\n    </section>\n\n    <!-- 小结与最佳实践 -->\n    <section class=\"mb-10\">\n      <h2 class=\"mb-4 text-xl font-semibold text-gray-900 dark:text-white\">小结与最佳实践</h2>\n      <div class=\"rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800\">\n        <div class=\"space-y-4\">\n          <p class=\"text-gray-700 dark:text-gray-300\">\n            ColorInput 是一个功能丰富的颜色选择器组件，支持多种颜色格式、预设颜色和主题色选择。\n            以下是一些使用建议：\n          </p>\n\n          <ul class=\"ml-6 list-disc space-y-2 text-gray-700 dark:text-gray-300\">\n            <li>使用 <code class=\"rounded bg-gray-100 px-1 py-0.5 font-mono dark:bg-gray-800/60\">colorOptions</code> \n                选择合适的颜色输出格式</li>\n            <li>提供预设颜色列表以简化用户选择</li>\n            <li>搭配主题色系统实现一致的设计风格</li>\n            <li>合理使用位置属性避免遮挡重要内容</li>\n            <li>适时禁用自定义输入以确保颜色选择的规范性</li>\n          </ul>\n\n          <div class=\"rounded-lg border border-blue-100 bg-blue-50 p-4 dark:border-blue-900 dark:bg-blue-900/20\">\n            <h4 class=\"mb-2 flex items-center text-blue-800 dark:text-blue-300\">\n              <span class=\"icon-[material-symbols--info-outline-rounded] mr-2 h-5 w-5\"></span>\n              暗色模式提示\n            </h4>\n            <p class=\"text-sm text-blue-700 dark:text-blue-300\">\n              ColorInput 组件自动适配明暗主题，确保在不同主题下提供一致的用户体验。颜色选择面板会根据主题自动调整背景色和文字颜色。\n            </p>\n          </div>\n\n          <div class=\"rounded-lg border border-amber-100 bg-amber-50 p-4 dark:border-amber-900/50 dark:bg-amber-900/20\">\n            <h4 class=\"mb-2 flex items-center text-amber-800 dark:text-amber-300\">\n              <span class=\"icon-[material-symbols--tips-and-updates-outline-rounded] mr-2 h-5 w-5\"></span>\n              键盘可访问性提示\n            </h4>\n            <p class=\"text-sm text-amber-700 dark:text-amber-300\">\n              组件支持完整的键盘导航，包括方向键选择颜色、Enter 确认、Escape 关闭面板等。\n              为提高可访问性，颜色选择器提供了清晰的焦点指示和 ARIA 属性支持。\n            </p>\n          </div>\n\n          <p class=\"text-gray-700 dark:text-gray-300\">\n            在实际应用中，ColorInput 组件可以灵活地用于主题定制、样式编辑器等场景，\n            通过合理配置提供直观的颜色选择体验。\n          </p>\n        </div>\n      </div>\n    </section>\n\n    <!-- Page Footer -->\n    <footer class=\"mt-12 pt-6 border-t border-gray-200 dark:border-gray-700 text-gray-500 dark:text-gray-400\">\n      <p class=\"text-sm\">颜色选择器组件 - 支持暗色模式和主题色系统</p>\n    </footer>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { ColorInput } from './ColorInput'\nimport { isDark } from '../../utils/theme'\n\n// Basic usage\nconst basicColor = ref('#FF5722')\nconst handleColorChange = (color: string) => {\n  console.log('Color changed:', color)\n}\n\n// Different positions\nconst topColor = ref('#2196F3')\nconst bottomColor = ref('#4CAF50')\n\n// Theme colors\nconst themeBasedColor = ref('#3B82F6')  // blue-500\nconst themeCustomColor = ref('#4338CA')  // indigo-700\n\n// Dark mode with theme colors\nconst darkModeColor = ref('#3B82F6')    // blue-500\nconst darkThemeColor = ref('#9333EA')    // purple-600\n\n// Custom colors\nconst customColors = [\n  '#FF0000', '#00FF00', '#0000FF',\n  '#FFFF00', '#FF00FF', '#00FFFF',\n  '#000000', '#FFFFFF', '#808080'\n]\nconst customListColor = ref('#FF0000')\n\n// Different output formats\nconst hexColor = ref('#9C27B0')\nconst oxColor = ref('0xFF5722')\n\n// Disabled custom input\nconst noCustomColor = ref('#E91E63')\n\n// Integration example\nconst themeColor = ref('#3B82F6')\n\n// Helper function to determine text color based on background\nconst getContrastColor = (hexColor: string): string => {\n  const color = hexColor.replace('#', '')\n  const r = parseInt(color.substr(0, 2), 16)\n  const g = parseInt(color.substr(2, 2), 16)\n  const b = parseInt(color.substr(4, 2), 16)\n  const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255\n  return luminance > 0.5 ? '#000000' : '#FFFFFF'\n}\n</script>\n\n<style scoped></style>"],"names":["hexToRgb","hex","char","r","g","b","v","e","rgbToHex","x","isValidColor","color","formatColor","options","rgb","fixedHex","match","n","DEFAULT_COLORS","COLOR_INTENSITIES","THEME_COLOR_MAP","DEFAULT_INTENSITY","ColorInput","defineComponent","name","props","modelValue","type","String","default","position","colors","Array","allowCustom","Boolean","colorOptions","Object","outputFormat","selectedIntensity","Number","emits","setup","emit","colorPickerRef","ref","showPalette","currentCustomColor","focusedIndex","colorBlockRefs","currentIntensity","selectedColorType","watch","newColor","value","updateSelectedColor","newVal","colorValue","selectColor","onClickOutside","useEventListener","key","formatColorForDisplay","normalizeColorForComparison","guessColorTypeAndIntensity","normalizedColor","toLowerCase","colorType","keys","intensity","displayColor","computed","validateColor","colorList","map","startsWith","togglePalette","handleKeyDown","event","index","total","length","newIndex","preventDefault","cols","nextTick","focus","formattedColor","console","error","applyCustomColor","renderColorBlock","isSelected","isFocused","_createVNode","el","backgroundColor","onClick","onBlur","marginBottom","marginTop","stopPropagation","_createTextVNode","_withDirectives","$event","_vModelText","basicColor","handleColorChange","topColor","bottomColor","themeBasedColor","themeCustomColor","darkModeColor","darkThemeColor","customColors","customListColor","hexColor","oxColor","noCustomColor","themeColor","getContrastColor"],"mappings":"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"}