{"version":3,"file":"index-D_t33aMp.js","sources":["../../src/libs/Watermark/Watermark.tsx"],"sourcesContent":["import { defineComponent, ref, onMounted, watch, onUnmounted, computed, PropType, nextTick } from 'vue';\n\n// 水印字体属性接口\ninterface WatermarkFont {\n    color: string;\n    fontSize: number;\n    fontWeight: 'normal' | 'light' | 'weight' | number;\n    fontFamily: string;\n    fontStyle: 'none' | 'normal' | 'italic' | 'oblique';\n}\n\n// 默认字体设置\nconst defaultFont: WatermarkFont = {\n    color: 'rgba(0, 0, 0, 0.25)', // 增加不透明度，让水印更明显\n    fontSize: 16,\n    fontWeight: 'normal',\n    fontFamily: 'sans-serif',\n    fontStyle: 'normal',\n};\n\n// 暗色模式默认字体设置\nconst darkDefaultFont: WatermarkFont = {\n    ...defaultFont,\n    color: 'rgba(255, 255, 255, 0.25)', // 增加不透明度，让暗色模式下的水印更明显\n};\n\nexport default defineComponent({\n    name: 'Watermark',\n\n    props: {\n        // 水印宽度\n        width: {\n            type: Number,\n            default: 120,\n        },\n        // 水印高度\n        height: {\n            type: Number,\n            default: 64,\n        },\n        // 旋转角度\n        rotate: {\n            type: Number,\n            default: -22,\n        },\n        // 水印层级\n        zIndex: {\n            type: Number,\n            default: 9,\n        },\n        // 水印图片\n        image: {\n            type: String,\n            default: '',\n        },\n        // 水印文字内容\n        content: {\n            type: [String, Array] as PropType<string | string[]>,\n            default: '',\n        },\n        // 字体样式\n        font: {\n            type: Object as PropType<Partial<WatermarkFont>>,\n            default: () => ({}),\n        },\n        // 暗色模式字体样式\n        darkFont: {\n            type: Object as PropType<Partial<WatermarkFont>>,\n            default: () => ({}),\n        },\n        // 水印之间的间距\n        gap: {\n            type: Array as unknown as PropType<[number, number]>,\n            default: () => [100, 100],\n        },\n        // 水印偏移量\n        offset: {\n            type: Array as unknown as PropType<[number, number]>,\n            default: undefined,\n        },\n        // 是否使用全局暗色模式 (可从外部传入)\n        isDarkMode: {\n            type: Boolean,\n            default: undefined,\n        },\n        // 是否启用防篡改监控\n        monitor: {\n            type: Boolean,\n            default: true,\n        },\n        // 水印容器类名\n        containerClassName: {\n            type: String,\n            default: '',\n        },\n        // 是否始终跟随页面滚动（fixed 定位）\n        followScroll: {\n            type: Boolean,\n            default: false,\n        },\n        // 自定义渲染透明度\n        opacity: {\n            type: Number,\n            default: 1,\n        },\n        // 是否开启动画\n        enableAnimation: {\n            type: Boolean,\n            default: false,\n        },\n        // 动画持续时间（毫秒）\n        animationDuration: {\n            type: Number,\n            default: 3000,\n        },\n    },\n\n    setup(props, { slots }) {\n        // 容器引用\n        const watermarkRef = ref<HTMLDivElement | null>(null);\n        // 水印层引用\n        const watermarkLayerRef = ref<HTMLDivElement | null>(null);\n        // 水印画布\n        const canvas = ref<HTMLCanvasElement | null>(null);\n        // 水印基准URL\n        const base64Url = ref<string>('');\n        // 安全定时器\n        const reRenderId = ref<number | null>(null);\n        // 监控防篡改的 MutationObserver\n        const observer = ref<MutationObserver | null>(null);\n\n        // 计算有效的字体设置\n        const effectiveFont = computed(() => {\n            const darkMode = props.isDarkMode !== undefined\n                ? props.isDarkMode\n                : typeof window !== 'undefined' && document.documentElement.classList.contains('dark');\n\n            const baseFont = darkMode ? darkDefaultFont : defaultFont;\n            const customFont = darkMode ? props.darkFont : props.font;\n\n            return {\n                ...baseFont,\n                ...customFont,\n            };\n        });\n\n        // 计算有效的偏移量\n        const effectiveOffset = computed<[number, number]>(() => {\n            if (props.offset) {\n                return props.offset;\n            }\n            return [props.gap[0] / 2, props.gap[1] / 2];\n        });\n\n        // 绘制水印\n        const renderWatermark = () => {\n            if (!watermarkRef.value) return;\n\n            const containerWidth = watermarkRef.value.offsetWidth;\n            const containerHeight = watermarkRef.value.offsetHeight;\n\n            if (!containerWidth || !containerHeight) {\n                // 等待容器尺寸计算完成\n                if (reRenderId.value !== null) {\n                    window.cancelAnimationFrame(reRenderId.value);\n                }\n                reRenderId.value = window.requestAnimationFrame(renderWatermark);\n                return;\n            }\n\n            // 创建或重用画布\n            const ctx = getCanvasContext();\n            if (!ctx || !canvas.value) return;\n\n            const canvasWidth = getMarkSize(props.width, props.content, effectiveFont.value);\n            const canvasHeight = getMarkSize(props.height, props.content, effectiveFont.value);\n\n            const gapX = props.gap[0];\n            const gapY = props.gap[1];\n            const offsetLeft = effectiveOffset.value[0];\n            const offsetTop = effectiveOffset.value[1];\n\n            // 设置画布尺寸\n            canvas.value.width = canvasWidth;\n            canvas.value.height = canvasHeight;\n\n            // 清空画布\n            ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n            // 设置透明度\n            ctx.globalAlpha = props.opacity;\n\n            // 旋转画布\n            if (props.rotate !== 0) {\n                ctx.translate(canvasWidth / 2, canvasHeight / 2);\n                ctx.rotate((props.rotate * Math.PI) / 180);\n                ctx.translate(-canvasWidth / 2, -canvasHeight / 2);\n            }\n\n            // 根据图片或文字内容绘制水印\n            if (props.image) {\n                renderImage(ctx, canvasWidth, canvasHeight);\n            } else if (props.content) {\n                renderText(ctx, canvasWidth, canvasHeight);\n            }\n\n            // 将画布内容转为 base64 URL\n            base64Url.value = canvas.value.toDataURL();\n\n            // 设置水印层的样式\n            if (watermarkLayerRef.value) {\n                const layerStyle = watermarkLayerRef.value.style;\n\n                layerStyle.zIndex = `${props.zIndex}`;\n                layerStyle.position = props.followScroll ? 'fixed' : 'absolute';\n                layerStyle.top = '0';\n                layerStyle.left = '0';\n                layerStyle.width = '100%';\n                layerStyle.height = '100%';\n                layerStyle.backgroundImage = `url('${base64Url.value}')`;\n                layerStyle.backgroundRepeat = 'repeat';\n                layerStyle.backgroundPosition = `${offsetLeft}px ${offsetTop}px`;\n                layerStyle.pointerEvents = 'none';\n\n                // 设置背景大小\n                const sizeX = canvasWidth + gapX;\n                const sizeY = canvasHeight + gapY;\n                layerStyle.backgroundSize = `${sizeX}px ${sizeY}px`;\n\n                // 添加动画效果（如果启用）\n                if (props.enableAnimation) {\n                    layerStyle.animation = `watermark-move ${props.animationDuration}ms linear infinite`;\n                } else {\n                    layerStyle.animation = 'none';\n                }\n            }\n\n            // 应用后开始监控防篡改\n            if (props.monitor) {\n                startMonitoring();\n            }\n        };\n\n        // 获取画布上下文\n        const getCanvasContext = () => {\n            if (!canvas.value) {\n                canvas.value = document.createElement('canvas');\n            }\n            return canvas.value.getContext('2d');\n        };\n\n        // 计算水印尺寸\n        const getMarkSize = (\n            size: number,\n            content: string | string[] | undefined,\n            font: WatermarkFont,\n        ): number => {\n            if (content && typeof content === 'string') {\n                return size;\n            }\n            return size;\n        };\n\n        // 绘制图片水印\n        const renderImage = (ctx: CanvasRenderingContext2D, width: number, height: number) => {\n            // 优先使用内联SVG作为备选，防止外部图片加载失败\n            const fallbackImage = `data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='${width}' height='${height}' viewBox='0 0 ${width} ${height}'%3E%3Ctext x='50%25' y='50%25' font-family='Arial' font-size='${Math.floor(width / 8)}' font-weight='bold' text-anchor='middle' dominant-baseline='middle' fill='%23999'%3ELOGO%3C/text%3E%3C/svg%3E`;\n\n            const img = new Image();\n            img.crossOrigin = 'anonymous';\n            img.referrerPolicy = 'no-referrer';\n            img.src = props.image;\n\n            // 添加加载超时\n            let isLoaded = false;\n            const timeout = setTimeout(() => {\n                if (!isLoaded) {\n                    console.warn('Watermark image load timeout, using fallback');\n                    loadFallbackImage();\n                }\n            }, 3000); // 3秒超时\n\n            img.onload = () => {\n                isLoaded = true;\n                clearTimeout(timeout);\n                if (!canvas.value || !ctx) return;\n\n                try {\n                    ctx.drawImage(img, 0, 0, width, height);\n                    updateWatermarkBase64();\n                } catch (error) {\n                    console.error('Failed to draw image:', error);\n                    loadFallbackImage();\n                }\n            };\n\n            img.onerror = () => {\n                isLoaded = true;\n                clearTimeout(timeout);\n                console.warn('Watermark image load error, using fallback');\n                loadFallbackImage();\n            };\n\n            // 加载备选图片\n            const loadFallbackImage = () => {\n                const fallbackImg = new Image();\n                fallbackImg.onload = () => {\n                    if (!canvas.value || !ctx) return;\n                    ctx.drawImage(fallbackImg, 0, 0, width, height);\n                    updateWatermarkBase64();\n                };\n                fallbackImg.src = fallbackImage;\n            };\n\n            // 更新水印的base64图像\n            const updateWatermarkBase64 = () => {\n                if (!canvas.value) return;\n                base64Url.value = canvas.value.toDataURL();\n                if (watermarkLayerRef.value) {\n                    watermarkLayerRef.value.style.backgroundImage = `url('${base64Url.value}')`;\n                }\n            };\n        };\n\n        // 绘制文字水印\n        const renderText = (ctx: CanvasRenderingContext2D, width: number, height: number) => {\n            if (!props.content) return;\n\n            // 设置字体样式\n            const { color, fontSize, fontFamily, fontWeight, fontStyle } = effectiveFont.value;\n            ctx.fillStyle = color;\n            ctx.font = `${fontStyle !== 'none' ? fontStyle : ''} ${fontWeight} ${fontSize}px ${fontFamily}`;\n            ctx.textAlign = 'center';\n            ctx.textBaseline = 'middle';\n\n            // 如果内容是字符串数组，则逐行绘制\n            if (Array.isArray(props.content)) {\n                const lineHeight = fontSize * 1.5;\n                const totalHeight = props.content.length * lineHeight;\n                const startY = (height - totalHeight) / 2 + lineHeight / 2;\n\n                props.content.forEach((text, index) => {\n                    ctx.fillText(text, width / 2, startY + index * lineHeight);\n                });\n            } else {\n                // 单行文本\n                ctx.fillText(props.content, width / 2, height / 2);\n            }\n        };\n\n        // 启动防篡改监控\n        const startMonitoring = () => {\n            if (observer.value || !props.monitor || !watermarkRef.value || !watermarkLayerRef.value) return;\n\n            // 停止之前的监控\n            stopMonitoring();\n\n            // 创建 MutationObserver 实例\n            observer.value = new MutationObserver((mutations) => {\n                let needsRestore = false;\n\n                for (const mutation of mutations) {\n                    if (mutation.type === 'childList') {\n                        // 水印层被移除，需要恢复\n                        if (mutation.removedNodes.length && Array.from(mutation.removedNodes).includes(watermarkLayerRef.value!)) {\n                            needsRestore = true;\n                            break;\n                        }\n                    } else if (mutation.type === 'attributes' && mutation.target === watermarkLayerRef.value) {\n                        // 水印层属性被修改，需要恢复\n                        needsRestore = true;\n                        break;\n                    }\n                }\n\n                if (needsRestore) {\n                    // 恢复水印\n                    renderWatermark();\n                }\n            });\n\n            // 开始监视容器及水印层\n            observer.value.observe(watermarkRef.value, {\n                childList: true,\n                attributes: true,\n                subtree: true,\n                attributeFilter: ['style'],\n            });\n        };\n\n        // 停止监控\n        const stopMonitoring = () => {\n            if (observer.value) {\n                observer.value.disconnect();\n                observer.value = null;\n            }\n        };\n\n        // 组件挂载时初始化水印\n        onMounted(() => {\n            renderWatermark();\n\n            // 添加窗口大小变化监听器\n            window.addEventListener('resize', renderWatermark);\n        });\n\n        // 监听属性变化\n        watch(\n            () => [\n                props.width,\n                props.height,\n                props.rotate,\n                props.image,\n                props.content,\n                props.gap,\n                props.offset,\n                props.zIndex,\n                props.font,\n                props.darkFont,\n                props.isDarkMode,\n                props.opacity,\n                props.followScroll,\n                props.enableAnimation,\n            ],\n            () => {\n                renderWatermark();\n            },\n            { deep: true },\n        );\n\n        // 监听暗色模式的变化\n        if (typeof window !== 'undefined') {\n            const observer = new MutationObserver(() => {\n                nextTick(() => {\n                    renderWatermark();\n                });\n            });\n\n            onMounted(() => {\n                observer.observe(document.documentElement, {\n                    attributes: true,\n                    attributeFilter: ['class'],\n                });\n            });\n\n            onUnmounted(() => {\n                observer.disconnect();\n            });\n        }\n\n        // 组件卸载时清理资源\n        onUnmounted(() => {\n            if (reRenderId.value !== null) {\n                window.cancelAnimationFrame(reRenderId.value);\n            }\n            stopMonitoring();\n            window.removeEventListener('resize', renderWatermark);\n        });\n\n        return () => (\n            <div\n                ref={watermarkRef}\n                class={`relative overflow-hidden ${props.containerClassName}`}\n                style={{ position: 'relative' }}\n            >\n                {slots.default?.()}\n                <div\n                    ref={watermarkLayerRef}\n                    class=\"watermark-layer\"\n                />\n                {/* 添加水印动画的样式 */}\n                <style scoped>{`\n          @keyframes watermark-move {\n            from {\n              background-position: ${effectiveOffset.value[0]}px ${effectiveOffset.value[1]}px;\n            }\n            to {\n              background-position: ${effectiveOffset.value[0] + props.width}px ${effectiveOffset.value[1] + props.height}px;\n            }\n          }\n        `}</style>\n            </div>\n        );\n    },\n});\n"],"names":["defaultFont","color","fontSize","fontWeight","fontFamily","fontStyle","darkDefaultFont","defineComponent","name","props","width","type","Number","default","height","rotate","zIndex","image","String","content","Array","font","Object","darkFont","gap","offset","undefined","isDarkMode","Boolean","monitor","containerClassName","followScroll","opacity","enableAnimation","animationDuration","setup","slots","watermarkRef","ref","watermarkLayerRef","canvas","base64Url","reRenderId","observer","effectiveFont","computed","darkMode","window","document","documentElement","classList","contains","baseFont","customFont","effectiveOffset","renderWatermark","value","containerWidth","offsetWidth","containerHeight","offsetHeight","cancelAnimationFrame","requestAnimationFrame","ctx","getCanvasContext","canvasWidth","getMarkSize","canvasHeight","gapX","gapY","offsetLeft","offsetTop","clearRect","globalAlpha","translate","Math","PI","renderImage","renderText","toDataURL","layerStyle","style","position","top","left","backgroundImage","backgroundRepeat","backgroundPosition","pointerEvents","sizeX","sizeY","backgroundSize","animation","startMonitoring","createElement","getContext","size","fallbackImage","floor","img","Image","crossOrigin","referrerPolicy","src","isLoaded","timeout","setTimeout","console","warn","loadFallbackImage","onload","clearTimeout","drawImage","updateWatermarkBase64","error","onerror","fallbackImg","fillStyle","textAlign","textBaseline","isArray","lineHeight","totalHeight","length","startY","forEach","text","index","fillText","stopMonitoring","MutationObserver","mutations","needsRestore","mutation","removedNodes","from","includes","target","observe","childList","attributes","subtree","attributeFilter","disconnect","onMounted","addEventListener","watch","deep","nextTick","onUnmounted","removeEventListener","_createVNode"],"mappings":"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"}