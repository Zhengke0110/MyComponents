{"version":3,"file":"Progress-DkwwFPdY.js","sources":["../../src/libs/Progress/Progress.tsx"],"sourcesContent":["import { defineComponent, computed, PropType, CSSProperties } from 'vue';\n\n// 定义Success配置接口\ninterface SuccessProps {\n  percent?: number;\n  strokeColor?: string;\n}\n\n// 定义组件Props\nexport default defineComponent({\n  name: 'Progress',\n  props: {\n    // 共用属性\n    format: {\n      type: Function as PropType<(percent: number, successPercent?: number) => string>,\n      default: (percent: number) => `${percent}%`,\n    },\n    percent: {\n      type: Number,\n      default: 0,\n    },\n    showInfo: {\n      type: Boolean,\n      default: true,\n    },\n    status: {\n      type: String as PropType<'success' | 'exception' | 'normal' | 'active'>,\n      default: 'normal',\n    },\n    strokeColor: {\n      type: [String, Object, Array] as PropType<string | string[] | { from: string; to: string; direction: string }>,\n      default: undefined,\n    },\n    strokeLinecap: {\n      type: String as PropType<'round' | 'butt' | 'square'>,\n      default: 'round',\n    },\n    success: {\n      type: Object as PropType<SuccessProps>,\n      default: () => ({}),\n    },\n    title: {\n      type: String,\n      default: '',\n    },\n    trailColor: {\n      type: String,\n      default: undefined,\n    },\n    type: {\n      type: String as PropType<'line' | 'circle' | 'dashboard'>,\n      default: 'line',\n    },\n    size: {\n      type: [Number, String, Array] as PropType<number | [number, number] | 'small' | 'default'>,\n      default: 'default',\n    },\n    // line类型特有属性\n    steps: {\n      type: Number,\n      default: 0,\n    },\n    // circle/dashboard类型特有属性\n    strokeWidth: {\n      type: Number,\n      default: 6,\n    },\n    // dashboard特有属性\n    gapDegree: {\n      type: Number,\n      default: 75,\n    },\n    gapPosition: {\n      type: String as PropType<'top' | 'bottom' | 'left' | 'right'>,\n      default: 'bottom',\n    },\n  },\n  setup(props) {\n    // 计算最终的percent值，确保在0-100之间\n    const validPercent = computed(() => Math.max(0, Math.min(100, props.percent)));\n    // 成功部分的percent\n    const successPercent = computed(() => {\n      const { success } = props;\n      return success?.percent !== undefined ? Math.max(0, Math.min(success.percent, 100)) : 0;\n    });\n\n    // 根据状态计算颜色\n    const statusColorMap = {\n      normal: 'var(--progress-color-normal, #1890ff)',\n      success: 'var(--progress-color-success, #52c41a)',\n      exception: 'var(--progress-color-exception, #ff4d4f)',\n      active: 'var(--progress-color-normal, #1890ff)',\n    };\n\n    const getStrokeColor = computed(() => {\n      if (props.strokeColor) return props.strokeColor;\n      return statusColorMap[props.status || 'normal'];\n    });\n\n    const getSuccessColor = computed(() => {\n      return props.success?.strokeColor || statusColorMap.success;\n    });\n\n    // 生成线条类名\n    const lineClassName = computed(() => {\n      const { status, size, type } = props;\n      return [\n        'relative',\n        type === 'line' ? 'w-full' : '',\n        status === 'active' && type === 'line' ? 'progress-active' : '',\n        size === 'small' ? 'h-3' : 'h-5',\n      ].filter(Boolean).join(' ');\n    });\n    \n    // 判断是否为渐变色\n    const isGradient = (color: any) => {\n      return typeof color === 'object' && color.from && color.to;\n    };\n\n    // 生成线条样式\n    const getLineStyle = (color: string | any, percent: number) => {\n      const style: CSSProperties = {\n        width: `${percent}%`,\n        height: '100%',\n      };\n      \n      if (typeof color === 'string') {\n        style.backgroundColor = color;\n      } else if (isGradient(color)) {\n        style.backgroundImage = `linear-gradient(${color.direction || 'to right'}, ${color.from}, ${color.to})`;\n      }\n      \n      return style;\n    };\n\n    // 渲染状态图标\n    const renderStatusIcon = () => {\n      const { status } = props;\n      if (status === 'success') {\n        return (\n          <div class=\"inline-flex items-center justify-center rounded-full bg-green-500 dark:bg-green-600 shadow-sm transition-all duration-300 icon-container\">\n            <svg viewBox=\"0 0 24 24\" stroke=\"white\" stroke-width=\"3\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"animate-success-appear icon-svg\">\n              <polyline points=\"6 12 10 16 18 8\"></polyline>\n            </svg>\n          </div>\n        );\n      }\n      if (status === 'exception') {\n        return (\n          <div class=\"inline-flex items-center justify-center rounded-full bg-red-500 dark:bg-red-600 shadow-sm transition-all duration-300 icon-container\">\n            <svg viewBox=\"0 0 24 24\" stroke=\"white\" stroke-width=\"3\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"animate-error-appear icon-svg\">\n              <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n              <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n            </svg>\n          </div>\n        );\n      }\n      return null;\n    };\n\n    // 渲染步骤进度条\n    const renderSteps = () => {\n      const { steps, strokeColor, trailColor, percent } = props;\n      if (!steps || steps <= 0) return null;\n      \n      const current = Math.round(steps * (validPercent.value / 100));\n      const stepWidth = 100 / steps;\n      \n      return (\n        <div class=\"flex w-full h-full overflow-hidden\">\n          {Array.from({ length: steps }).map((_, index) => {\n            const isActive = index < current;\n            \n            // 处理颜色\n            let bgColor = trailColor || 'rgba(0, 0, 0, 0.06)';\n            \n            if (isActive) {\n              if (Array.isArray(strokeColor)) {\n                // 如果是数组颜色，使用对应索引的颜色，或者第一个颜色\n                bgColor = strokeColor[index % strokeColor.length] || strokeColor[0];\n              } else if (typeof strokeColor === 'string') {\n                bgColor = strokeColor;\n              } else if (isGradient(strokeColor)) {\n                // 渐变色情况，使用from颜色\n                bgColor = (strokeColor as any).from;\n              } else {\n                bgColor = statusColorMap[props.status || 'normal'];\n              }\n            }\n            \n            return (\n              <div \n                key={index}\n                class={`h-full transition-all duration-300 ${\n                  props.strokeLinecap === 'round' ? 'rounded-full' : ''\n                } ${\n                  // 确保步骤条中间有适当的间距\n                  index === 0 ? 'rounded-l-full' : ''\n                } ${\n                  index === steps - 1 ? 'rounded-r-full' : ''\n                }`}\n                style={{\n                  backgroundColor: bgColor,\n                  width: `calc(${stepWidth}% - ${steps > 1 ? 2 : 0}px)`,\n                  marginRight: index < steps - 1 ? '2px' : '0',\n                }}\n              />\n            );\n          })}\n        </div>\n      );\n    };\n\n    // 渲染线形进度条\n    const renderLineProgress = () => {\n      const { trailColor, strokeLinecap } = props;\n      \n      // 有步骤时使用步骤进度条\n      if (props.steps && props.steps > 0) {\n        return (\n          <div class={`${lineClassName.value} overflow-hidden`} style={{ backgroundColor: 'transparent' }}>\n            {renderSteps()}\n          </div>\n        );\n      }\n      \n      return (\n        <div class=\"flex flex-col w-full\">\n          <div \n            class={`w-full overflow-hidden transition-all duration-300 ${lineClassName.value} ${strokeLinecap === 'round' ? 'rounded-full' : ''}`}\n            style={{ backgroundColor: trailColor || 'rgba(0, 0, 0, 0.06)' }}\n          >\n            {/* 成功部分 */}\n            {successPercent.value > 0 && (\n              <div \n                class={`absolute left-0 top-0 h-full transition-all duration-300 ${strokeLinecap === 'round' ? 'rounded-full' : ''}`}\n                style={getLineStyle(getSuccessColor.value, successPercent.value)}\n              />\n            )}\n            \n            {/* 主要进度部分 */}\n            <div \n              class={`absolute left-0 top-0 h-full transition-all duration-300 ${strokeLinecap === 'round' ? 'rounded-full' : ''}`}\n              style={getLineStyle(getStrokeColor.value, validPercent.value)}\n            />\n          </div>\n        </div>\n      );\n    };\n\n    // 计算圆形进度条SVG路径\n    const getCirclePath = (percent: number, radius: number, gapPosition: string, gapDegree = 0) => {\n      // 对于圆形进度条，我们需要计算完整的圆周路径\n      const centerPoint = radius + props.strokeWidth / 2;\n      \n      if (props.type === 'circle') {\n        // 对于完整圆形，返回一个完整的圆形路径\n        return `M ${centerPoint},${props.strokeWidth / 2} \n                a ${radius},${radius} 0 1,1 0,${2 * radius} \n                a ${radius},${radius} 0 1,1 0,-${2 * radius}`;\n      }\n      \n      // 仪表盘类型，需要计算带缺口的路径\n      const gapRadian = (gapDegree / 180) * Math.PI;\n      let beginAngle = 0;\n      switch (gapPosition) {\n        case 'left':\n          beginAngle = -Math.PI / 2 + gapRadian;\n          break;\n        case 'right':\n          beginAngle = -Math.PI / 2 - gapRadian;\n          break;\n        case 'bottom':\n          beginAngle = Math.PI / 2;\n          break;\n        case 'top':\n        default:\n          beginAngle = -Math.PI / 2;\n      }\n      \n      // 结束角度，考虑缺口\n      const totalAngle = 2 * Math.PI - gapRadian * 2;\n      const endAngle = beginAngle + totalAngle;\n      \n      const beginPoint = {\n        x: centerPoint + radius * Math.cos(beginAngle),\n        y: centerPoint + radius * Math.sin(beginAngle)\n      };\n      \n      const endPoint = {\n        x: centerPoint + radius * Math.cos(endAngle),\n        y: centerPoint + radius * Math.sin(endAngle)\n      };\n      \n      const largeArcFlag = totalAngle >= Math.PI ? 1 : 0;\n      \n      return `M ${beginPoint.x},${beginPoint.y} \n              A ${radius},${radius} 0 ${largeArcFlag},1 ${endPoint.x},${endPoint.y}`;\n    };\n\n    // 渲染圆形或仪表盘进度条\n    const renderCircleProgress = () => {\n      const { \n        type, strokeWidth, gapDegree, gapPosition, trailColor, strokeLinecap,\n        showInfo, success\n      } = props;\n      \n      // 计算尺寸\n      const sizeValue = props.size === 'small' ? 80 : props.size === 'default' ? 120 : \n        (Array.isArray(props.size) ? props.size[0] : Number(props.size) || 120);\n      \n      const radius = sizeValue / 2 - strokeWidth / 2;\n      // 圆周长\n      const circumference = 2 * Math.PI * radius;\n      \n      // 计算仪表盘的缺口角度\n      const circleGapDegree = type === 'dashboard' ? (gapDegree || 75) : 0;\n      const circleGapPosition = type === 'dashboard' ? (gapPosition || 'bottom') : 'top';\n      \n      // 计算可用的弧长比例 (对于dashboard考虑缺口)\n      const availablePercent = type === 'dashboard' ? (360 - circleGapDegree) / 360 : 1;\n      const availableLength = circumference * availablePercent;\n      \n      // 计算路径\n      const pathString = getCirclePath(100, radius, circleGapPosition, circleGapDegree);\n      const trailPathStyle = {\n        stroke: trailColor || (props.status === 'success' ? '#f0f9eb' : '#f5f5f5'),\n        strokeDasharray: `${availableLength}px ${circumference}px`,\n        strokeDashoffset: '0',\n        transition: 'stroke-dashoffset 0.3s ease, stroke-dasharray 0.3s ease, stroke 0.3s',\n      };\n      \n      // 计算进度条路径样式\n      const getColorForStroke = () => {\n        if (typeof getStrokeColor.value === 'string') {\n          return getStrokeColor.value;\n        } \n        if (Array.isArray(getStrokeColor.value)) {\n          return getStrokeColor.value[0];\n        }\n        return (getStrokeColor.value as any)?.from || statusColorMap[props.status || 'normal'];\n      };\n      \n      const percentValue = validPercent.value / 100;\n      const strokePathLength = availableLength * percentValue;\n      \n      const strokePathStyle = {\n        stroke: getColorForStroke(),\n        strokeDasharray: `${strokePathLength}px ${circumference}px`,\n        strokeDashoffset: '0',\n        transition: 'stroke-dashoffset 0.3s ease, stroke-dasharray 0.3s ease, stroke 0.3s',\n      };\n      \n      // 成功状态路径样式\n      const successPercentValue = successPercent.value / 100;\n      const successPathLength = availableLength * successPercentValue;\n      \n      const successPathStyle = success?.percent ? {\n        stroke: getSuccessColor.value,\n        strokeDasharray: `${successPathLength}px ${circumference}px`,\n        strokeDashoffset: '0',\n        transition: 'stroke-dashoffset 0.3s ease, stroke-dasharray 0.3s ease, stroke 0.3s',\n      } : {};\n      \n      // 计算内部文本大小\n      const textStyle = { fontSize: sizeValue * 0.16 + 6 };\n      \n      return (\n        <div class=\"inline-flex items-center justify-center relative\" style={{ width: `${sizeValue}px`, height: `${sizeValue}px` }}>\n          <svg viewBox={`0 0 ${sizeValue} ${sizeValue}`} width={sizeValue} height={sizeValue}>\n            {/* 轨道 */}\n            <path \n              class=\"transition-all\"\n              d={pathString}\n              stroke-linecap={strokeLinecap}\n              stroke-width={strokeWidth}\n              fill=\"none\"\n              style={trailPathStyle}\n            />\n            \n            {/* 成功部分 */}\n            {success?.percent && (\n              <path\n                class=\"transition-all\"\n                d={pathString}\n                stroke-linecap={strokeLinecap}\n                stroke-width={strokeWidth}\n                fill=\"none\"\n                style={successPathStyle}\n              />\n            )}\n            \n            {/* 进度部分 */}\n            <path\n              class=\"transition-all\"\n              d={pathString}\n              stroke-linecap={strokeLinecap}\n              stroke-width={strokeWidth}\n              fill=\"none\"\n              style={strokePathStyle}\n            />\n          </svg>\n          \n          {/* 中间信息展示 */}\n          {showInfo && (\n            <div class=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 flex items-center justify-center w-full h-full\">\n              {props.status === 'success' || props.status === 'exception' ? (\n                <span class=\"flex items-center justify-center\" style={textStyle}>\n                  {renderStatusIcon()}\n                </span>\n              ) : (\n                <span class=\"text-center\" style={textStyle}>\n                  {props.format(validPercent.value, successPercent.value)}\n                </span>\n              )}\n            </div>\n          )}\n        </div>\n      );\n    };\n\n    return () => {\n      const { type, showInfo, title } = props;\n\n      return (\n        <div \n          class={`inline-flex items-center transition-all duration-300 dark:text-white ${\n            type === 'line' ? 'w-full flex-col sm:flex-row sm:items-center' : ''\n          }`}\n          title={title}\n        >\n          {/* 进度条主体 */}\n          <div class={`${type === 'line' ? 'w-full' : ''}`}>\n            {type === 'line' ? renderLineProgress() : renderCircleProgress()}\n          </div>\n          \n          {/* 线形进度条的信息显示 */}\n          {type === 'line' && showInfo && (\n            <div class={`ml-2 whitespace-nowrap min-w-[40px] text-right text-sm flex items-center justify-end ${\n              props.size === 'small' ? 'text-xs' : ''\n            }`}>\n              {props.status === 'success' || props.status === 'exception' ? (\n                renderStatusIcon()\n              ) : (\n                props.format(validPercent.value, successPercent.value)\n              )}\n            </div>\n          )}\n        </div>\n      );\n    };\n  },\n});\n"],"names":["defineComponent","name","props","format","type","Function","default","percent","Number","showInfo","Boolean","status","String","strokeColor","Object","Array","undefined","strokeLinecap","success","title","trailColor","size","steps","strokeWidth","gapDegree","gapPosition","setup","validPercent","computed","Math","max","min","successPercent","statusColorMap","normal","exception","active","getStrokeColor","getSuccessColor","lineClassName","filter","join","isGradient","color","from","to","getLineStyle","style","width","height","backgroundColor","backgroundImage","direction","renderStatusIcon","_createVNode","renderSteps","current","round","value","stepWidth","length","map","_","index","isActive","bgColor","isArray","marginRight","renderLineProgress","getCirclePath","radius","centerPoint","gapRadian","PI","beginAngle","totalAngle","endAngle","beginPoint","x","cos","y","sin","endPoint","largeArcFlag","renderCircleProgress","sizeValue","circumference","circleGapDegree","circleGapPosition","availablePercent","availableLength","pathString","trailPathStyle","stroke","strokeDasharray","strokeDashoffset","transition","getColorForStroke","percentValue","strokePathLength","strokePathStyle","successPercentValue","successPathLength","successPathStyle","textStyle","fontSize"],"mappings":"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"}