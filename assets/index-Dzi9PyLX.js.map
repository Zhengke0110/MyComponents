{"version":3,"file":"index-Dzi9PyLX.js","sources":["../../src/libs/Timeline/Timeline.tsx","../../src/libs/Timeline/View.vue"],"sourcesContent":["import { defineComponent, PropType, computed, provide, inject, ref, Ref, VNode, h, watch } from 'vue';\n\n// 定义类型\ntype TimelineMode = 'left' | 'right' | 'alternate';\ntype TimelineItemPosition = 'left' | 'right';\ntype TimelineItemColor = 'blue' | 'red' | 'green' | string;\n\n// 创建上下文符号\nconst TimelineSymbol = Symbol('timeline');\n\n/**\n * TimelineItem 组件 - 时间轴的单个节点\n */\nexport const TimelineItem = defineComponent({\n    name: 'TimelineItem',\n    props: {\n        // 圆圈颜色：blue, red, green 或自定义色值\n        color: {\n            type: String as PropType<TimelineItemColor>,\n            default: 'blue'\n        },\n        // 自定义时间轴点\n        dot: {\n            type: [String, Object] as PropType<string | VNode>,\n            default: undefined\n        },\n        // 设置标签\n        label: {\n            type: [String, Object] as PropType<string | VNode>,\n            default: undefined\n        },\n        // 自定义节点位置\n        position: {\n            type: String as PropType<TimelineItemPosition>,\n            default: undefined\n        }\n    },\n    setup(props, { slots }) {\n        // 注入上下文\n        const timelineContext = inject<{\n            mode: Ref<TimelineMode>,\n            reverse: Ref<boolean>,\n            currentIndex: Ref<number>,\n            itemCount: Ref<number>\n        }>(TimelineSymbol, {\n            mode: ref('left' as TimelineMode),\n            reverse: ref(false),\n            currentIndex: ref(0),\n            itemCount: ref(0)\n        });\n\n        // 计算当前项目的位置\n        const itemPosition = computed(() => {\n            if (props.position) {\n                return props.position;\n            }\n            if (timelineContext.mode.value === 'alternate') {\n                // 交替模式下，根据索引计算位置\n                // 实际应用中，可以通过父组件提供索引来实现\n                const index = timelineContext.currentIndex.value;\n                return index % 2 === 0 ? 'left' : 'right';\n            }\n            return timelineContext.mode.value;\n        });\n\n        // 获取颜色类名\n        const getColorClass = () => {\n            // 预定义颜色映射\n            const predefinedColors: Record<string, string> = {\n                blue: 'bg-blue-500 dark:bg-blue-400',\n                red: 'bg-red-500 dark:bg-red-400',\n                green: 'bg-green-500 dark:bg-green-400'\n            };\n\n            return predefinedColors[props.color] || '';\n        };\n\n        // 自定义颜色样式\n        const dotStyle = computed(() => {\n            const predefinedColors: Record<string, boolean> = {\n                blue: true,\n                red: true,\n                green: true\n            };\n\n            if (!predefinedColors[props.color] && props.color) {\n                return { backgroundColor: props.color };\n            }\n            return {};\n        });\n\n        // 判断是否是第一个项目\n        const isFirst = computed(() => timelineContext.currentIndex.value === 0);\n\n        // 判断是否是最后一个项目\n        const isLast = computed(() => {\n            return timelineContext.currentIndex.value === timelineContext.itemCount.value - 1;\n        });\n\n        return () => {\n            // 渲染自定义或默认的节点点 - 优化样式\n            const dotEl = slots.dot ? (\n                slots.dot()\n            ) : (\n                <div\n                    class={`h-5 w-5 rounded-full border-4 border-white dark:border-gray-800 shadow-sm ${getColorClass()} transition-all duration-300 ease-in-out relative z-20`}\n                    style={dotStyle.value}\n                ></div>\n            );\n\n            // 渲染标签 - 添加最小宽度确保有足够空间显示文字\n            const labelEl = props.label && (\n                <div class={`timeline-label text-sm ${itemPosition.value === 'left' ? 'text-right mr-4' : 'text-left ml-4'\n                    } text-gray-600 dark:text-gray-300 transition-colors duration-300 ease-in-out whitespace-nowrap overflow-hidden text-ellipsis min-w-[80px] max-w-[150px]`}>\n                    {typeof props.label === 'string' ? props.label : props.label}\n                </div>\n            );\n\n            // 渲染每个项目 - 添加hover效果\n            return (\n                <div\n                    class={`timeline-item relative flex mb-8 last:mb-0 transition-all duration-300 ease-in-out ${itemPosition.value === 'right' ? 'flex-row-reverse' : ''\n                        } timeline-item-hover-effect`}\n                    data-first={isFirst.value}\n                    data-last={isLast.value}\n                >\n                    {labelEl}\n                    <div class=\"timeline-item-head flex-none flex items-center justify-center z-10 transition-transform duration-300 ease-in-out hover:scale-110 relative\">\n                        {dotEl}\n                    </div>\n                    <div class={`timeline-item-content flex-auto pb-6 ${itemPosition.value === 'left' ? 'pl-6' : 'pr-6'\n                        } transition-all duration-300 ease-in-out`}>\n                        {slots.default?.()}\n                    </div>\n                </div>\n            );\n        };\n    }\n});\n\n/**\n * Timeline 组件 - 时间轴容器\n */\nexport const Timeline = defineComponent({\n    name: 'Timeline',\n    props: {\n        // 设置模式，可以改变时间轴和内容的相对位置\n        mode: {\n            type: String as PropType<TimelineMode>,\n            default: 'left',\n            validator: (val: string) => ['left', 'right', 'alternate'].includes(val)\n        },\n        // 指定最后一个幽灵节点是否存在或内容\n        pending: {\n            type: [Boolean, String, Object] as PropType<boolean | string | VNode>,\n            default: false\n        },\n        // 指定幽灵节点的时间图点\n        pendingDot: {\n            type: [String, Object] as PropType<string | VNode>,\n            default: undefined\n        },\n        // 节点排序，是否倒序\n        reverse: {\n            type: Boolean,\n            default: false\n        }\n    },\n    setup(props, { slots }) {\n        // 创建响应式引用\n        const modeRef = ref(props.mode);\n        const reverseRef = ref(props.reverse);\n        const currentIndex = ref(0);\n        const itemCount = ref(0);\n        const forceUpdate = ref(0);\n\n        // 立即同步props到内部的响应式引用\n        reverseRef.value = props.reverse;\n\n        // 监听props变化，同步到内部的响应式引用并强制更新\n        watch(() => props.mode, (newVal) => {\n            modeRef.value = newVal;\n            forceUpdate.value++;\n        }, { immediate: true });\n\n        watch(() => props.reverse, (newVal) => {\n            reverseRef.value = newVal;\n            forceUpdate.value++;\n            // 确保在reverseRef更新后重新获取items并渲染\n            setTimeout(() => {\n                forceUpdate.value++;\n            }, 0);\n        }, { immediate: true });\n\n        // 提供上下文\n        provide(TimelineSymbol, {\n            mode: modeRef,\n            reverse: reverseRef,\n            currentIndex,\n            itemCount\n        });\n\n        // 计算待处理节点\n        const pendingNode = computed(() => {\n            if (!props.pending) return null;\n\n            // 默认的待处理图标\n            const pendingDot = props.pendingDot || (\n                <i class=\"icon-[line-md--loading-alt-loop] text-blue-500 animate-spin\"></i>\n            );\n\n            // 创建待处理节点\n            return (\n                <TimelineItem dot={pendingDot} class=\"timeline-item-pending\" key=\"timeline-pending-item\">\n                    {typeof props.pending === 'boolean' ? null : props.pending}\n                </TimelineItem>\n            );\n        });\n\n        // 获取并处理时间轴项\n        const getItems = () => {\n            // 将forceUpdate引入计算，确保在其变化时重新执行\n            const updateTrigger = forceUpdate.value;\n\n            // 获取子元素并过滤\n            const items = slots.default?.() || [];\n            const filteredItems = items.filter(item =>\n                item.type &&\n                (item.type === TimelineItem ||\n                    (typeof item.type === 'object' &&\n                        'name' in item.type && item.type.name === 'TimelineItem'))\n            );\n\n            // 设置项目总数\n            itemCount.value = filteredItems.length;\n\n            // 根据反转属性调整顺序（直接使用props.reverse确保最新值）\n            let orderedItems = [...filteredItems];\n            if (props.reverse) {\n                orderedItems.reverse();\n            }\n\n            // 创建带有明确key的新VNodes\n            const itemsWithKeys = orderedItems.map((item, index) => {\n                currentIndex.value = index;\n\n                // 使用h函数创建新的VNode，确保key属性被正确设置\n                return h(TimelineItem, {\n                    ...item.props,\n                    key: `timeline-item-${index}`,\n                },\n                    // 传递原始VNode的子元素和插槽\n                    {\n                        default: item.children && typeof item.children === 'object' ?\n                            (item.children as any).default : undefined,\n                        dot: item.children && typeof item.children === 'object' ?\n                            (item.children as any).dot : undefined\n                    });\n            });\n\n            // 因为h函数创建的VNode可能没有正确处理key，\n            // 我们改为直接渲染一个div数组，每个div有明确的key并包含一个TimelineItem\n            const itemsWithKeysAndWrapper = itemsWithKeys.map((item, index) => {\n                return (\n                    <div key={`timeline-item-wrapper-${index}`}>\n                        {item}\n                    </div>\n                );\n            });\n\n            // 添加待处理节点\n            if (pendingNode.value) {\n                const pendingNodeWithKey = h(TimelineItem, {\n                    ...pendingNode.value.props,\n                    key: 'timeline-pending-item'\n                }, {\n                    default: pendingNode.value.children && typeof pendingNode.value === 'object' ?\n                        (pendingNode.value.children as any).default :\n                        undefined,\n                    dot: () => props.pendingDot || <i class=\"icon-[line-md--loading-alt-loop] text-blue-500 animate-spin\"></i>\n                });\n\n                const pendingNodeWithWrapper = (\n                    <div key=\"timeline-pending-wrapper\">\n                        {pendingNodeWithKey}\n                    </div>\n                );\n\n                const result = [...itemsWithKeysAndWrapper];\n                if (!props.reverse) {\n                    result.push(pendingNodeWithWrapper);\n                } else {\n                    result.unshift(pendingNodeWithWrapper);\n                }\n                return result;\n            }\n\n            return itemsWithKeysAndWrapper;\n        };\n\n        return () => {\n            // 使用forceUpdate来触发重新渲染\n            forceUpdate.value;\n\n            const timelineItems = getItems();\n\n            // 返回带有reverse属性标记的组件\n            return (\n                <div\n                    class={`timeline relative pl-0 transition-all duration-300 ease-in-out`}\n                    data-mode={props.mode}\n                    data-reverse={props.reverse.toString()}\n                >\n                    <div class=\"timeline-items relative z-10\">\n                        {timelineItems}\n                    </div>\n                </div>\n            );\n        };\n    }\n});\n\n// CSS 样式 - 更新样式以支持高亮效果\nconst timelineStyles = `\n.timeline {\n    position: relative;\n    padding-bottom: 20px;\n}\n\n.timeline::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 50%;\n    transform: translateX(-50%);\n    width: 2px;\n    height: 100%;\n    background-color: #e2e8f0;\n    z-index: 1;\n    transition: all 0.3s ease;\n}\n\n.dark .timeline::before {\n    background-color: #374151;\n}\n\n.timeline[data-mode=\"left\"]::before {\n    left: 16px;\n    transform: none;\n}\n\n.timeline[data-mode=\"right\"]::before {\n    left: auto;\n    right: 16px;\n    transform: none;\n}\n\n.timeline-item {\n    position: relative;\n}\n\n/* 添加伪元素用于每个节点自己的时间线，方便hover高亮 */\n.timeline-item::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 2px;\n    background-color: #e2e8f0;\n    z-index: 1;\n    transition: all 0.3s ease;\n    height: 100%;\n}\n\n.dark .timeline-item::before {\n    background-color: #374151;\n}\n\n.timeline[data-mode=\"left\"] .timeline-item::before {\n    left: 16px;\n}\n\n.timeline[data-mode=\"right\"] .timeline-item::before {\n    right: 16px;\n}\n\n.timeline[data-mode=\"alternate\"] .timeline-item:nth-child(odd)::before {\n    left: 50%;\n    transform: translateX(-50%);\n}\n\n.timeline[data-mode=\"alternate\"] .timeline-item:nth-child(even)::before {\n    left: 50%;\n    transform: translateX(-50%);\n}\n\n/* Hover高亮效果 */\n.timeline-item-hover-effect:hover::before {\n    background-color: #3b82f6;\n    width: 3px;\n}\n\n.dark .timeline-item-hover-effect:hover::before {\n    background-color: #60a5fa;\n}\n\n/* 节点样式 */\n.timeline-item-head {\n    position: relative;\n    background-color: white;\n    border-radius: 50%;\n    z-index: 2;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 32px;\n    height: 32px;\n    transition: all 0.3s ease;\n}\n\n.timeline-item-head > * {\n    position: relative;\n    z-index: 3;\n    transition: all 0.3s ease;\n}\n\n.dark .timeline-item-head {\n    background-color: #1f2937;\n}\n\n/* 标签样式，确保文字在一行显示且有足够宽度 */\n.timeline-label {\n    font-weight: 500;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    min-width: 80px;\n    max-width: 150px;\n    transition: all 0.3s ease;\n}\n\n/* Hover时标签样式变化 */\n.timeline-item:hover .timeline-label {\n    color: #3b82f6;\n}\n\n.dark .timeline-item:hover .timeline-label {\n    color: #60a5fa;\n}\n\n/* Hover时头部样式变化 */\n.timeline-item:hover .timeline-item-head {\n    box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.2);\n}\n\n.dark .timeline-item:hover .timeline-item-head {\n    box-shadow: 0 0 0 4px rgba(96, 165, 250, 0.2);\n}\n\n.timeline-item-enter-active,\n.timeline-item-leave-active {\n    transition: all 0.5s ease;\n}\n\n.timeline-item-enter-from {\n    opacity: 0;\n    transform: translateY(30px);\n}\n\n.timeline-item-leave-to {\n    opacity: 0;\n    transform: translateY(-30px);\n}\n\n/* 内容区域在悬停时的效果 */\n.timeline-item:hover .timeline-item-content > * {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n\n.timeline-item-content > * {\n    transition: all 0.3s ease;\n}\n`;\n\n// 将样式添加到文档\nconst styleEl = document.createElement('style');\nstyleEl.innerHTML = timelineStyles;\ndocument.head.appendChild(styleEl);\n\n// 导出组件\nexport default {\n    Timeline,\n    TimelineItem\n};\n","<template>\n    <div class=\"timeline-demo-container p-6 transition-colors duration-300\">\n        <h1 class=\"text-2xl font-bold mb-8 text-gray-800 dark:text-white transition-colors duration-300\">\n            Timeline 时间轴组件\n        </h1>\n\n        <!-- 基本用法展示 - 美化样式 -->\n        <section class=\"mb-12\">\n            <h2 class=\"text-xl font-semibold mb-4 text-gray-700 dark:text-gray-200 transition-colors duration-300\">\n                基本用法\n            </h2>\n            <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md transition-all duration-300\">\n                <Timeline>\n                    <TimelineItem label=\"2023年10月\">\n                        <div\n                            class=\"p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-100 dark:border-blue-800/30 hover:shadow-md transition-all duration-300 transform hover:scale-[1.01]\">\n                            <h3 class=\"font-medium text-blue-600 dark:text-blue-400 mb-2 flex items-center\">\n                                <i class=\"icon-[carbon--rocket] mr-2\"></i>\n                                项目启动\n                            </h3>\n                            <p class=\"text-gray-600 dark:text-gray-300\">开始规划项目并组建团队，确定项目目标和初步时间表</p>\n                            <div\n                                class=\"flex justify-between items-center mt-3 text-xs text-gray-500 dark:text-gray-400\">\n                                <span>负责人: 张三</span>\n                                <span\n                                    class=\"px-2 py-1 bg-blue-100 dark:bg-blue-800/30 text-blue-600 dark:text-blue-300 rounded\">进行中</span>\n                            </div>\n                        </div>\n                    </TimelineItem>\n                    <TimelineItem color=\"green\" label=\"2023年11月\">\n                        <div\n                            class=\"p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-100 dark:border-green-800/30 hover:shadow-md transition-all duration-300 transform hover:scale-[1.01]\">\n                            <h3 class=\"font-medium text-green-600 dark:text-green-400 mb-2 flex items-center\">\n                                <i class=\"icon-[carbon--development] mr-2\"></i>\n                                开发阶段\n                            </h3>\n                            <p class=\"text-gray-600 dark:text-gray-300\">进入开发阶段，完成核心功能的设计和实现</p>\n                            <div\n                                class=\"flex justify-between items-center mt-3 text-xs text-gray-500 dark:text-gray-400\">\n                                <span>负责人: 李四</span>\n                                <span\n                                    class=\"px-2 py-1 bg-green-100 dark:bg-green-800/30 text-green-600 dark:text-green-300 rounded\">按计划进行</span>\n                            </div>\n                        </div>\n                    </TimelineItem>\n                    <TimelineItem color=\"red\" label=\"2023年12月\">\n                        <div\n                            class=\"p-4 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-100 dark:border-red-800/30 hover:shadow-md transition-all duration-300 transform hover:scale-[1.01]\">\n                            <h3 class=\"font-medium text-red-600 dark:text-red-400 mb-2 flex items-center\">\n                                <i class=\"icon-[carbon--debug] mr-2\"></i>\n                                测试阶段\n                            </h3>\n                            <p class=\"text-gray-600 dark:text-gray-300\">进行全面测试和修复，确保产品质量和性能</p>\n                            <div\n                                class=\"flex justify-between items-center mt-3 text-xs text-gray-500 dark:text-gray-400\">\n                                <span>负责人: 王五</span>\n                                <span\n                                    class=\"px-2 py-1 bg-red-100 dark:bg-red-800/30 text-red-600 dark:text-red-300 rounded\">待开始</span>\n                            </div>\n                        </div>\n                    </TimelineItem>\n                    <TimelineItem color=\"#8434eb\" label=\"2024年1月\">\n                        <div\n                            class=\"p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg border border-purple-100 dark:border-purple-800/30 hover:shadow-md transition-all duration-300 transform hover:scale-[1.01]\">\n                            <h3 class=\"font-medium text-purple-600 dark:text-purple-400 mb-2 flex items-center\">\n                                <i class=\"icon-[carbon--deploy] mr-2\"></i>\n                                产品发布\n                            </h3>\n                            <p class=\"text-gray-600 dark:text-gray-300\">产品正式发布上线，开始市场推广和用户反馈收集</p>\n                            <div\n                                class=\"flex justify-between items-center mt-3 text-xs text-gray-500 dark:text-gray-400\">\n                                <span>负责人: 赵六</span>\n                                <span\n                                    class=\"px-2 py-1 bg-purple-100 dark:bg-purple-800/30 text-purple-600 dark:text-purple-300 rounded\">计划中</span>\n                            </div>\n                        </div>\n                    </TimelineItem>\n                </Timeline>\n            </div>\n        </section>\n\n        <!-- 不同模式展示 -->\n        <section class=\"mb-12\">\n            <h2 class=\"text-xl font-semibold mb-4 text-gray-700 dark:text-gray-200 transition-colors duration-300\">\n                不同模式\n            </h2>\n            <div class=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md transition-all duration-300\">\n                    <h3 class=\"font-medium mb-4 text-gray-700 dark:text-gray-200\">左侧模式 (left)</h3>\n                    <Timeline mode=\"left\">\n                        <TimelineItem label=\"上午 8:00\">早会</TimelineItem>\n                        <TimelineItem label=\"上午 10:30\">项目讨论</TimelineItem>\n                        <TimelineItem label=\"下午 2:00\">客户会议</TimelineItem>\n                    </Timeline>\n                </div>\n\n                <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md transition-all duration-300\">\n                    <h3 class=\"font-medium mb-4 text-gray-700 dark:text-gray-200\">右侧模式 (right)</h3>\n                    <Timeline mode=\"right\">\n                        <TimelineItem label=\"上午 8:00\">早会</TimelineItem>\n                        <TimelineItem label=\"上午 10:30\">项目讨论</TimelineItem>\n                        <TimelineItem label=\"下午 2:00\">客户会议</TimelineItem>\n                    </Timeline>\n                </div>\n\n                <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md transition-all duration-300\">\n                    <h3 class=\"font-medium mb-4 text-gray-700 dark:text-gray-200\">交替模式 (alternate)</h3>\n                    <Timeline mode=\"alternate\">\n                        <TimelineItem label=\"第一步\">需求分析</TimelineItem>\n                        <TimelineItem label=\"第二步\">原型设计</TimelineItem>\n                        <TimelineItem label=\"第三步\">开发编码</TimelineItem>\n                        <TimelineItem label=\"第四步\">测试发布</TimelineItem>\n                    </Timeline>\n                </div>\n            </div>\n        </section>\n\n        <!-- 自定义节点和颜色 -->\n        <section class=\"mb-12\">\n            <h2 class=\"text-xl font-semibold mb-4 text-gray-700 dark:text-gray-200 transition-colors duration-300\">\n                自定义节点和颜色\n            </h2>\n            <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md transition-all duration-300\">\n                <Timeline>\n                    <TimelineItem>\n                        <template #dot>\n                            <div\n                                class=\"flex items-center justify-center w-8 h-8 rounded-full bg-blue-100 dark:bg-blue-800 transition-colors duration-300\">\n                                <i class=\"icon-[carbon--idea] text-blue-500 dark:text-blue-300\"></i>\n                            </div>\n                        </template>\n                        <div class=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-md transition-colors duration-300\">\n                            <h3 class=\"font-medium text-blue-600 dark:text-blue-400\">创意构思</h3>\n                            <p class=\"text-gray-600 dark:text-gray-300\">头脑风暴和创意讨论</p>\n                        </div>\n                    </TimelineItem>\n                    <TimelineItem>\n                        <template #dot>\n                            <div\n                                class=\"flex items-center justify-center w-8 h-8 rounded-full bg-green-100 dark:bg-green-800 transition-colors duration-300\">\n                                <i class=\"icon-[carbon--document] text-green-500 dark:text-green-300\"></i>\n                            </div>\n                        </template>\n                        <div class=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-md transition-colors duration-300\">\n                            <h3 class=\"font-medium text-green-600 dark:text-green-400\">需求文档</h3>\n                            <p class=\"text-gray-600 dark:text-gray-300\">撰写详细的需求文档</p>\n                        </div>\n                    </TimelineItem>\n                    <TimelineItem>\n                        <template #dot>\n                            <div\n                                class=\"flex items-center justify-center w-8 h-8 rounded-full bg-yellow-100 dark:bg-yellow-800 transition-colors duration-300\">\n                                <i class=\"icon-[carbon--code] text-yellow-500 dark:text-yellow-300\"></i>\n                            </div>\n                        </template>\n                        <div class=\"p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-md transition-colors duration-300\">\n                            <h3 class=\"font-medium text-yellow-600 dark:text-yellow-400\">开发实现</h3>\n                            <p class=\"text-gray-600 dark:text-gray-300\">开始编码实现功能</p>\n                        </div>\n                    </TimelineItem>\n                    <TimelineItem>\n                        <template #dot>\n                            <div\n                                class=\"flex items-center justify-center w-8 h-8 rounded-full bg-red-100 dark:bg-red-800 transition-colors duration-300\">\n                                <i class=\"icon-[carbon--launch] text-red-500 dark:text-red-300\"></i>\n                            </div>\n                        </template>\n                        <div class=\"p-3 bg-red-50 dark:bg-red-900/20 rounded-md transition-colors duration-300\">\n                            <h3 class=\"font-medium text-red-600 dark:text-red-400\">发布上线</h3>\n                            <p class=\"text-gray-600 dark:text-gray-300\">产品部署和发布</p>\n                        </div>\n                    </TimelineItem>\n                </Timeline>\n            </div>\n        </section>\n\n        <!-- 倒序排列 - 修复切换无反应问题 -->\n        <section class=\"mb-12\">\n            <h2 class=\"text-xl font-semibold mb-4 text-gray-700 dark:text-gray-200 transition-colors duration-300\">\n                倒序排列\n            </h2>\n            <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md transition-all duration-300\">\n                <div class=\"flex justify-end mb-4\">\n                    <button\n                        class=\"px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors duration-300\"\n                        @click=\"toggleReverseTimeline\">\n                        {{ reverseTimeline ? '恢复正序' : '切换为倒序' }}\n                    </button>\n                </div>\n                <!-- 添加key强制重新渲染整个时间轴 -->\n                <div class=\"order-timeline-container\" :key=\"`timeline-rev-${reverseTimelineKey}`\">\n                    <Timeline :reverse=\"reverseTimeline\">\n                        <TimelineItem label=\"2021年\" key=\"year-2021\" class=\"timeline-year-item\">\n                            <div\n                                class=\"p-3 bg-gray-50 dark:bg-gray-900/30 rounded-md border border-gray-200 dark:border-gray-700 transition-all duration-300\">\n                                <h3 class=\"font-medium\">公司成立</h3>\n                                <p class=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">创始团队组建，确定公司愿景和使命</p>\n                            </div>\n                        </TimelineItem>\n                        <TimelineItem label=\"2022年\" key=\"year-2022\" class=\"timeline-year-item\">\n                            <div\n                                class=\"p-3 bg-gray-50 dark:bg-gray-900/30 rounded-md border border-gray-200 dark:border-gray-700 transition-all duration-300\">\n                                <h3 class=\"font-medium\">产品研发</h3>\n                                <p class=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">核心产品开发和初步市场测试</p>\n                            </div>\n                        </TimelineItem>\n                        <TimelineItem label=\"2023年\" key=\"year-2023\" class=\"timeline-year-item\">\n                            <div\n                                class=\"p-3 bg-gray-50 dark:bg-gray-900/30 rounded-md border border-gray-200 dark:border-gray-700 transition-all duration-300\">\n                                <h3 class=\"font-medium\">业务拓展</h3>\n                                <p class=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">市场份额增长，业务范围扩大</p>\n                            </div>\n                        </TimelineItem>\n                        <TimelineItem label=\"2024年\" key=\"year-2024\" class=\"timeline-year-item\">\n                            <div\n                                class=\"p-3 bg-gray-50 dark:bg-gray-900/30 rounded-md border border-gray-200 dark:border-gray-700 transition-all duration-300\">\n                                <h3 class=\"font-medium\">全球化布局</h3>\n                                <p class=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">国际市场开拓，建立全球团队</p>\n                            </div>\n                        </TimelineItem>\n                    </Timeline>\n                </div>\n            </div>\n        </section>\n\n        <!-- 进行中状态 -->\n        <section class=\"mb-12\">\n            <h2 class=\"text-xl font-semibold mb-4 text-gray-700 dark:text-gray-200 transition-colors duration-300\">\n                进行中状态\n            </h2>\n            <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md transition-all duration-300\">\n                <Timeline :pending=\"pendingText\">\n                    <TimelineItem color=\"green\" label=\"已完成\">\n                        <div class=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-md transition-colors duration-300\">\n                            <h3 class=\"font-medium text-green-600 dark:text-green-400\">第一阶段</h3>\n                            <p class=\"text-gray-600 dark:text-gray-300\">已完成初步规划</p>\n                        </div>\n                    </TimelineItem>\n                    <TimelineItem color=\"green\" label=\"已完成\">\n                        <div class=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-md transition-colors duration-300\">\n                            <h3 class=\"font-medium text-green-600 dark:text-green-400\">第二阶段</h3>\n                            <p class=\"text-gray-600 dark:text-gray-300\">已完成原型设计</p>\n                        </div>\n                    </TimelineItem>\n                    <TimelineItem color=\"blue\" label=\"进行中\">\n                        <div class=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-md transition-colors duration-300\">\n                            <h3 class=\"font-medium text-blue-600 dark:text-blue-400\">第三阶段</h3>\n                            <p class=\"text-gray-600 dark:text-gray-300\">正在开发中...</p>\n                        </div>\n                    </TimelineItem>\n                </Timeline>\n            </div>\n        </section>\n\n        <!-- 交互式时间轴 - 完全重构，解决渲染问题 -->\n        <section class=\"mb-12\">\n            <h2 class=\"text-xl font-semibold mb-4 text-gray-700 dark:text-gray-200 transition-colors duration-300\">\n                交互式时间轴\n            </h2>\n            <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md transition-all duration-300\">\n                <!-- 控制按钮区域 -->\n                <div class=\"flex flex-wrap items-center gap-2 mb-4\">\n                    <div class=\"mr-2 text-gray-600 dark:text-gray-300\">添加项目:</div>\n                    <button v-for=\"(item, index) in interactiveItems\" :key=\"index\"\n                        class=\"px-3 py-1 text-sm bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 rounded-md transition-colors duration-300\"\n                        @click=\"() => handleAddItem(index)\">\n                        <i :class=\"`icon-[carbon--${getItemIcon(item.color)}] mr-1`\"></i>\n                        {{ item.title }}\n                    </button>\n                    <button\n                        class=\"px-3 py-1 text-sm bg-red-100 dark:bg-red-900/30 hover:bg-red-200 dark:hover:bg-red-800/30 text-red-600 dark:text-red-400 rounded-md transition-colors duration-300\"\n                        @click=\"() => handleClearItems()\">\n                        <i class=\"icon-[carbon--trash-can] mr-1\"></i>\n                        清空\n                    </button>\n                </div>\n\n                <!-- 空状态展示 -->\n                <div v-if=\"!interactiveItems || currentItems.length === 0\"\n                    class=\"flex flex-col items-center justify-center h-40 text-gray-400 dark:text-gray-500 transition-colors duration-300\">\n                    <i class=\"icon-[carbon--time] text-4xl mb-3\"></i>\n                    <p>点击上方按钮添加时间线项目</p>\n                </div>\n\n                <!-- 时间轴内容 -->\n                <div v-else class=\"mt-6 static-timeline-container\">\n                    <!-- 控制操作区域 -->\n                    <div class=\"flex justify-between mb-4\">\n                        <div class=\"text-gray-600 dark:text-gray-300\">已添加 {{ currentItems.length }} 个项目</div>\n                        <div class=\"flex gap-2\">\n                            <button @click=\"handleToggleAllExpand\"\n                                class=\"px-3 py-1 text-sm bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 rounded-md transition-colors duration-300\">\n                                <i :class=\"`icon-[carbon--${allExpanded ? 'collapse-all' : 'expand-all'}] mr-1`\"></i>\n                                {{ allExpanded ? '全部折叠' : '全部展开' }}\n                            </button>\n                            <button @click=\"() => { enableSorting = !enableSorting }\"\n                                class=\"px-3 py-1 text-sm bg-blue-100 dark:bg-blue-900/30 hover:bg-blue-200 dark:hover:bg-blue-800/30 text-blue-600 dark:text-blue-400 rounded-md transition-colors duration-300\">\n                                <i :class=\"`icon-[carbon--${enableSorting ? 'checkmark' : 'draggable'}] mr-1`\"></i>\n                                {{ enableSorting ? '完成排序' : '排序项目' }}\n                            </button>\n                        </div>\n                    </div>\n\n                    <!-- 手动渲染Timeline组件和TimelineItem -->\n                    <div class=\"timeline-wrapper\" :key=\"`interactive-timeline-${reRenderKey}`\">\n                        <div class=\"timeline relative pl-0\">\n                            <div class=\"timeline-items relative z-10\">\n                                <!-- 手动构建每个Timeline项 -->\n                                <div v-for=\"(item, index) in currentItems\" :key=\"`manual-item-${item.id}`\"\n                                    class=\"timeline-item-wrapper\">\n                                    <div class=\"timeline-item relative flex mb-8 last:mb-0\">\n                                        <!-- 标签部分 - 添加固定宽度 -->\n                                        <div\n                                            class=\"timeline-label text-sm text-right mr-4 text-gray-600 dark:text-gray-300 min-w-[80px] w-[100px]\">\n                                            {{ item.date }}\n                                        </div>\n\n                                        <!-- 时间点 -->\n                                        <div\n                                            class=\"timeline-item-head flex-none flex items-center justify-center z-10 relative\">\n                                            <div\n                                                :class=\"`h-5 w-5 rounded-full border-4 border-white dark:border-gray-800 shadow-sm bg-${item.color}-500 dark:bg-${item.color}-400`\">\n                                            </div>\n                                        </div>\n\n                                        <!-- 内容区域 -->\n                                        <div class=\"timeline-item-content flex-auto pb-6 pl-6\">\n                                            <div\n                                                class=\"p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm\">\n                                                <!-- 标题和操作按钮 -->\n                                                <div class=\"flex justify-between items-center\">\n                                                    <h3 class=\"font-medium flex items-center\"\n                                                        :class=\"getItemTextClass(item.color)\">\n                                                        <i\n                                                            :class=\"`icon-[carbon--${getItemIcon(item.color)}] mr-2`\"></i>\n                                                        {{ item.title }}\n                                                    </h3>\n                                                    <div class=\"flex gap-1\">\n                                                        <!-- 排序按钮 -->\n                                                        <template v-if=\"enableSorting\">\n                                                            <button @click=\"() => handleMoveItem(index, index - 1)\"\n                                                                :disabled=\"index === 0\" :class=\"[\n                                                                    'p-1 rounded transition-colors duration-200',\n                                                                    index === 0 ? 'text-gray-400 dark:text-gray-600 cursor-not-allowed' : 'text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'\n                                                                ]\">\n                                                                <i class=\"icon-[carbon--arrow-up]\"></i>\n                                                            </button>\n                                                            <button @click=\"() => handleMoveItem(index, index + 1)\"\n                                                                :disabled=\"index === currentItems.length - 1\" :class=\"[\n                                                                    'p-1 rounded transition-colors duration-200',\n                                                                    index === currentItems.length - 1 ? 'text-gray-400 dark:text-gray-600 cursor-not-allowed' : 'text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'\n                                                                ]\">\n                                                                <i class=\"icon-[carbon--arrow-down]\"></i>\n                                                            </button>\n                                                        </template>\n\n                                                        <!-- 展开/折叠按钮 -->\n                                                        <button @click=\"() => handleToggleExpand(item)\"\n                                                            class=\"p-1 text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors duration-200\">\n                                                            <i\n                                                                :class=\"`icon-[carbon--${item.expanded ? 'collapse-all' : 'expand-all'}]`\"></i>\n                                                        </button>\n\n                                                        <!-- 删除按钮 -->\n                                                        <button @click=\"() => handleRemoveItem(index)\"\n                                                            class=\"p-1 text-red-500 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded transition-colors duration-200\">\n                                                            <i class=\"icon-[carbon--close]\"></i>\n                                                        </button>\n                                                    </div>\n                                                </div>\n\n                                                <!-- 展开后的内容 -->\n                                                <div v-if=\"item.expanded\"\n                                                    :class=\"['mt-3 overflow-hidden transition-all duration-300', getItemColorClass(item.color)]\">\n                                                    <p class=\"text-gray-600 dark:text-gray-300 p-3 rounded-md\">{{\n                                                        item.content\n                                                        }}</p>\n                                                    <div\n                                                        class=\"flex justify-between items-center text-xs mt-2 text-gray-500 dark:text-gray-400 pt-2 border-t border-gray-100 dark:border-gray-700\">\n                                                        <span>{{ formatDate(item.timestamp) }}</span>\n                                                        <span\n                                                            :class=\"`px-2 py-1 rounded ${getItemBadgeClass(item.color)}`\">{{\n                                                                item.date }}</span>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n\n        <!-- 自定义布局 -->\n        <section class=\"mb-12\">\n            <h2 class=\"text-xl font-semibold mb-4 text-gray-700 dark:text-gray-200 transition-colors duration-300\">\n                自定义布局与风格\n            </h2>\n            <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md transition-all duration-300\">\n                <Timeline mode=\"alternate\">\n                    <TimelineItem label=\"2023年1月\">\n                        <template #dot>\n                            <div\n                                class=\"flex items-center justify-center w-8 h-8 rounded-full bg-indigo-100 dark:bg-indigo-800 transition-colors duration-300\">\n                                <i class=\"icon-[carbon--calendar] text-indigo-500 dark:text-indigo-300\"></i>\n                            </div>\n                        </template>\n                        <div\n                            class=\"p-4 border border-indigo-200 dark:border-indigo-800 rounded-lg hover:shadow-md transition-all duration-300 transform hover:scale-105\">\n                            <h3 class=\"font-medium text-indigo-600 dark:text-indigo-400\">产品规划</h3>\n                            <p class=\"text-gray-600 dark:text-gray-300 mt-2\">制定年度产品规划和路线图</p>\n                            <div class=\"mt-3 flex gap-2\">\n                                <span\n                                    class=\"px-2 py-1 text-xs bg-indigo-100 dark:bg-indigo-900/30 text-indigo-600 dark:text-indigo-400 rounded-md\">规划</span>\n                                <span\n                                    class=\"px-2 py-1 text-xs bg-indigo-100 dark:bg-indigo-900/30 text-indigo-600 dark:text-indigo-400 rounded-md\">战略</span>\n                            </div>\n                        </div>\n                    </TimelineItem>\n                    <TimelineItem label=\"2023年3月\">\n                        <template #dot>\n                            <div\n                                class=\"flex items-center justify-center w-8 h-8 rounded-full bg-pink-100 dark:bg-pink-800 transition-colors duration-300\">\n                                <i class=\"icon-[carbon--pen] text-pink-500 dark:text-pink-300\"></i>\n                            </div>\n                        </template>\n                        <div\n                            class=\"p-4 border border-pink-200 dark:border-pink-800 rounded-lg hover:shadow-md transition-all duration-300 transform hover:scale-105\">\n                            <h3 class=\"font-medium text-pink-600 dark:text-pink-400\">设计阶段</h3>\n                            <p class=\"text-gray-600 dark:text-gray-300 mt-2\">完成产品UI设计和用户体验优化</p>\n                            <div class=\"mt-3 flex gap-2\">\n                                <span\n                                    class=\"px-2 py-1 text-xs bg-pink-100 dark:bg-pink-900/30 text-pink-600 dark:text-pink-400 rounded-md\">设计</span>\n                                <span\n                                    class=\"px-2 py-1 text-xs bg-pink-100 dark:bg-pink-900/30 text-pink-600 dark:text-pink-400 rounded-md\">UI/UX</span>\n                            </div>\n                        </div>\n                    </TimelineItem>\n                    <TimelineItem label=\"2023年5月\">\n                        <template #dot>\n                            <div\n                                class=\"flex items-center justify-center w-8 h-8 rounded-full bg-amber-100 dark:bg-amber-800 transition-colors duration-300\">\n                                <i class=\"icon-[carbon--development] text-amber-500 dark:text-amber-300\"></i>\n                            </div>\n                        </template>\n                        <div\n                            class=\"p-4 border border-amber-200 dark:border-amber-800 rounded-lg hover:shadow-md transition-all duration-300 transform hover:scale-105\">\n                            <h3 class=\"font-medium text-amber-600 dark:text-amber-400\">开发阶段</h3>\n                            <p class=\"text-gray-600 dark:text-gray-300 mt-2\">核心功能开发和技术架构实现</p>\n                            <div class=\"mt-3 flex gap-2\">\n                                <span\n                                    class=\"px-2 py-1 text-xs bg-amber-100 dark:bg-amber-900/30 text-amber-600 dark:text-amber-400 rounded-md\">开发</span>\n                                <span\n                                    class=\"px-2 py-1 text-xs bg-amber-100 dark:bg-amber-900/30 text-amber-600 dark:text-amber-400 rounded-md\">技术</span>\n                            </div>\n                        </div>\n                    </TimelineItem>\n                    <TimelineItem label=\"2023年7月\">\n                        <template #dot>\n                            <div\n                                class=\"flex items-center justify-center w-8 h-8 rounded-full bg-teal-100 dark:bg-teal-800 transition-colors duration-300\">\n                                <i class=\"icon-[carbon--delivery] text-teal-500 dark:text-teal-300\"></i>\n                            </div>\n                        </template>\n                        <div\n                            class=\"p-4 border border-teal-200 dark:border-teal-800 rounded-lg hover:shadow-md transition-all duration-300 transform hover:scale-105\">\n                            <h3 class=\"font-medium text-teal-600 dark:text-teal-400\">发布阶段</h3>\n                            <p class=\"text-gray-600 dark:text-gray-300 mt-2\">产品上线和用户推广活动</p>\n                            <div class=\"mt-3 flex gap-2\">\n                                <span\n                                    class=\"px-2 py-1 text-xs bg-teal-100 dark:bg-teal-900/30 text-teal-600 dark:text-teal-400 rounded-md\">上线</span>\n                                <span\n                                    class=\"px-2 py-1 text-xs bg-teal-100 dark:bg-teal-900/30 text-teal-600 dark:text-teal-400 rounded-md\">推广</span>\n                            </div>\n                        </div>\n                    </TimelineItem>\n                </Timeline>\n            </div>\n        </section>\n\n        <!-- 与其他组件结合 -->\n        <section class=\"mb-12\">\n            <h2 class=\"text-xl font-semibold mb-4 text-gray-700 dark:text-gray-200 transition-colors duration-300\">\n                与其他组件结合\n            </h2>\n            <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md transition-all duration-300\">\n                <Timeline mode=\"left\">\n                    <TimelineItem label=\"媒体内容\">\n                        <div\n                            class=\"overflow-hidden rounded-lg border border-gray-200 dark:border-gray-700 transition-colors duration-300\">\n                            <div class=\"aspect-video bg-gray-100 dark:bg-gray-900 flex items-center justify-center\">\n                                <i class=\"icon-[carbon--play-filled] text-4xl text-blue-500\"></i>\n                            </div>\n                            <div class=\"p-3\">\n                                <h3 class=\"font-medium text-gray-800 dark:text-gray-200\">产品视频演示</h3>\n                                <p class=\"text-gray-600 dark:text-gray-400 text-sm mt-1\">展示产品功能与亮点</p>\n                            </div>\n                        </div>\n                    </TimelineItem>\n                    <TimelineItem label=\"进度情况\">\n                        <div class=\"p-4 bg-gray-50 dark:bg-gray-900/50 rounded-lg transition-colors duration-300\">\n                            <h3 class=\"font-medium text-gray-800 dark:text-gray-200 mb-2\">项目进度</h3>\n                            <div class=\"w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\">\n                                <div class=\"h-full bg-blue-500 dark:bg-blue-400 transition-all duration-500 ease-out\"\n                                    :style=\"{ width: `${progressValue}%` }\"></div>\n                            </div>\n                            <div class=\"flex justify-between mt-1\">\n                                <span class=\"text-xs text-gray-500 dark:text-gray-400\">开始</span>\n                                <span class=\"text-xs text-gray-500 dark:text-gray-400\">{{ progressValue }}%</span>\n                                <span class=\"text-xs text-gray-500 dark:text-gray-400\">完成</span>\n                            </div>\n                            <button\n                                class=\"mt-3 px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors duration-300\"\n                                @click=\"updateProgress\">\n                                更新进度\n                            </button>\n                        </div>\n                    </TimelineItem>\n                    <TimelineItem label=\"团队协作\">\n                        <div class=\"p-4 bg-gray-50 dark:bg-gray-900/50 rounded-lg transition-colors duration-300\">\n                            <h3 class=\"font-medium text-gray-800 dark:text-gray-200 mb-2\">团队成员</h3>\n                            <div class=\"flex -space-x-2 overflow-hidden\">\n                                <div v-for=\"(color, index) in ['bg-blue-500', 'bg-red-500', 'bg-green-500', 'bg-yellow-500', 'bg-purple-500']\"\n                                    :key=\"index\"\n                                    :class=\"[color, 'w-8 h-8 rounded-full border-2 border-white dark:border-gray-800 flex items-center justify-center text-white text-xs font-medium transition-all duration-300']\">\n                                    {{ String.fromCharCode(65 + index) }}\n                                </div>\n                                <div\n                                    class=\"w-8 h-8 rounded-full border-2 border-white dark:border-gray-800 bg-gray-200 dark:bg-gray-700 flex items-center justify-center text-gray-600 dark:text-gray-300 text-xs font-medium transition-all duration-300\">\n                                    +3\n                                </div>\n                            </div>\n                        </div>\n                    </TimelineItem>\n                </Timeline>\n            </div>\n        </section>\n\n        <!-- 新增：小结与最佳实践 -->\n        <section class=\"mb-12\">\n            <h2 class=\"text-xl font-semibold mb-4 text-gray-700 dark:text-gray-200 transition-colors duration-300\">\n                小结与最佳实践\n            </h2>\n            <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md transition-all duration-300\">\n                <div class=\"prose dark:prose-invert max-w-none\">\n                    <h3\n                        class=\"text-lg font-medium text-gray-800 dark:text-gray-100 mb-3 pb-2 border-b border-gray-100 dark:border-gray-700\">\n                        使用场景</h3>\n                    <p class=\"text-gray-600 dark:text-gray-300 mb-3\">Timeline 时间轴组件适用于以下场景：</p>\n                    <ul class=\"space-y-2 mb-6 text-gray-600 dark:text-gray-300\">\n                        <li class=\"flex items-start\">\n                            <i\n                                class=\"icon-[carbon--checkmark] text-green-500 dark:text-green-400 mt-1 mr-2 flex-shrink-0\"></i>\n                            <span>展示时间流程或工作流程的进展</span>\n                        </li>\n                        <li class=\"flex items-start\">\n                            <i\n                                class=\"icon-[carbon--checkmark] text-green-500 dark:text-green-400 mt-1 mr-2 flex-shrink-0\"></i>\n                            <span>显示项目各阶段的重要里程碑</span>\n                        </li>\n                        <li class=\"flex items-start\">\n                            <i\n                                class=\"icon-[carbon--checkmark] text-green-500 dark:text-green-400 mt-1 mr-2 flex-shrink-0\"></i>\n                            <span>按时间顺序呈现事件或历史记录</span>\n                        </li>\n                        <li class=\"flex items-start\">\n                            <i\n                                class=\"icon-[carbon--checkmark] text-green-500 dark:text-green-400 mt-1 mr-2 flex-shrink-0\"></i>\n                            <span>展示任务的进度和状态</span>\n                        </li>\n                    </ul>\n\n                    <h3\n                        class=\"text-lg font-medium text-gray-800 dark:text-gray-100 mb-3 pb-2 border-b border-gray-100 dark:border-gray-700\">\n                        使用建议</h3>\n                    <ul class=\"space-y-2 mb-6 text-gray-600 dark:text-gray-300\">\n                        <li class=\"flex items-start\">\n                            <i\n                                class=\"icon-[carbon--arrow-right] text-blue-500 dark:text-blue-400 mt-1 mr-2 flex-shrink-0\"></i>\n                            <span>为每个时间点添加明确的标签，帮助用户理解时间顺序</span>\n                        </li>\n                        <li class=\"flex items-start\">\n                            <i\n                                class=\"icon-[carbon--arrow-right] text-blue-500 dark:text-blue-400 mt-1 mr-2 flex-shrink-0\"></i>\n                            <span>使用不同颜色区分不同类型或状态的事件</span>\n                        </li>\n                        <li class=\"flex items-start\">\n                            <i\n                                class=\"icon-[carbon--arrow-right] text-blue-500 dark:text-blue-400 mt-1 mr-2 flex-shrink-0\"></i>\n                            <span>内容较多时，考虑使用可折叠的内容区域</span>\n                        </li>\n                        <li class=\"flex items-start\">\n                            <i\n                                class=\"icon-[carbon--arrow-right] text-blue-500 dark:text-blue-400 mt-1 mr-2 flex-shrink-0\"></i>\n                            <span>使用合适的自定义图标增强视觉表现力</span>\n                        </li>\n                        <li class=\"flex items-start\">\n                            <i\n                                class=\"icon-[carbon--arrow-right] text-blue-500 dark:text-blue-400 mt-1 mr-2 flex-shrink-0\"></i>\n                            <span>需要双向展示时使用 alternate 模式</span>\n                        </li>\n                    </ul>\n\n                    <h3\n                        class=\"text-lg font-medium text-gray-800 dark:text-gray-100 mb-4 pb-2 border-b border-gray-100 dark:border-gray-700\">\n                        最佳实践</h3>\n                    <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-3\">\n                        <div\n                            class=\"border dark:border-gray-700 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-all duration-300\">\n                            <div\n                                class=\"bg-green-50 dark:bg-green-900/20 p-3 border-b dark:border-gray-700 flex items-center\">\n                                <i class=\"icon-[carbon--checkmark-filled] text-green-500 dark:text-green-400 mr-2\"></i>\n                                <h4 class=\"text-green-600 dark:text-green-400 font-medium\">推荐用法</h4>\n                            </div>\n                            <div class=\"p-4 bg-white dark:bg-gray-800\">\n                                <ul class=\"space-y-2 text-gray-600 dark:text-gray-300\">\n                                    <li class=\"flex items-start\">\n                                        <i\n                                            class=\"icon-[carbon--dot-mark] text-green-500 dark:text-green-400 mt-1.5 mr-2 flex-shrink-0 text-xs\"></i>\n                                        <span>使用清晰、简洁的标签文本</span>\n                                    </li>\n                                    <li class=\"flex items-start\">\n                                        <i\n                                            class=\"icon-[carbon--dot-mark] text-green-500 dark:text-green-400 mt-1.5 mr-2 flex-shrink-0 text-xs\"></i>\n                                        <span>为不同状态的节点使用不同颜色</span>\n                                    </li>\n                                    <li class=\"flex items-start\">\n                                        <i\n                                            class=\"icon-[carbon--dot-mark] text-green-500 dark:text-green-400 mt-1.5 mr-2 flex-shrink-0 text-xs\"></i>\n                                        <span>保持内容区域的视觉整洁</span>\n                                    </li>\n                                    <li class=\"flex items-start\">\n                                        <i\n                                            class=\"icon-[carbon--dot-mark] text-green-500 dark:text-green-400 mt-1.5 mr-2 flex-shrink-0 text-xs\"></i>\n                                        <span>使用恰当的图标增强信息传达</span>\n                                    </li>\n                                    <li class=\"flex items-start\">\n                                        <i\n                                            class=\"icon-[carbon--dot-mark] text-green-500 dark:text-green-400 mt-1.5 mr-2 flex-shrink-0 text-xs\"></i>\n                                        <span>确保时间或事件顺序的逻辑性</span>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                        <div\n                            class=\"border dark:border-gray-700 rounded-lg overflow-hidden shadow-sm hover:shadow-md transition-all duration-300\">\n                            <div\n                                class=\"bg-red-50 dark:bg-red-900/20 p-3 border-b dark:border-gray-700 flex items-center\">\n                                <i class=\"icon-[carbon--close-filled] text-red-500 dark:text-red-400 mr-2\"></i>\n                                <h4 class=\"text-red-600 dark:text-red-400 font-medium\">避免用法</h4>\n                            </div>\n                            <div class=\"p-4 bg-white dark:bg-gray-800\">\n                                <ul class=\"space-y-2 text-gray-600 dark:text-gray-300\">\n                                    <li class=\"flex items-start\">\n                                        <i\n                                            class=\"icon-[carbon--dot-mark] text-red-500 dark:text-red-400 mt-1.5 mr-2 flex-shrink-0 text-xs\"></i>\n                                        <span>在单个时间轴中混合使用多种模式</span>\n                                    </li>\n                                    <li class=\"flex items-start\">\n                                        <i\n                                            class=\"icon-[carbon--dot-mark] text-red-500 dark:text-red-400 mt-1.5 mr-2 flex-shrink-0 text-xs\"></i>\n                                        <span>在内容区域放置过于复杂的组件</span>\n                                    </li>\n                                    <li class=\"flex items-start\">\n                                        <i\n                                            class=\"icon-[carbon--dot-mark] text-red-500 dark:text-red-400 mt-1.5 mr-2 flex-shrink-0 text-xs\"></i>\n                                        <span>标签文字过长导致溢出或换行</span>\n                                    </li>\n                                    <li class=\"flex items-start\">\n                                        <i\n                                            class=\"icon-[carbon--dot-mark] text-red-500 dark:text-red-400 mt-1.5 mr-2 flex-shrink-0 text-xs\"></i>\n                                        <span>使用过多相似颜色导致区分困难</span>\n                                    </li>\n                                    <li class=\"flex items-start\">\n                                        <i\n                                            class=\"icon-[carbon--dot-mark] text-red-500 dark:text-red-400 mt-1.5 mr-2 flex-shrink-0 text-xs\"></i>\n                                        <span>没有考虑移动设备上的显示效果</span>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n\n        <!-- 新增：API 文档 -->\n        <section class=\"mb-12\">\n            <h2 class=\"text-xl font-semibold mb-4 text-gray-700 dark:text-gray-200 transition-colors duration-300\">\n                API 文档\n            </h2>\n            <div class=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md transition-all duration-300\">\n                <div class=\"max-w-none\">\n                    <div class=\"mb-8\">\n                        <div class=\"flex items-center mb-4\">\n                            <span\n                                class=\"text-blue-500 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-md px-2 py-1 text-sm font-medium mr-2\">组件</span>\n                            <h3 class=\"text-lg font-semibold text-gray-800 dark:text-gray-100\">Timeline 时间轴</h3>\n                        </div>\n                        <p\n                            class=\"text-gray-600 dark:text-gray-300 mb-4 border-b border-gray-100 dark:border-gray-700 pb-4\">\n                            用于展示垂直的时间轴流程，支持自定义节点和内容。\n                        </p>\n\n                        <h4 class=\"font-medium text-gray-700 dark:text-gray-200 mb-3 mt-4 flex items-center\">\n                            <i class=\"icon-[carbon--code] mr-2 text-blue-500 dark:text-blue-400\"></i>属性\n                        </h4>\n                        <div class=\"overflow-x-auto bg-gray-50 dark:bg-gray-900/40 rounded-lg mb-6\">\n                            <table class=\"min-w-full text-sm\">\n                                <thead>\n                                    <tr class=\"bg-gray-100 dark:bg-gray-800\">\n                                        <th\n                                            class=\"py-3 px-4 text-left font-medium text-gray-700 dark:text-gray-200 border-b dark:border-gray-700\">\n                                            参数</th>\n                                        <th\n                                            class=\"py-3 px-4 text-left font-medium text-gray-700 dark:text-gray-200 border-b dark:border-gray-700\">\n                                            说明</th>\n                                        <th\n                                            class=\"py-3 px-4 text-left font-medium text-gray-700 dark:text-gray-200 border-b dark:border-gray-700\">\n                                            类型</th>\n                                        <th\n                                            class=\"py-3 px-4 text-left font-medium text-gray-700 dark:text-gray-200 border-b dark:border-gray-700\">\n                                            默认值</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr\n                                        class=\"hover:bg-gray-100 dark:hover:bg-gray-800/60 transition-colors duration-200\">\n                                        <td\n                                            class=\"py-3 px-4 text-blue-600 dark:text-blue-400 font-medium border-b dark:border-gray-700/50\">\n                                            mode</td>\n                                        <td\n                                            class=\"py-3 px-4 text-gray-600 dark:text-gray-300 border-b dark:border-gray-700/50\">\n                                            时间轴的展示模式</td>\n                                        <td class=\"py-3 px-4 border-b dark:border-gray-700/50\"><code\n                                                class=\"bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-pink-600 dark:text-pink-400 font-mono text-xs\">'left'\n                                        | 'right' | 'alternate'</code></td>\n                                        <td class=\"py-3 px-4 border-b dark:border-gray-700/50\"><code\n                                                class=\"bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-orange-600 dark:text-orange-400 font-mono text-xs\">'left'</code>\n                                        </td>\n                                    </tr>\n                                    <tr\n                                        class=\"hover:bg-gray-100 dark:hover:bg-gray-800/60 transition-colors duration-200\">\n                                        <td\n                                            class=\"py-3 px-4 text-blue-600 dark:text-blue-400 font-medium border-b dark:border-gray-700/50\">\n                                            pending</td>\n                                        <td\n                                            class=\"py-3 px-4 text-gray-600 dark:text-gray-300 border-b dark:border-gray-700/50\">\n                                            是否展示幽灵节点，或要展示的内容</td>\n                                        <td class=\"py-3 px-4 border-b dark:border-gray-700/50\"><code\n                                                class=\"bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-pink-600 dark:text-pink-400 font-mono text-xs\">boolean\n                                        | string | VNode</code></td>\n                                        <td class=\"py-3 px-4 border-b dark:border-gray-700/50\"><code\n                                                class=\"bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-orange-600 dark:text-orange-400 font-mono text-xs\">false</code>\n                                        </td>\n                                    </tr>\n                                    <tr\n                                        class=\"hover:bg-gray-100 dark:hover:bg-gray-800/60 transition-colors duration-200\">\n                                        <td\n                                            class=\"py-3 px-4 text-blue-600 dark:text-blue-400 font-medium border-b dark:border-gray-700/50\">\n                                            pendingDot</td>\n                                        <td\n                                            class=\"py-3 px-4 text-gray-600 dark:text-gray-300 border-b dark:border-gray-700/50\">\n                                            幽灵节点的图点</td>\n                                        <td class=\"py-3 px-4 border-b dark:border-gray-700/50\"><code\n                                                class=\"bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-pink-600 dark:text-pink-400 font-mono text-xs\">string\n                                        | VNode</code></td>\n                                        <td class=\"py-3 px-4 border-b dark:border-gray-700/50\"><code\n                                                class=\"bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-orange-600 dark:text-orange-400 font-mono text-xs\">默认加载图标</code>\n                                        </td>\n                                    </tr>\n                                    <tr\n                                        class=\"hover:bg-gray-100 dark:hover:bg-gray-800/60 transition-colors duration-200\">\n                                        <td class=\"py-3 px-4 text-blue-600 dark:text-blue-400 font-medium\">reverse</td>\n                                        <td class=\"py-3 px-4 text-gray-600 dark:text-gray-300\">是否倒序排列</td>\n                                        <td class=\"py-3 px-4\"><code\n                                                class=\"bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-pink-600 dark:text-pink-400 font-mono text-xs\">boolean</code>\n                                        </td>\n                                        <td class=\"py-3 px-4\"><code\n                                                class=\"bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-orange-600 dark:text-orange-400 font-mono text-xs\">false</code>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n\n                    <div>\n                        <div class=\"flex items-center mb-4\">\n                            <span\n                                class=\"text-green-500 dark:text-green-400 bg-green-50 dark:bg-green-900/20 rounded-md px-2 py-1 text-sm font-medium mr-2\">组件</span>\n                            <h3 class=\"text-lg font-semibold text-gray-800 dark:text-gray-100\">TimelineItem 时间轴项</h3>\n                        </div>\n                        <p\n                            class=\"text-gray-600 dark:text-gray-300 mb-4 border-b border-gray-100 dark:border-gray-700 pb-4\">\n                            时间轴的单个节点，用于展示具体内容。\n                        </p>\n\n                        <h4 class=\"font-medium text-gray-700 dark:text-gray-200 mb-3 mt-4 flex items-center\">\n                            <i class=\"icon-[carbon--code] mr-2 text-blue-500 dark:text-blue-400\"></i>属性\n                        </h4>\n                        <div class=\"overflow-x-auto bg-gray-50 dark:bg-gray-900/40 rounded-lg mb-6\">\n                            <table class=\"min-w-full text-sm\">\n                                <thead>\n                                    <tr class=\"bg-gray-100 dark:bg-gray-800\">\n                                        <th\n                                            class=\"py-3 px-4 text-left font-medium text-gray-700 dark:text-gray-200 border-b dark:border-gray-700\">\n                                            参数</th>\n                                        <th\n                                            class=\"py-3 px-4 text左 font-medium text-gray-700 dark:text-gray-200 border-b dark:border-gray-700\">\n                                            说明</th>\n                                        <th\n                                            class=\"py-3 px-4 text-left font-medium text-gray-700 dark:text-gray-200 border-b dark:border-gray-700\">\n                                            类型</th>\n                                        <th\n                                            class=\"py-3 px-4 text-left font-medium text-gray-700 dark:text-gray-200 border-b dark:border-gray-700\">\n                                            默认值</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr\n                                        class=\"hover:bg-gray-100 dark:hover:bg-gray-800/60 transition-colors duration-200\">\n                                        <td\n                                            class=\"py-3 px-4 text-blue-600 dark:text-blue-400 font-medium border-b dark:border-gray-700/50\">\n                                            color</td>\n                                        <td\n                                            class=\"py-3 px-4 text-gray-600 dark:text-gray-300 border-b dark:border-gray-700/50\">\n                                            节点颜色</td>\n                                        <td class=\"py-3 px-4 border-b dark:border-gray-700/50\"><code\n                                                class=\"bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-pink-600 dark:text-pink-400 font-mono text-xs\">'blue'\n                                        | 'red' | 'green' | string</code></td>\n                                        <td class=\"py-3 px-4 border-b dark:border-gray-700/50\"><code\n                                                class=\"bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-orange-600 dark:text-orange-400 font-mono text-xs\">'blue'</code>\n                                        </td>\n                                    </tr>\n                                    <tr\n                                        class=\"hover:bg-gray-100 dark:hover:bg-gray-800/60 transition-colors duration-200\">\n                                        <td\n                                            class=\"py-3 px-4 text-blue-600 dark:text-blue-400 font-medium border-b dark:border-gray-700/50\">\n                                            dot</td>\n                                        <td\n                                            class=\"py-3 px-4 text-gray-600 dark:text-gray-300 border-b dark:border-gray-700/50\">\n                                            自定义时间轴点</td>\n                                        <td class=\"py-3 px-4 border-b dark:border-gray-700/50\"><code\n                                                class=\"bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-pink-600 dark:text-pink-400 font-mono text-xs\">string\n                                        | VNode</code></td>\n                                        <td class=\"py-3 px-4 border-b dark:border-gray-700/50\"><code\n                                                class=\"bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-orange-600 dark:text-orange-400 font-mono text-xs\">默认圆点</code>\n                                        </td>\n                                    </tr>\n                                    <tr\n                                        class=\"hover:bg-gray-100 dark:hover:bg-gray-800/60 transition-colors duration-200\">\n                                        <td\n                                            class=\"py-3 px-4 text-blue-600 dark:text-blue-400 font-medium border-b dark:border-gray-700/50\">\n                                            label</td>\n                                        <td\n                                            class=\"py-3 px-4 text-gray-600 dark:text-gray-300 border-b dark:border-gray-700/50\">\n                                            标签文本</td>\n                                        <td class=\"py-3 px-4 border-b dark:border-gray-700/50\"><code\n                                                class=\"bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-pink-600 dark:text-pink-400 font-mono text-xs\">string\n                                        | VNode</code></td>\n                                        <td class=\"py-3 px-4 border-b dark:border-gray-700/50\"><code\n                                                class=\"bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-orange-600 dark:text-orange-400 font-mono text-xs\">-</code>\n                                        </td>\n                                    </tr>\n                                    <tr\n                                        class=\"hover:bg-gray-100 dark:hover:bg-gray-800/60 transition-colors duration-200\">\n                                        <td class=\"py-3 px-4 text-blue-600 dark:text-blue-400 font-medium\">position</td>\n                                        <td class=\"py-3 px-4 text-gray-600 dark:text-gray-300\">\n                                            自定义节点位置，优先级高于Timeline的mode</td>\n                                        <td class=\"py-3 px-4\"><code\n                                                class=\"bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-pink-600 dark:text-pink-400 font-mono text-xs\">'left'\n                                        | 'right'</code></td>\n                                        <td class=\"py-3 px-4\"><code\n                                                class=\"bg-gray-100 dark:bg-gray-800 px-1.5 py-0.5 rounded text-orange-600 dark:text-orange-400 font-mono text-xs\">-</code>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n\n                        <h4 class=\"font-medium text-gray-700 dark:text-gray-200 mb-3 mt-4 flex items-center\">\n                            <i class=\"icon-[carbon--terminal] mr-2 text-blue-500 dark:text-blue-400\"></i>插槽\n                        </h4>\n                        <div class=\"overflow-x-auto bg-gray-50 dark:bg-gray-900/40 rounded-lg mb-6\">\n                            <table class=\"min-w-full text-sm\">\n                                <thead>\n                                    <tr class=\"bg-gray-100 dark:bg-gray-800\">\n                                        <th\n                                            class=\"py-3 px-4 text-left font-medium text-gray-700 dark:text-gray-200 border-b dark:border-gray-700\">\n                                            名称</th>\n                                        <th\n                                            class=\"py-3 px-4 text-left font-medium text-gray-700 dark:text-gray-200 border-b dark:border-gray-700\">\n                                            说明</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr\n                                        class=\"hover:bg-gray-100 dark:hover:bg-gray-800/60 transition-colors duration-200\">\n                                        <td\n                                            class=\"py-3 px-4 text-blue-600 dark:text-blue-400 font-medium border-b dark:border-gray-700/50\">\n                                            default</td>\n                                        <td\n                                            class=\"py-3 px-4 text-gray-600 dark:text-gray-300 border-b dark:border-gray-700/50\">\n                                            时间轴项的内容</td>\n                                    </tr>\n                                    <tr\n                                        class=\"hover:bg-gray-100 dark:hover:bg-gray-800/60 transition-colors duration-200\">\n                                        <td class=\"py-3 px-4 text-blue-600 dark:text-blue-400 font-medium\">dot</td>\n                                        <td class=\"py-3 px-4 text-gray-600 dark:text-gray-300\">自定义时间轴节点</td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n\n                        <div class=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 mt-6 flex items-start shadow-sm\">\n                            <i\n                                class=\"icon-[carbon--information] text-blue-500 dark:text-blue-400 mt-1 mr-3 flex-shrink-0\"></i>\n                            <div>\n                                <h4 class=\"text-blue-600 dark:text-blue-400 font-medium mb-1\">提示</h4>\n                                <p class=\"text-gray-600 dark:text-gray-300 text-sm leading-relaxed\">\n                                    Timeline 组件在各种模式下都会自动适应父容器宽度。在响应式布局中，推荐使用 left 模式以获得最佳的移动端体验。\n                                    使用 alternate 模式时，需要确保有足够的空间展示双侧内容。\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, reactive, computed, onMounted } from 'vue';\nimport { Timeline, TimelineItem } from './Timeline';\n\n// 倒序排列示例 - 增加key来强制重新渲染\nconst reverseTimeline = ref(false);\nconst reverseTimelineKey = ref(0);\n\n// 切换倒序并强制重新渲染\nfunction toggleReverseTimeline() {\n    reverseTimeline.value = !reverseTimeline.value;\n    reverseTimelineKey.value++; // 增加key触发重新渲染\n\n    // 重要：使用setTimeout来确保状态更新后DOM才更新\n    setTimeout(() => {\n        // 可选：触发一个额外的更新以确保视图刷新\n        reverseTimelineKey.value = reverseTimelineKey.value;\n    }, 50);\n}\n\n// 进行中状态示例\nconst pendingText = \"正在处理中...\";\n\n// 交互式时间轴示例 - 添加强制更新key\nconst interactiveUpdateKey = ref(0);\n\ninterface TimelineItemData {\n    id: number;\n    title: string;\n    content: string;\n    date: string;\n    color: string;\n    expanded: boolean;\n    timestamp: number;\n}\n\nconst interactiveItems = [\n    {\n        title: \"项目启动\",\n        content: \"项目正式启动，团队组建完成。定义了项目目标、范围和主要里程碑，组建了核心开发团队和确定了项目管理方法。\",\n        date: \"第一阶段\",\n        color: \"blue\"\n    },\n    {\n        title: \"需求分析\",\n        content: \"进行需求分析和用户调研，确定产品功能优先级和技术方案。收集了市场反馈和进行了竞争对手分析，形成了详细的产品需求文档。\",\n        date: \"第二阶段\",\n        color: \"green\"\n    },\n    {\n        title: \"设计阶段\",\n        content: \"完成UI设计和交互方案，构建产品原型和用户体验流程。进行了多轮用户测试并根据反馈调整设计方案，最终确定了视觉风格指南。\",\n        date: \"第三阶段\",\n        color: \"purple\"\n    },\n    {\n        title: \"开发阶段\",\n        content: \"代码开发和功能实现，进行单元测试和集成测试。建立了CI/CD流程，实现了核心功能模块并进行了初步性能优化。\",\n        date: \"第四阶段\",\n        color: \"orange\"\n    },\n    {\n        title: \"测试阶段\",\n        content: \"进行全面测试和bug修复，确保产品质量和用户体验。包括功能测试、兼容性测试、安全测试和性能测试，解决了关键问题并准备发布。\",\n        date: \"第五阶段\",\n        color: \"red\"\n    }\n];\n\nconst currentItems = reactive<TimelineItemData[]>([]);\nlet idCounter = 1;\n\n// 排序和展开/折叠功能\nconst enableSorting = ref(false);\nconst allExpanded = computed(() => {\n    return currentItems.length > 0 && currentItems.every(item => item.expanded);\n});\n\n// 切换所有项目的展开/折叠状态 - 修复更新问题\nfunction toggleExpand() {\n    const newState = !allExpanded.value;\n    currentItems.forEach(item => {\n        item.expanded = newState;\n    });\n    // 强制重新渲染\n    interactiveUpdateKey.value++;\n}\n\n// 移动项目位置 - 修复更新问题\nfunction moveItem(fromIndex: number, toIndex: number) {\n    if (toIndex < 0 || toIndex >= currentItems.length) return;\n\n    const item = currentItems.splice(fromIndex, 1)[0];\n    currentItems.splice(toIndex, 0, item);\n\n    // 强制重新渲染\n    interactiveUpdateKey.value++;\n}\n\n// 添加ref以便直接操作timeline实例\nconst interactiveTimelineRef = ref(null);\n\n// 修改添加时间线项目的函数，确保正确显示\nfunction addTimelineItem(index: number) {\n    const item = interactiveItems[index];\n    const newItem: TimelineItemData = {\n        id: idCounter++,\n        title: item.title,\n        content: item.content,\n        date: item.date,\n        color: item.color,\n        expanded: true,\n        timestamp: Date.now()\n    };\n\n    // 添加项目到数组\n    currentItems.push(newItem);\n\n    // 使用更可靠的更新方法\n    setTimeout(() => {\n        // 强制重新渲染时间轴\n        interactiveUpdateKey.value++;\n\n        // 确保视觉反馈\n        setTimeout(() => {\n            // 滚动到新添加的项目\n            const container = document.querySelector('.interactive-timeline-container');\n            if (container) {\n                container.scrollIntoView({ behavior: 'smooth', block: 'end' });\n            }\n        }, 100);\n    }, 0);\n}\n\n// 切换单个项目的展开/折叠状态\nfunction toggleItemExpand(item: TimelineItemData) {\n    item.expanded = !item.expanded;\n    // 强制重新渲染\n    interactiveUpdateKey.value++;\n}\n\n// 删除单个时间轴项目 - 修复更新问题\nfunction removeTimelineItem(index: number) {\n    currentItems.splice(index, 1);\n    // 强制重新渲染\n    interactiveUpdateKey.value++;\n}\n\n// 清空所有时间轴项目 - 修复更新问题\nfunction clearTimelineItems() {\n    currentItems.splice(0, currentItems.length);\n    // 强制重新渲染\n    interactiveUpdateKey.value++;\n}\n\n// 格式化日期\nfunction formatDate(timestamp: number) {\n    return new Date(timestamp).toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n    });\n}\n\n// 获取项目图标\nfunction getItemIcon(color: string) {\n    const iconMap: Record<string, string> = {\n        'blue': 'rocket',\n        'green': 'document-add',\n        'red': 'warning',\n        'purple': 'brush',\n        'orange': 'code'\n    };\n\n    return iconMap[color] || 'dot-mark';\n}\n\n// 获取项目徽章样式\nfunction getItemBadgeClass(color: string) {\n    const classMap: Record<string, string> = {\n        'blue': 'bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400',\n        'green': 'bg-green-100 dark:bg-green-900/30 text-green-600 dark:text-green-400',\n        'red': 'bg-red-100 dark:bg-red-900/30 text-red-600 dark:text-red-400',\n        'purple': 'bg-purple-100 dark:bg-purple-900/30 text-purple-600 dark:text-purple-400',\n        'orange': 'bg-orange-100 dark:bg-orange-900/30 text-orange-600 dark:text-orange-400'\n    };\n\n    return classMap[color] || 'bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400';\n}\n\n// 进度条示例\nconst progressValue = ref(35);\n\nfunction updateProgress() {\n    progressValue.value = Math.min(100, progressValue.value + 15);\n    if (progressValue.value >= 100) {\n        setTimeout(() => {\n            progressValue.value = 0;\n        }, 1000);\n    }\n}\n\n// 辅助函数\nfunction getItemColorClass(color: string) {\n    const colorMap: Record<string, string> = {\n        'blue': 'bg-blue-50 dark:bg-blue-900/20',\n        'green': 'bg-green-50 dark:bg-green-900/20',\n        'red': 'bg-red-50 dark:bg-red-900/20',\n        'purple': 'bg-purple-50 dark:bg-purple-900/20',\n        'orange': 'bg-orange-50 dark:bg-orange-900/20'\n    };\n\n    return colorMap[color] || 'bg-gray-50 dark:bg-gray-900/20';\n}\n\nfunction getItemTextClass(color: string) {\n    const colorMap: Record<string, string> = {\n        'blue': 'text-blue-600 dark:text-blue-400',\n        'green': 'text-green-600 dark:text-green-400',\n        'red': 'text-red-600 dark:text-red-400',\n        'purple': 'text-purple-600 dark:text-purple-400',\n        'orange': 'text-orange-600 dark:text-orange-400'\n    };\n\n    return colorMap[color] || 'text-gray-600 dark:text-gray-400';\n}\n\n// 初始化一些演示数据\nonMounted(() => {\n    // 清空现有项目，确保从干净状态开始\n    currentItems.splice(0, currentItems.length);\n\n    // 在短暂延迟后添加初始项目\n    setTimeout(() => {\n        addTimelineItem(0);\n        setTimeout(() => {\n            addTimelineItem(1);\n        }, 300);\n    }, 100);\n});\n\n// 重构交互式时间轴逻辑\nconst reRenderKey = ref(0);\n\n// 处理函数 - 使用箭头函数避免this绑定问题\nconst handleAddItem = (index: number) => {\n    const item = interactiveItems[index];\n    const newItem: TimelineItemData = {\n        id: idCounter++,\n        title: item.title,\n        content: item.content,\n        date: item.date,\n        color: item.color,\n        expanded: true,\n        timestamp: Date.now()\n    };\n\n    // 添加到数组\n    currentItems.push(newItem);\n\n    // 强制重新渲染\n    forceRerender();\n};\n\nconst handleRemoveItem = (index: number) => {\n    currentItems.splice(index, 1);\n    forceRerender();\n};\n\nconst handleClearItems = () => {\n    currentItems.splice(0, currentItems.length);\n    forceRerender();\n};\n\nconst handleMoveItem = (fromIndex: number, toIndex: number) => {\n    if (toIndex < 0 || toIndex >= currentItems.length) return;\n\n    const item = currentItems.splice(fromIndex, 1)[0];\n    currentItems.splice(toIndex, 0, item);\n\n    forceRerender();\n};\n\nconst handleToggleExpand = (item: TimelineItemData) => {\n    item.expanded = !item.expanded;\n    forceRerender();\n};\n\nconst handleToggleAllExpand = () => {\n    const newState = !allExpanded.value;\n    currentItems.forEach(item => {\n        item.expanded = newState;\n    });\n    forceRerender();\n};\n\n// 强制重新渲染\nconst forceRerender = () => {\n    reRenderKey.value++;\n};\n\n// 初始化\nonMounted(() => {\n    // 确保初始状态是空的\n    currentItems.splice(0, currentItems.length);\n\n    // 添加测试数据\n    setTimeout(() => {\n        handleAddItem(0);\n        setTimeout(() => {\n            handleAddItem(1);\n        }, 300);\n    }, 100);\n});\n</script>\n\n<style scoped>\n/* 过渡动画 */\n.timeline-list-enter-active,\n.timeline-list-leave-active {\n    transition: all 0.5s ease;\n}\n\n.timeline-list-enter-from {\n    opacity: 0;\n    transform: translateY(30px);\n}\n\n.timeline-list-leave-to {\n    opacity: 0;\n    transform: translateY(-30px);\n}\n\n/* Transform hover 效果 */\n.transform.hover\\:scale-105:hover {\n    transform: scale(1.05);\n}\n\n/* 添加自定义动画类 */\n.animated-item {\n    animation-duration: 0.5s;\n    animation-fill-mode: both;\n}\n\n.fade-in {\n    animation-name: fadeIn;\n}\n\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* 为移除项添加动画 */\n.animated-item.leaving {\n    animation-name: fadeOut;\n}\n\n@keyframes fadeOut {\n    from {\n        opacity: 1;\n        transform: translateY(0);\n    }\n\n    to {\n        opacity: 0;\n        transform: translateY(-20px);\n    }\n}\n\n/* 增强动画效果 */\n.animated-item {\n    animation-duration: 0.5s;\n    animation-fill-mode: both;\n    transition: transform 0.3s ease, opacity 0.3s ease;\n}\n\n.timeline-list-enter-active {\n    animation: fadeIn 0.5s ease;\n}\n\n.timeline-list-leave-active {\n    animation: fadeOut 0.5s ease;\n    position: absolute;\n    width: 100%;\n}\n\n.timeline-list-move {\n    transition: transform 0.5s ease;\n}\n\n/* 添加特定样式确保交互式时间轴项目正确显示 */\n.interactive-timeline-item {\n    animation-name: fadeInItem;\n    animation-duration: 0.5s;\n    animation-fill-mode: both;\n    margin-bottom: 1.5rem;\n}\n\n@keyframes fadeInItem {\n    from {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* 确保内容区域有足够的空间和正确的布局 */\n:deep(.timeline-item-content) {\n    min-height: 50px;\n    position: relative;\n    z-index: 5;\n}\n\n/* 确保时间线的连接线显示正确 */\n:deep(.timeline[data-mode=\"left\"]::before) {\n    background-color: #e2e8f0;\n    top: 16px;\n    bottom: 16px;\n    height: calc(100% - 32px);\n}\n\n:deep(.dark .timeline[data-mode=\"left\"]::before) {\n    background-color: #374151;\n}\n\n/* 在每个项目之间添加更明显的分隔 */\n:deep(.timeline-item:not(:last-child)) {\n    border-bottom: none;\n}\n\n/* 添加特定样式增强倒序时间轴展示效果 */\n.order-timeline-container {\n    position: relative;\n    transition: all 0.5s ease-in-out;\n}\n\n.timeline-year-item {\n    transition: all 0.4s ease-in-out;\n}\n\n.timeline-year-item:hover>div {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n\n/* 确保交互式时间轴项目在添加后正确显示 */\n.interactive-timeline-item {\n    opacity: 1 !important;\n    transform: translateY(0) !important;\n    display: block !important;\n    visibility: visible !important;\n}\n\n/* 修复时间轴项目内容区域样式 */\n:deep(.timeline-item-content) {\n    display: block !important;\n    min-height: 50px !important;\n    width: 100% !important;\n    max-width: 100% !important;\n    position: relative !important;\n    z-index: 5 !important;\n}\n\n/* 确保交互式时间轴正确显示 */\n.interactive-timeline-container {\n    position: relative;\n    min-height: 200px;\n}\n\n/* 手动实现Timeline样式 */\n.timeline-wrapper {\n    position: relative;\n}\n\n.timeline-wrapper::before {\n    content: '';\n    position: absolute;\n    left: 16px;\n    top: 0;\n    bottom: 0;\n    width: 2px;\n    background-color: #e2e8f0;\n    z-index: 1;\n}\n\n.dark .timeline-wrapper::before {\n    background-color: #374151;\n}\n\n.timeline-item-head {\n    width: 32px;\n    height: 32px;\n    background-color: white;\n    border-radius: 50%;\n}\n\n.dark .timeline-item-head {\n    background-color: #1f2937;\n}\n\n.static-timeline-container {\n    position: relative;\n    min-height: 200px;\n}\n\n/* 添加进入/离开动画 */\n.timeline-item-wrapper {\n    animation: fadeIn 0.5s ease-out;\n}\n\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* 更新交互式时间轴中的标签样式 */\n.timeline-wrapper .timeline-label {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    min-width: 80px;\n    max-width: 150px;\n    font-weight: 500;\n    transition: color 0.3s ease;\n}\n\n/* 对于手动实现的时间轴，确保标签有固定宽度和对齐方式 */\n.timeline-item-wrapper .timeline-label {\n    min-width: 80px;\n    max-width: 150px;\n    width: 100px;\n    /* 固定宽度使布局更整齐 */\n    text-align: right;\n}\n\n/* 为手动实现的时间轴项添加更好的间距 */\n.timeline-item-wrapper {\n    margin-bottom: 1.5rem;\n    position: relative;\n}\n\n.timeline-item-wrapper:last-child {\n    margin-bottom: 0;\n}\n\n/* 优化时间轴项布局使标签对齐 */\n.timeline-item-wrapper .timeline-item {\n    display: flex;\n    align-items: flex-start;\n}\n\n/* 为每个时间点和内容区添加统一的垂直对齐 */\n.timeline-item-wrapper .timeline-item-head,\n.timeline-item-wrapper .timeline-label {\n    margin-top: 0.5rem;\n}\n\n/* 修改时间线条样式，支持hover高亮 */\n.timeline-wrapper::before {\n    content: '';\n    position: absolute;\n    left: 16px;\n    top: 0;\n    bottom: 0;\n    width: 2px;\n    background-color: #e2e8f0;\n    z-index: 1;\n    transition: background-color 0.3s ease;\n}\n\n.dark .timeline-wrapper::before {\n    background-color: #374151;\n}\n\n/* 为每个节点单独添加时间线，方便hover高亮 */\n.timeline-item-wrapper::before {\n    content: '';\n    position: absolute;\n    left: 16px;\n    top: 0;\n    height: 100%;\n    width: 2px;\n    background-color: #e2e8f0;\n    z-index: 1;\n    transition: all 0.3s ease;\n}\n\n.dark .timeline-item-wrapper::before {\n    background-color: #374151;\n}\n\n.timeline-item-wrapper:hover::before {\n    background-color: #3b82f6;\n    width: 3px;\n}\n\n.dark .timeline-item-wrapper:hover::before {\n    background-color: #60a5fa;\n}\n\n/* 添加节点hover效果 */\n.timeline-item-wrapper:hover .timeline-item-head {\n    box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.2);\n}\n\n.dark .timeline-item-wrapper:hover .timeline-item-head {\n    box-shadow: 0 0 0 4px rgba(96, 165, 250, 0.2);\n}\n\n/* 添加内容hover效果 */\n.timeline-item-wrapper:hover .timeline-item-content>div {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n</style>\n"],"names":["TimelineSymbol","Symbol","TimelineItem","defineComponent","name","props","color","type","String","default","dot","Object","undefined","label","position","setup","slots","timelineContext","inject","mode","ref","reverse","currentIndex","itemCount","itemPosition","computed","value","getColorClass","blue","red","green","dotStyle","backgroundColor","isFirst","isLast","dotEl","_createVNode","labelEl","Timeline","validator","val","includes","pending","Boolean","pendingDot","modeRef","reverseRef","forceUpdate","watch","newVal","immediate","setTimeout","provide","pendingNode","getItems","filteredItems","filter","item","length","orderedItems","itemsWithKeysAndWrapper","map","index","h","key","children","pendingNodeWithKey","pendingNodeWithWrapper","result","unshift","push","timelineItems","toString","timelineStyles","styleEl","document","createElement","innerHTML","head","appendChild","Timeline$1","pendingText","reverseTimeline","reverseTimelineKey","toggleReverseTimeline","interactiveUpdateKey","interactiveItems","currentItems","reactive","idCounter","enableSorting","allExpanded","addTimelineItem","newItem","container","formatDate","timestamp","getItemIcon","getItemBadgeClass","progressValue","updateProgress","getItemColorClass","getItemTextClass","onMounted","reRenderKey","handleAddItem","forceRerender","handleRemoveItem","handleClearItems","handleMoveItem","fromIndex","toIndex","handleToggleExpand","handleToggleAllExpand","newState"],"mappings":"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"}