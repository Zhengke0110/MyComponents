{"version":3,"file":"index-DUWwW5K6.js","sources":["../../src/libs/Tab/config.ts","../../src/libs/Tab/Tab.tsx","../../src/libs/Tab/View.vue"],"sourcesContent":["// 所有可用的颜色类型\nexport type ColorType =\n    | 'slate' | 'gray' | 'zinc' | 'neutral' | 'stone'  // 灰色系\n    | 'red' | 'orange' | 'amber' | 'yellow'            // 暖色系\n    | 'lime' | 'green' | 'emerald' | 'teal'            // 绿色系\n    | 'cyan' | 'sky' | 'blue' | 'indigo'               // 蓝色系\n    | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose'; // 紫粉色系\n\n// 常用的主题色类型 (用于简化部分组件的类型定义)\nexport type ThemeColorType = 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | 'info';\n\n// 主题色对应的实际颜色\nexport const THEME_COLOR_MAP: Record<ThemeColorType, ColorType> = {\n    primary: 'indigo',\n    secondary: 'gray',\n    success: 'green',\n    warning: 'yellow',\n    danger: 'red',\n    info: 'blue'\n};\n\n// 边框颜色映射表\nexport const borderColorMap: Record<ColorType, string> = {\n    slate: \"border-slate-500 dark:border-slate-400\",\n    gray: \"border-gray-500 dark:border-gray-400\",\n    zinc: \"border-zinc-500 dark:border-zinc-400\",\n    neutral: \"border-neutral-500 dark:border-neutral-400\",\n    stone: \"border-stone-500 dark:border-stone-400\",\n    red: \"border-red-500 dark:border-red-400\",\n    orange: \"border-orange-500 dark:border-orange-400\",\n    amber: \"border-amber-500 dark:border-amber-400\",\n    yellow: \"border-yellow-500 dark:border-yellow-400\",\n    lime: \"border-lime-500 dark:border-lime-400\",\n    green: \"border-green-500 dark:border-green-400\",\n    emerald: \"border-emerald-500 dark:border-emerald-400\",\n    teal: \"border-teal-500 dark:border-teal-400\",\n    cyan: \"border-cyan-500 dark:border-cyan-400\",\n    sky: \"border-sky-500 dark:border-sky-400\",\n    blue: \"border-blue-500 dark:border-blue-400\",\n    indigo: \"border-indigo-500 dark:border-indigo-400\",\n    violet: \"border-violet-500 dark:border-violet-400\",\n    purple: \"border-purple-500 dark:border-purple-400\",\n    fuchsia: \"border-fuchsia-500 dark:border-fuchsia-400\",\n    pink: \"border-pink-500 dark:border-pink-400\",\n    rose: \"border-rose-500 dark:border-rose-400\",\n};\n\n// 文本颜色映射表\nexport const textColorMap: Record<ColorType, string> = {\n    slate: \"text-slate-600 dark:text-slate-300\",\n    gray: \"text-gray-600 dark:text-gray-300\",\n    zinc: \"text-zinc-600 dark:text-zinc-300\",\n    neutral: \"text-neutral-600 dark:text-neutral-300\",\n    stone: \"text-stone-600 dark:text-stone-300\",\n    red: \"text-red-600 dark:text-red-300\",\n    orange: \"text-orange-600 dark:text-orange-300\",\n    amber: \"text-amber-600 dark:text-amber-300\",\n    yellow: \"text-yellow-600 dark:text-yellow-300\",\n    lime: \"text-lime-600 dark:text-lime-300\",\n    green: \"text-green-600 dark:text-green-300\",\n    emerald: \"text-emerald-600 dark:text-emerald-300\",\n    teal: \"text-teal-600 dark:text-teal-300\",\n    cyan: \"text-cyan-600 dark:text-cyan-300\",\n    sky: \"text-sky-600 dark:text-sky-300\",\n    blue: \"text-blue-600 dark:text-blue-300\",\n    indigo: \"text-indigo-600 dark:text-indigo-300\",\n    violet: \"text-violet-600 dark:text-violet-300\",\n    purple: \"text-purple-600 dark:text-purple-300\",\n    fuchsia: \"text-fuchsia-600 dark:text-fuchsia-300\",\n    pink: \"text-pink-600 dark:text-pink-300\",\n    rose: \"text-rose-600 dark:text-rose-300\",\n};\n\n// 鼠标悬停边框颜色映射表\nexport const hoverBorderMap: Record<ColorType, string> = {\n    slate: \"hover:border-slate-300 dark:hover:border-slate-500\",\n    gray: \"hover:border-gray-300 dark:hover:border-gray-500\",\n    zinc: \"hover:border-zinc-300 dark:hover:border-zinc-500\",\n    neutral: \"hover:border-neutral-300 dark:hover:border-neutral-500\",\n    stone: \"hover:border-stone-300 dark:hover:border-stone-500\",\n    red: \"hover:border-red-300 dark:hover:border-red-500\",\n    orange: \"hover:border-orange-300 dark:hover:border-orange-500\",\n    amber: \"hover:border-amber-300 dark:hover:border-amber-500\",\n    yellow: \"hover:border-yellow-300 dark:hover:border-yellow-500\",\n    lime: \"hover:border-lime-300 dark:hover:border-lime-500\",\n    green: \"hover:border-green-300 dark:hover:border-green-500\",\n    emerald: \"hover:border-emerald-300 dark:hover:border-emerald-500\",\n    teal: \"hover:border-teal-300 dark:hover:border-teal-500\",\n    cyan: \"hover:border-cyan-300 dark:hover:border-cyan-500\",\n    sky: \"hover:border-sky-300 dark:hover:border-sky-500\",\n    blue: \"hover:border-blue-300 dark:hover:border-blue-500\",\n    indigo: \"hover:border-indigo-300 dark:hover:border-indigo-500\",\n    violet: \"hover:border-violet-300 dark:hover:border-violet-500\",\n    purple: \"hover:border-purple-300 dark:hover:border-purple-500\",\n    fuchsia: \"hover:border-fuchsia-300 dark:hover:border-fuchsia-500\",\n    pink: \"hover:border-pink-300 dark:hover:border-pink-500\",\n    rose: \"hover:border-rose-300 dark:hover:border-rose-500\",\n};\n\n// 鼠标悬停文本颜色映射表\nexport const hoverTextMap: Record<ColorType, string> = {\n    slate: \"hover:text-slate-700 dark:hover:text-slate-300\",\n    gray: \"hover:text-gray-700 dark:hover:text-gray-300\",\n    zinc: \"hover:text-zinc-700 dark:hover:text-zinc-300\",\n    neutral: \"hover:text-neutral-700 dark:hover:text-neutral-300\",\n    stone: \"hover:text-stone-700 dark:hover:text-stone-300\",\n    red: \"hover:text-red-700 dark:hover:text-red-300\",\n    orange: \"hover:text-orange-700 dark:hover:text-orange-300\",\n    amber: \"hover:text-amber-700 dark:hover:text-amber-300\",\n    yellow: \"hover:text-yellow-700 dark:hover:text-yellow-300\",\n    lime: \"hover:text-lime-700 dark:hover:text-lime-300\",\n    green: \"hover:text-green-700 dark:hover:text-green-300\",\n    emerald: \"hover:text-emerald-700 dark:hover:text-emerald-300\",\n    teal: \"hover:text-teal-700 dark:hover:text-teal-300\",\n    cyan: \"hover:text-cyan-700 dark:hover:text-cyan-300\",\n    sky: \"hover:text-sky-700 dark:hover:text-sky-300\",\n    blue: \"hover:text-blue-700 dark:hover:text-blue-300\",\n    indigo: \"hover:text-indigo-700 dark:hover:text-indigo-300\",\n    violet: \"hover:text-violet-700 dark:hover:text-violet-300\",\n    purple: \"hover:text-purple-700 dark:hover:text-purple-300\",\n    fuchsia: \"hover:text-fuchsia-700 dark:hover:text-fuchsia-300\",\n    pink: \"hover:text-pink-700 dark:hover:text-pink-300\",\n    rose: \"hover:text-rose-700 dark:hover:text-rose-300\",\n};\n\n// 焦点轮廓颜色映射表\nexport const focusOutlineMap: Record<ColorType, string> = {\n    slate: \"focus:outline-slate-600 dark:focus:outline-slate-500\",\n    gray: \"focus:outline-gray-600 dark:focus:outline-gray-500\",\n    zinc: \"focus:outline-zinc-600 dark:focus:outline-zinc-500\",\n    neutral: \"focus:outline-neutral-600 dark:focus:outline-neutral-500\",\n    stone: \"focus:outline-stone-600 dark:focus:outline-stone-500\",\n    red: \"focus:outline-red-600 dark:focus:outline-red-500\",\n    orange: \"focus:outline-orange-600 dark:focus:outline-orange-500\",\n    amber: \"focus:outline-amber-600 dark:focus:outline-amber-500\",\n    yellow: \"focus:outline-yellow-600 dark:focus:outline-yellow-500\",\n    lime: \"focus:outline-lime-600 dark:focus:outline-lime-500\",\n    green: \"focus:outline-green-600 dark:focus:outline-green-500\",\n    emerald: \"focus:outline-emerald-600 dark:focus:outline-emerald-500\",\n    teal: \"focus:outline-teal-600 dark:focus:outline-teal-500\",\n    cyan: \"focus:outline-cyan-600 dark:focus:outline-cyan-500\",\n    sky: \"focus:outline-sky-600 dark:focus:outline-sky-500\",\n    blue: \"focus:outline-blue-600 dark:focus:outline-blue-500\",\n    indigo: \"focus:outline-indigo-600 dark:focus:outline-indigo-500\",\n    violet: \"focus:outline-violet-600 dark:focus:outline-violet-500\",\n    purple: \"focus:outline-purple-600 dark:focus:outline-purple-500\",\n    fuchsia: \"focus:outline-fuchsia-600 dark:focus:outline-fuchsia-500\",\n    pink: \"focus:outline-pink-600 dark:focus:outline-pink-500\",\n    rose: \"focus:outline-rose-600 dark:focus:outline-rose-500\",\n};","import { computed, defineComponent, type PropType } from \"vue\";\nimport { ColorType, borderColorMap, textColorMap, hoverBorderMap, hoverTextMap, focusOutlineMap, THEME_COLOR_MAP, ThemeColorType } from './config'\nexport interface TabItem {\n  name: string;\n  href?: string;\n  disabled?: boolean;\n  content?: string;\n  [key: string]: any;\n}\n\n// 定义主题枚举\nexport enum TabTheme {\n  Primary = \"primary\",\n  Secondary = \"secondary\",\n  Success = \"success\",\n  Danger = \"danger\",\n  Warning = \"warning\",\n  Info = \"info\",\n}\n\n\nexport const Tabs = defineComponent({\n  name: \"Tabs\",\n  props: {\n    modelValue: {\n      type: String,\n      default: undefined,\n    },\n    tabs: {\n      type: Array as PropType<(TabItem | string)[]>,\n      required: true,\n    },\n    showContent: {\n      type: Boolean,\n      default: true,\n    },\n    defaultTab: {\n      type: String,\n      default: \"\",\n    },\n    theme: {\n      type: String as PropType<TabTheme>,\n      default: TabTheme.Info,\n      validator: (value: string) => Object.values(TabTheme).includes(value as TabTheme),\n    },\n    activeColor: {\n      type: String as PropType<ColorType>,\n      default: undefined,\n    },\n    hoverColor: {\n      type: String as PropType<ColorType>,\n      default: undefined,\n    },\n  },\n  emits: [\"update:modelValue\", \"change\", \"click\"],\n  setup(props, { slots, emit }) {\n    // 标准化 tabs 数据\n    const normalizedTabs = computed(() => {\n      return props.tabs.map((tab) => {\n        if (typeof tab === \"string\") {\n          return {\n            name: tab,\n            href: `#${tab}`,\n            content: \"\",\n            disabled: false,\n          };\n        }\n        return {\n          href: `#${tab.name}`,\n          disabled: false,\n          content: \"\",\n          ...tab,\n        };\n      });\n    });\n\n    // 判断标签是否激活\n    const isActive = (tabName: string) => {\n      if (props.modelValue) {\n        return props.modelValue === tabName;\n      }\n      if (props.defaultTab) {\n        return props.defaultTab === tabName;\n      }\n      // 如果没有设置 modelValue 和 defaultTab，返回第一个标签\n      return normalizedTabs.value[0]?.name === tabName;\n    };\n\n    // 处理标签点击\n    const handleTabClick = (tab: TabItem) => {\n      if (tab.disabled) return;\n\n      emit(\"click\", tab);\n      emit(\"update:modelValue\", tab.name);\n      emit(\"change\", tab);\n    };\n\n    // 处理移动端选择\n    const handleSelectChange = (event: Event) => {\n      const target = event.target as HTMLSelectElement;\n      const selectedTab = normalizedTabs.value.find(\n        (tab) => tab.name === target.value,\n      );\n      if (selectedTab) {\n        handleTabClick(selectedTab);\n      }\n    };\n\n    // 获取颜色名称\n    const getColorName = computed((): ColorType => {\n      // 如果指定了自定义的活动颜色，优先使用\n      if (props.activeColor) {\n        return props.activeColor;\n      }\n\n      // 否则根据主题选择默认颜色\n      if (props.theme) {\n        return THEME_COLOR_MAP[props.theme as ThemeColorType];\n      }\n\n      return 'indigo'; // 默认颜色\n    });\n\n    // 获取悬停颜色名称\n    const getHoverColorName = computed((): ColorType => {\n      return props.hoverColor || getColorName.value;\n    });\n\n    // 生成激活状态的类名\n    const activeTabClasses = computed(() => {\n      const colorName = getColorName.value;\n      return [\n        borderColorMap[colorName],\n        textColorMap[colorName],\n      ];\n    });\n\n    // 生成悬停状态的类名\n    const hoverTabClasses = computed(() => {\n      const colorName = getHoverColorName.value;\n      return [\n        hoverBorderMap[colorName],\n        hoverTextMap[colorName],\n      ];\n    });\n\n    // 生成聚焦状态的类名\n    const focusTabClasses = computed(() => {\n      const colorName = getColorName.value;\n      return focusOutlineMap[colorName];\n    });\n\n    return () => (\n      <div>\n        {/* Mobile View */}\n        <div class=\"grid grid-cols-1 sm:hidden\">\n          <select\n            value={props.modelValue || props.defaultTab || normalizedTabs.value[0]?.name}\n            onChange={handleSelectChange}\n            aria-label=\"Select a tab\"\n            class={[\n              \"col-start-1 row-start-1 w-full appearance-none rounded-md bg-white dark:bg-gray-800 py-2 pr-8 pl-3\",\n              \"text-base text-gray-900 dark:text-gray-100 outline-1 -outline-offset-1 outline-gray-300 dark:outline-gray-600\",\n              \"focus:outline-2 focus:-outline-offset-2\",\n              focusTabClasses.value,\n              \"transition-colors duration-200\",\n            ]}\n          >\n            {normalizedTabs.value.map((tab) => (\n              <option key={tab.name} value={tab.name} disabled={tab.disabled}>\n                {tab.content || tab.name}\n              </option>\n            ))}\n          </select>\n          <div class=\"pointer-events-none col-start-1 row-start-1 flex items-center justify-end pr-3\">\n            <svg\n              class=\"h-5 w-5 text-gray-400 dark:text-gray-500\"\n              viewBox=\"0 0 20 20\"\n              fill=\"currentColor\"\n              aria-hidden=\"true\"\n            >\n              <path\n                fill-rule=\"evenodd\"\n                d=\"M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z\"\n                clip-rule=\"evenodd\"\n              />\n            </svg>\n          </div>\n        </div>\n\n        {/* Desktop View */}\n        <div class=\"hidden sm:block\">\n          <div class=\"border-b border-gray-200 dark:border-gray-700\">\n            <nav class=\"-mb-px flex flex-wrap\" aria-label=\"Tabs\" role=\"tablist\">\n              {normalizedTabs.value.map((tab) => (\n                <a\n                  key={tab.name}\n                  href={tab.href}\n                  role=\"tab\"\n                  aria-selected={isActive(tab.name)}\n                  aria-controls={`panel-${tab.name}`}\n                  class={[\n                    isActive(tab.name)\n                      ? activeTabClasses.value\n                      : [\"border-transparent\", \"text-gray-500 dark:text-gray-400\", ...hoverTabClasses.value],\n                    \"flex-auto md:flex-none border-b-2 px-3 py-4 text-center text-sm font-medium\",\n                    \"transition-all duration-200 ease-in-out\",\n                    { \"cursor-not-allowed opacity-50 dark:opacity-40\": tab.disabled },\n                  ]}\n                  onClick={(e) => {\n                    e.preventDefault();\n                    handleTabClick(tab);\n                  }}\n                >\n                  {slots.tab ? slots.tab({ tab }) : (tab.content || tab.name)}\n                </a>\n              ))}\n            </nav>\n          </div>\n        </div>\n\n        {/* Tab Panels */}\n        {props.showContent && (\n          <div class=\"mt-4 min-h-[100px]\">\n            {normalizedTabs.value.map((tab) => (\n              <div\n                key={tab.name}\n                id={`panel-${tab.name}`}\n                role=\"tabpanel\"\n                aria-labelledby={tab.name}\n                class={[\n                  \"transition-all duration-300\",\n                  isActive(tab.name) ? \"opacity-100 transform-none\" : \"hidden opacity-0 translate-y-2\",\n                ]}\n              >\n                {slots[tab.name]?.({ tab }) ?? tab.content}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  },\n});\n\nexport default Tabs;\n","<template>\n  <div class=\"space-y-10 p-6\">\n    <!-- 基础用法 -->\n    <section>\n      <h2 class=\"mb-4 text-lg font-bold\">基础用法</h2>\n      <p class=\"mb-4 text-gray-600 dark:text-gray-400\">\n        最简单的用法是传入一个字符串数组作为标签名，并通过插槽提供相应的内容。每个标签的内容通过名称对应的具名插槽提供。\n      </p>\n      <div class=\"mb-4 rounded-lg bg-gray-50 p-4 dark:bg-gray-800\">\n        <Tabs v-model=\"basicTab\" :tabs=\"basicTabs\">\n          <template #first>这是第一个标签的内容区域</template>\n          <template #second>这是第二个标签的内容区域</template>\n          <template #third>这是第三个标签的内容区域</template>\n        </Tabs>\n      </div>\n    </section>\n\n    <!-- 自定义标签内容 -->\n    <section>\n      <h2 class=\"mb-4 text-lg font-bold\">自定义标签内容</h2>\n      <p class=\"mb-4 text-gray-600 dark:text-gray-400\">\n        可以通过\n        <code>tab</code>\n        插槽自定义标签的显示方式，如添加图标或其他元素。此插槽提供当前标签对象作为作用域参数。\n      </p>\n      <div class=\"mb-4 rounded-lg bg-gray-50 p-4 dark:bg-gray-800\">\n        <Tabs v-model=\"customTab\" :tabs=\"customTabs\">\n          <template #tab=\"slotProps\">\n            <div class=\"flex items-center gap-2\">\n              <i :class=\"slotProps.tab.icon\" class=\"h-4 w-4\"></i>\n              {{ slotProps.tab.label }}\n            </div>\n          </template>\n          <template #dashboard>\n            <div class=\"rounded-lg bg-gray-50 p-4 dark:bg-gray-800\">\n              仪表盘内容\n            </div>\n          </template>\n          <template #profile>\n            <div class=\"rounded-lg bg-gray-50 p-4 dark:bg-gray-800\">\n              个人资料内容\n            </div>\n          </template>\n          <template #settings>\n            <div class=\"rounded-lg bg-gray-50 p-4 dark:bg-gray-800\">\n              设置内容\n            </div>\n          </template>\n        </Tabs>\n      </div>\n    </section>\n\n    <!-- 禁用状态 -->\n    <section>\n      <h2 class=\"mb-4 text-lg font-bold\">禁用状态</h2>\n      <p class=\"mb-4 text-gray-600 dark:text-gray-400\">\n        可以通过在 <code>TabItem</code> 对象中设置\n        <code>disabled: true</code>\n        来禁用特定的标签。被禁用的标签将不可点击且显示为灰色。\n      </p>\n      <div class=\"mb-4 rounded-lg bg-gray-50 p-4 dark:bg-gray-800\">\n        <Tabs v-model=\"disabledTab\" :tabs=\"disabledTabs\">\n          <template #tab1>可用标签内容1</template>\n          <template #tab2>可用标签内容2</template>\n          <template #tab3>禁用标签内容将不可见</template>\n        </Tabs>\n      </div>\n    </section>\n\n    <!-- 默认标签 -->\n    <section>\n      <h2 class=\"mb-4 text-lg font-bold\">默认标签</h2>\n      <p class=\"mb-4 text-gray-600 dark:text-gray-400\">\n        可以通过 <code>default-tab</code> 属性指定默认选中的标签。当不使用\n        <code>v-model</code> 时，这个属性非常有用。\n      </p>\n      <div class=\"mb-4 rounded-lg bg-gray-50 p-4 dark:bg-gray-800\">\n        <Tabs :tabs=\"defaultTabs\" default-tab=\"tab2\">\n          <template #tab1>标签1内容</template>\n          <template #tab2>默认显示的标签2内容</template>\n          <template #tab3>标签3内容</template>\n        </Tabs>\n      </div>\n    </section>\n\n    <!-- 主题样式 -->\n    <section>\n      <h2 class=\"mb-4 text-lg font-bold\">主题样式</h2>\n      <p class=\"mb-4 text-gray-600 dark:text-gray-400\">\n        通过 <code>theme</code> 属性可以使用预设主题，包括\n        Primary、Success、Danger、Warning、Info 和 Secondary。\n        这些预设主题遵循常见的色彩语义，让用户更容易理解界面元素的用途。\n      </p>\n      <div class=\"mb-4 space-y-6 rounded-lg bg-gray-50 p-4 dark:bg-gray-800\">\n        <!-- 主题: Primary -->\n        <div>\n          <h3 class=\"mb-2 text-base font-medium\">Primary</h3>\n          <Tabs v-model=\"themeTab1\" :tabs=\"themeTabs\" :theme=\"TabTheme.Primary\">\n            <template #tab1>蓝色主题内容</template>\n            <template #tab2>蓝色主题内容</template>\n          </Tabs>\n        </div>\n\n        <!-- 主题: Success -->\n        <div>\n          <h3 class=\"mb-2 text-base font-medium\">Success</h3>\n          <Tabs v-model=\"themeTab2\" :tabs=\"themeTabs\" :theme=\"TabTheme.Success\">\n            <template #tab1>绿色主题内容</template>\n            <template #tab2>绿色主题内容</template>\n          </Tabs>\n        </div>\n\n        <!-- 主题: Danger -->\n        <div>\n          <h3 class=\"mb-2 text-base font-medium\">Danger</h3>\n          <Tabs v-model=\"themeTab3\" :tabs=\"themeTabs\" :theme=\"TabTheme.Danger\">\n            <template #tab1>红色主题内容</template>\n            <template #tab2>红色主题内容</template>\n          </Tabs>\n        </div>\n\n        <!-- 主题: Warning -->\n        <div>\n          <h3 class=\"mb-2 text-base font-medium\">Warning</h3>\n          <Tabs v-model=\"themeTab4\" :tabs=\"themeTabs\" :theme=\"TabTheme.Warning\">\n            <template #tab1>黄色主题内容</template>\n            <template #tab2>黄色主题内容</template>\n          </Tabs>\n        </div>\n\n        <!-- 主题: Info -->\n        <div>\n          <h3 class=\"mb-2 text-base font-medium\">Info (默认)</h3>\n          <Tabs v-model=\"themeTab5\" :tabs=\"themeTabs\" :theme=\"TabTheme.Info\">\n            <template #tab1>靛蓝主题内容</template>\n            <template #tab2>靛蓝主题内容</template>\n          </Tabs>\n        </div>\n\n        <!-- 主题: Secondary -->\n        <div>\n          <h3 class=\"mb-2 text-base font-medium\">Secondary</h3>\n          <Tabs v-model=\"themeTab6\" :tabs=\"themeTabs\" :theme=\"TabTheme.Secondary\">\n            <template #tab1>灰色主题内容</template>\n            <template #tab2>灰色主题内容</template>\n          </Tabs>\n        </div>\n      </div>\n    </section>\n\n    <!-- 暗色模式展示 -->\n    <section>\n      <h2 class=\"mb-4 text-lg font-bold\">暗色模式展示</h2>\n      <p class=\"mb-4 text-gray-600 dark:text-gray-400\">\n        Tabs 组件完全支持暗色模式，只需在父元素上添加 <code>dark</code> 类或按照\n        Tailwind CSS 的暗色模式配置启用即可。\n        组件会自动调整颜色以适应暗色环境，无需额外代码。\n      </p>\n      <div class=\"dark rounded-lg bg-gray-900 p-6\">\n        <h3 class=\"mb-4 text-base font-medium text-white\">暗色模式自动适配</h3>\n\n        <!-- 暗色模式下的蓝色主题 -->\n        <Tabs v-model=\"darkModeTab1\" :tabs=\"darkModeTabs\" :theme=\"TabTheme.Primary\">\n          <template #tab1>\n            <div class=\"rounded-lg bg-gray-800 p-4 text-gray-100\">\n              暗色模式下的蓝色主题内容\n            </div>\n          </template>\n          <template #tab2>\n            <div class=\"rounded-lg bg-gray-800 p-4 text-gray-100\">\n              暗色模式下的蓝色主题内容\n            </div>\n          </template>\n        </Tabs>\n\n        <!-- 暗色模式下自定义颜色 -->\n        <div class=\"mt-6\">\n          <h4 class=\"mb-2 text-sm font-medium text-gray-300\">自定义紫色</h4>\n          <Tabs v-model=\"darkModeTab2\" :tabs=\"darkModeTabs\" active-color=\"purple\">\n            <template #tab1>\n              <div class=\"rounded-lg bg-gray-800 p-4 text-gray-100\">\n                暗色模式下的紫色主题内容\n              </div>\n            </template>\n            <template #tab2>\n              <div class=\"rounded-lg bg-gray-800 p-4 text-gray-100\">\n                暗色模式下的紫色主题内容\n              </div>\n            </template>\n          </Tabs>\n        </div>\n      </div>\n    </section>\n\n    <!-- 响应式设计 -->\n    <section>\n      <h2 class=\"mb-4 text-lg font-bold\">响应式设计</h2>\n      <p class=\"mb-4 text-gray-600 dark:text-gray-400\">\n        Tabs\n        组件在小屏幕设备上（移动端）会自动转换为下拉菜单形式。请尝试调整浏览器窗口大小查看效果。\n        这种自适应设计确保了在任何设备上都能提供良好的用户体验，无需编写额外代码。\n      </p>\n      <div class=\"mb-4 rounded-lg bg-gray-50 p-4 dark:bg-gray-800\">\n        <Tabs v-model=\"responsiveTab\" :tabs=\"responsiveTabs\">\n          <template #item1>\n            <div class=\"rounded-lg bg-white p-3 dark:bg-gray-700\">\n              <p>在小屏幕上会自动变成下拉菜单</p>\n              <p class=\"mt-2 text-sm text-gray-500 dark:text-gray-400\">\n                尝试调整浏览器窗口大小查看效果\n              </p>\n            </div>\n          </template>\n          <template #item2>内容区域2</template>\n          <template #item3>内容区域3</template>\n          <template #item4>内容区域4</template>\n          <template #item5>内容区域5</template>\n        </Tabs>\n      </div>\n    </section>\n\n    <!-- API 文档 -->\n    <section>\n      <h2 class=\"mb-4 text-xl font-bold\">API 文档</h2>\n\n      <div class=\"space-y-6 rounded-lg bg-gray-50 p-6 dark:bg-gray-800\">\n        <!-- Props 属性 -->\n        <div>\n          <h3 class=\"mb-3 text-lg font-medium\">Props 属性</h3>\n          <div class=\"overflow-x-auto\">\n            <table class=\"min-w-full border-collapse\">\n              <thead>\n                <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                  <th class=\"py-3 px-4 text-left text-sm font-semibold text-gray-900 dark:text-gray-100\">属性名</th>\n                  <th class=\"py-3 px-4 text-left text-sm font-semibold text-gray-900 dark:text-gray-100\">类型</th>\n                  <th class=\"py-3 px-4 text-left text-sm font-semibold text-gray-900 dark:text-gray-100\">默认值</th>\n                  <th class=\"py-3 px-4 text-left text-sm font-semibold text-gray-900 dark:text-gray-100\">描述</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                  <td class=\"py-3 px-4 text-sm text-gray-800 dark:text-gray-200\">modelValue</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\"><code>string</code></td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">undefined</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">当前选中的标签，支持v-model绑定</td>\n                </tr>\n                <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                  <td class=\"py-3 px-4 text-sm text-gray-800 dark:text-gray-200\">tabs</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\"><code>(TabItem | string)[]</code></td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">[]</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">标签项数组，可以是字符串数组或TabItem对象数组</td>\n                </tr>\n                <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                  <td class=\"py-3 px-4 text-sm text-gray-800 dark:text-gray-200\">showContent</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\"><code>boolean</code></td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">true</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">是否显示标签内容区域</td>\n                </tr>\n                <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                  <td class=\"py-3 px-4 text-sm text-gray-800 dark:text-gray-200\">defaultTab</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\"><code>string</code></td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">''</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">默认选中的标签名（当没有modelValue时生效）</td>\n                </tr>\n                <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                  <td class=\"py-3 px-4 text-sm text-gray-800 dark:text-gray-200\">activeColor</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\"><code>ColorType</code></td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">undefined</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">激活状态的主题颜色，支持 tailwindcss 的颜色名称</td>\n                </tr>\n                <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                  <td class=\"py-3 px-4 text-sm text-gray-800 dark:text-gray-200\">hoverColor</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\"><code>ColorType</code></td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">activeColor值</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">悬停状态的主题颜色</td>\n                </tr>\n                <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                  <td class=\"py-3 px-4 text-sm text-gray-800 dark:text-gray-200\">theme</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\"><code>TabTheme</code></td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">'info'</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">主题样式，支持预设的多种主题</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        <!-- TabItem 接口 -->\n        <div>\n          <h3 class=\"mb-3 text-lg font-medium\">TabItem 接口</h3>\n          <div class=\"overflow-x-auto rounded-lg bg-gray-100 p-4 dark:bg-gray-700\">\n            <pre class=\"text-sm text-gray-800 dark:text-gray-200\"><code>interface TabItem {\n            name: string; // 选项卡名称（必需）\n            href?: string; // 选项卡链接，默认为 #name\n            disabled?: boolean; // 是否禁用，默认为false\n            content?: string; // 选项卡内容\n            [key: string]: any; // 其他自定义属性\n            }</code></pre>\n          </div>\n        </div>\n\n        <!-- TabTheme 枚举 -->\n        <div>\n          <h3 class=\"mb-3 text-lg font-medium\">TabTheme 枚举</h3>\n          <div class=\"overflow-x-auto rounded-lg bg-gray-100 p-4 dark:bg-gray-700\">\n            <pre class=\"text-sm text-gray-800 dark:text-gray-200\"><code>enum TabTheme {\n            Primary = \"primary\", // 蓝色\n            Secondary = \"secondary\", // 灰色\n            Success = \"success\", // 绿色\n            Danger = \"danger\", // 红色\n            Warning = \"warning\", // 黄色\n            Info = \"info\", // 靛蓝色（默认）\n            }</code></pre>\n          </div>\n        </div>\n\n        <!-- ColorType 类型 -->\n        <div>\n          <h3 class=\"mb-3 text-lg font-medium\">ColorType 类型</h3>\n          <p class=\"mb-2 text-gray-700 dark:text-gray-300\">\n            Tabs 组件支持所有 Tailwind CSS 的颜色：\n          </p>\n          <div class=\"overflow-x-auto rounded-lg bg-gray-100 p-4 dark:bg-gray-700\">\n            <pre class=\"text-sm text-gray-800 dark:text-gray-200\"><code>type ColorType =\n            | 'slate' | 'gray' | 'zinc' | 'neutral' | 'stone' // 灰色系\n            | 'red' | 'orange' | 'amber' | 'yellow' // 暖色系\n            | 'lime' | 'green' | 'emerald' | 'teal' // 绿色系\n            | 'cyan' | 'sky' | 'blue' | 'indigo' // 蓝色系\n            | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose'; // 紫粉色系</code></pre>\n          </div>\n        </div>\n\n        <!-- 事件 -->\n        <div>\n          <h3 class=\"mb-3 text-lg font-medium\">事件</h3>\n          <div class=\"overflow-x-auto\">\n            <table class=\"min-w-full border-collapse\">\n              <thead>\n                <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                  <th class=\"py-3 px-4 text-left text-sm font-semibold text-gray-900 dark:text-gray-100\">事件名</th>\n                  <th class=\"py-3 px-4 text-left text-sm font-semibold text-gray-900 dark:text-gray-100\">参数</th>\n                  <th class=\"py-3 px-4 text-left text-sm font-semibold text-gray-900 dark:text-gray-100\">说明</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                  <td class=\"py-3 px-4 text-sm text-gray-800 dark:text-gray-200\">update:modelValue</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">(value: string)</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">选项卡变更时触发，用于v-model</td>\n                </tr>\n                <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                  <td class=\"py-3 px-4 text-sm text-gray-800 dark:text-gray-200\">change</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">(tab: TabItem)</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">选项卡变更时触发</td>\n                </tr>\n                <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                  <td class=\"py-3 px-4 text-sm text-gray-800 dark:text-gray-200\">click</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">(tab: TabItem)</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">点击选项卡时触发</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        <!-- 插槽 -->\n        <div>\n          <h3 class=\"mb-3 text-lg font-medium\">插槽</h3>\n          <div class=\"overflow-x-auto\">\n            <table class=\"min-w-full border-collapse\">\n              <thead>\n                <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                  <th class=\"py-3 px-4 text-left text-sm font-semibold text-gray-900 dark:text-gray-100\">插槽名</th>\n                  <th class=\"py-3 px-4 text-left text-sm font-semibold text-gray-900 dark:text-gray-100\">说明</th>\n                  <th class=\"py-3 px-4 text-left text-sm font-semibold text-gray-900 dark:text-gray-100\">作用域变量</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                  <td class=\"py-3 px-4 text-sm text-gray-800 dark:text-gray-200\">tab</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">自定义标签显示内容</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">{ tab: TabItem }</td>\n                </tr>\n                <tr class=\"border-b border-gray-200 dark:border-gray-700\">\n                  <td class=\"py-3 px-4 text-sm text-gray-800 dark:text-gray-200\">[tab.name]</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">每个标签对应的内容插槽</td>\n                  <td class=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">{ tab: TabItem }</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </section>\n\n    <!-- 小结与最佳实践部分 -->\n    <section>\n      <h2 class=\"mb-4 text-xl font-bold\">小结与最佳实践</h2>\n\n      <div class=\"space-y-6 rounded-lg bg-gray-50 p-6 dark:bg-gray-800\">\n        <!-- 何时使用 -->\n        <div>\n          <h3 class=\"mb-3 text-lg font-medium\">何时使用</h3>\n          <ul class=\"list-inside list-disc space-y-2 text-gray-700 dark:text-gray-300\">\n            <li>当需要在同一页面内展示多个相关内容区域时</li>\n            <li>当用户需要在不同视图或功能模块之间切换时</li>\n            <li>当希望减少页面内容的视觉复杂度，提高用户阅读体验时</li>\n            <li>当希望提供更好的信息组织方式，避免一次性展示过多内容时</li>\n          </ul>\n        </div>\n\n        <!-- 何时不使用 -->\n        <div>\n          <h3 class=\"mb-3 text-lg font-medium\">何时不使用</h3>\n          <ul class=\"list-inside list-disc space-y-2 text-gray-700 dark:text-gray-300\">\n            <li>当内容量较少，可以一次性展示在页面上时</li>\n            <li>当各个部分之间关联性较低，适合使用独立页面展示时</li>\n            <li>当需要同时查看和比较多个内容区域时</li>\n            <li>当用户操作流程是线性的，内容应该按特定顺序呈现时（考虑使用步骤条）</li>\n          </ul>\n        </div>\n\n        <!-- 可访问性建议 -->\n        <div>\n          <h3 class=\"mb-3 text-lg font-medium\">可访问性建议</h3>\n          <ul class=\"list-inside list-disc space-y-2 text-gray-700 dark:text-gray-300\">\n            <li>确保标签名称简明扼要，清晰描述其对应的内容</li>\n            <li>使用符合ARIA规范的标签和角色，增强屏幕阅读器支持</li>\n            <li>通过键盘可以完全操作选项卡（左右方向键导航，回车键选择）</li>\n            <li>保持足够的颜色对比度，特别是在暗色模式下</li>\n            <li>选中状态应当同时使用颜色和其他视觉指示（如下划线），不仅依赖颜色</li>\n          </ul>\n        </div>\n\n        <!-- 性能优化 -->\n        <div>\n          <h3 class=\"mb-3 text-lg font-medium\">性能优化</h3>\n          <ul class=\"list-inside list-disc space-y-2 text-gray-700 dark:text-gray-300\">\n            <li>对于内容较重的标签页，考虑使用延迟加载</li>\n            <li>当标签页数量较多时，避免一次性加载所有标签内容</li>\n            <li>对于非当前选中的标签页内容，可以考虑使用v-if而非v-show控制显示</li>\n            <li>针对动态内容的标签页，可以在切换时才请求数据，而非一次性加载</li>\n            <li>标签数量过多时考虑使用滚动或分页式标签栏，避免标签挤压</li>\n          </ul>\n        </div>\n\n        <!-- 与其他组件的组合 -->\n        <div>\n          <h3 class=\"mb-3 text-lg font-medium\">与其他组件的组合</h3>\n          <ul class=\"list-inside list-disc space-y-2 text-gray-700 dark:text-gray-300\">\n            <li>与Table组件结合，在不同标签页展示不同类别的数据表格</li>\n            <li>与Form组件结合，将复杂表单分解为多个有逻辑关联的部分</li>\n            <li>与Chart组件结合，在不同标签页展示不同维度的数据可视化</li>\n            <li>与Card组件结合，创建带标签分类的内容卡片集合</li>\n            <li>与Breadcrumb组件结合，展示用户在层级导航中的位置</li>\n          </ul>\n        </div>\n\n        <!-- 响应式设计注意事项 -->\n        <div>\n          <h3 class=\"mb-3 text-lg font-medium\">响应式设计注意事项</h3>\n          <ul class=\"list-inside list-disc space-y-2 text-gray-700 dark:text-gray-300\">\n            <li>在小屏幕设备上自动转换为下拉选择形式，避免标签栏拥挤</li>\n            <li>考虑在不同屏幕尺寸下调整标签文本大小或使用图标替代文字</li>\n            <li>确保标签页内容区域自适应不同屏幕宽度</li>\n            <li>触摸设备上增加标签按钮的触摸区域，提高操作准确性</li>\n            <li>在小屏幕上考虑使用全宽的标签栏布局</li>\n          </ul>\n        </div>\n\n        <!-- 国际化与本地化 -->\n        <div>\n          <h3 class=\"mb-3 text-lg font-medium\">国际化与本地化</h3>\n          <ul class=\"list-inside list-disc space-y-2 text-gray-700 dark:text-gray-300\">\n            <li>确保标签文本可以通过国际化字典进行翻译</li>\n            <li>考虑不同语言文本长度的差异，设计时预留足够空间</li>\n            <li>对于RTL(从右到左)语言，确保标签栏的布局方向自动适配</li>\n            <li>数据格式化（如日期、货币）应根据用户的区域设置调整</li>\n          </ul>\n        </div>\n\n        <!-- 常见陷阱与解决方案 -->\n        <div>\n          <h3 class=\"mb-3 text-lg font-medium\">常见陷阱与解决方案</h3>\n          <ul class=\"list-inside list-disc space-y-2 text-gray-700 dark:text-gray-300\">\n            <li>标签过多：保持标签数量在2-7个之间，超过时考虑重组或使用下拉菜单</li>\n            <li>标签命名模糊：使用具体、简短且描述性强的标签名称</li>\n            <li>标签切换导致页面跳动：设置内容区最小高度或使用平滑过渡动画</li>\n            <li>深层嵌套：避免多层嵌套标签页，会导致导航体验混乱</li>\n            <li>无状态保持：使用路由或本地存储记住用户上次选择的标签</li>\n          </ul>\n        </div>\n      </div>\n    </section>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from \"vue\";\nimport { Tabs, TabTheme } from \"./Tab\";\n\n// 基础用法数据\nconst basicTab = ref(\"first\");\nconst basicTabs = [\"first\", \"second\", \"third\"];\n\n// 自定义标签数据\nconst customTab = ref(\"dashboard\");\nconst customTabs = [\n  { name: \"dashboard\", label: \"仪表盘\", icon: \"icon-[tabler--dashboard]\" },\n  { name: \"profile\", label: \"个人资料\", icon: \"icon-[tabler--user-cog]\" },\n  { name: \"settings\", label: \"设置\", icon: \"icon-[tabler--settings]\" },\n];\n\n// 禁用状态数据\nconst disabledTab = ref(\"tab1\");\nconst disabledTabs = [\n  { name: \"tab1\", content: \"标签1\" },\n  { name: \"tab2\", content: \"标签2\" },\n  { name: \"tab3\", content: \"标签3\", disabled: true },\n];\n\n// 默认标签数据\nconst defaultTabs = [\"tab1\", \"tab2\", \"tab3\"];\n\n// 主题展示数据\nconst themeTab1 = ref(\"tab1\");\nconst themeTab2 = ref(\"tab1\");\nconst themeTab3 = ref(\"tab1\");\nconst themeTab4 = ref(\"tab1\");\nconst themeTab5 = ref(\"tab1\");\nconst themeTab6 = ref(\"tab1\");\nconst themeTabs = [\"tab1\", \"tab2\"];\n\n// 暗色模式数据\nconst darkModeTab1 = ref(\"tab1\");\nconst darkModeTab2 = ref(\"tab1\");\nconst darkModeTabs = [\"tab1\", \"tab2\"];\n\n// 响应式示例数据\nconst responsiveTab = ref(\"item1\");\nconst responsiveTabs = [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\"];\n</script>\n"],"names":["THEME_COLOR_MAP","borderColorMap","textColorMap","hoverBorderMap","hoverTextMap","focusOutlineMap","TabTheme","Tabs","defineComponent","name","props","modelValue","type","String","default","undefined","tabs","Array","required","showContent","Boolean","defaultTab","theme","Info","validator","value","Object","values","includes","activeColor","hoverColor","emits","setup","slots","emit","normalizedTabs","computed","map","tab","href","content","disabled","isActive","tabName","handleTabClick","handleSelectChange","event","target","selectedTab","find","getColorName","getHoverColorName","activeTabClasses","colorName","hoverTabClasses","focusTabClasses","_createVNode","e","preventDefault","basicTab","ref","basicTabs","customTab","customTabs","disabledTab","disabledTabs","defaultTabs","themeTab1","themeTab2","themeTab3","themeTab4","themeTab5","themeTab6","themeTabs","darkModeTab1","darkModeTab2","darkModeTabs","responsiveTab","responsiveTabs"],"mappings":"4HAYO,MAAMA,EAAqD,CAC9D,QAAS,SACT,UAAW,OACX,QAAS,QACT,QAAS,SACT,OAAQ,MACR,KAAM,MACV,EAGaC,EAA4C,CACrD,MAAO,yCACP,KAAM,uCACN,KAAM,uCACN,QAAS,6CACT,MAAO,yCACP,IAAK,qCACL,OAAQ,2CACR,MAAO,yCACP,OAAQ,2CACR,KAAM,uCACN,MAAO,yCACP,QAAS,6CACT,KAAM,uCACN,KAAM,uCACN,IAAK,qCACL,KAAM,uCACN,OAAQ,2CACR,OAAQ,2CACR,OAAQ,2CACR,QAAS,6CACT,KAAM,uCACN,KAAM,sCACV,EAGaC,EAA0C,CACnD,MAAO,qCACP,KAAM,mCACN,KAAM,mCACN,QAAS,yCACT,MAAO,qCACP,IAAK,iCACL,OAAQ,uCACR,MAAO,qCACP,OAAQ,uCACR,KAAM,mCACN,MAAO,qCACP,QAAS,yCACT,KAAM,mCACN,KAAM,mCACN,IAAK,iCACL,KAAM,mCACN,OAAQ,uCACR,OAAQ,uCACR,OAAQ,uCACR,QAAS,yCACT,KAAM,mCACN,KAAM,kCACV,EAGaC,EAA4C,CACrD,MAAO,qDACP,KAAM,mDACN,KAAM,mDACN,QAAS,yDACT,MAAO,qDACP,IAAK,iDACL,OAAQ,uDACR,MAAO,qDACP,OAAQ,uDACR,KAAM,mDACN,MAAO,qDACP,QAAS,yDACT,KAAM,mDACN,KAAM,mDACN,IAAK,iDACL,KAAM,mDACN,OAAQ,uDACR,OAAQ,uDACR,OAAQ,uDACR,QAAS,yDACT,KAAM,mDACN,KAAM,kDACV,EAGaC,EAA0C,CACnD,MAAO,iDACP,KAAM,+CACN,KAAM,+CACN,QAAS,qDACT,MAAO,iDACP,IAAK,6CACL,OAAQ,mDACR,MAAO,iDACP,OAAQ,mDACR,KAAM,+CACN,MAAO,iDACP,QAAS,qDACT,KAAM,+CACN,KAAM,+CACN,IAAK,6CACL,KAAM,+CACN,OAAQ,mDACR,OAAQ,mDACR,OAAQ,mDACR,QAAS,qDACT,KAAM,+CACN,KAAM,8CACV,EAGaC,EAA6C,CACtD,MAAO,uDACP,KAAM,qDACN,KAAM,qDACN,QAAS,2DACT,MAAO,uDACP,IAAK,mDACL,OAAQ,yDACR,MAAO,uDACP,OAAQ,yDACR,KAAM,qDACN,MAAO,uDACP,QAAS,2DACT,KAAM,qDACN,KAAM,qDACN,IAAK,mDACL,KAAM,qDACN,OAAQ,yDACR,OAAQ,yDACR,OAAQ,yDACR,QAAS,2DACT,KAAM,qDACN,KAAM,oDACV,EC1IYC,IAAAA,WAAAA,EAAQ,CAARA,OAAAA,EAAQ,QAAA,UAARA,EAAQ,UAAA,YAARA,EAAQ,QAAA,UAARA,EAAQ,OAAA,SAARA,EAAQ,QAAA,UAARA,EAAQ,KAAA,OAARA,CAAQ,EAAA,CAAA,CAAA,EAUPC,MAAAA,EAAOC,EAAgB,CAClCC,KAAM,OACNC,MAAO,CACLC,WAAY,CACVC,KAAMC,OACNC,QAASC,MACV,EACDC,KAAM,CACJJ,KAAMK,MACNC,SAAU,EACX,EACDC,YAAa,CACXP,KAAMQ,QACNN,QAAS,EACV,EACDO,WAAY,CACVT,KAAMC,OACNC,QAAS,EACV,EACDQ,MAAO,CACLV,KAAMC,OACNC,QAASR,EAASiB,KAClBC,UAAYC,GAAkBC,OAAOC,OAAOrB,CAAQ,EAAEsB,SAASH,CAAiB,CACjF,EACDI,YAAa,CACXjB,KAAMC,OACNC,QAASC,MACV,EACDe,WAAY,CACVlB,KAAMC,OACNC,QAASC,MACX,CACD,EACDgB,MAAO,CAAC,oBAAqB,SAAU,OAAO,EAC9CC,MAAMtB,EAAO,CAAEuB,MAAAA,EAAOC,KAAAA,CAAK,EAAG,CAE5B,MAAMC,EAAiBC,EAAS,IACvB1B,EAAMM,KAAKqB,IAAKC,GACjB,OAAOA,GAAQ,SACV,CACL7B,KAAM6B,EACNC,KAAM,IAAID,CAAG,GACbE,QAAS,GACTC,SAAU,EACX,EAEI,CACLF,KAAM,IAAID,EAAI7B,IAAI,GAClBgC,SAAU,GACVD,QAAS,GACT,GAAGF,CACJ,CACF,CACF,EAGKI,EAAYC,GAAoB,OACpC,OAAIjC,EAAMC,WACDD,EAAMC,aAAegC,EAE1BjC,EAAMW,WACDX,EAAMW,aAAesB,IAGvBR,EAAAA,EAAeV,MAAM,CAAC,IAAtBU,YAAAA,EAAyB1B,QAASkC,CAC1C,EAGKC,EAAkBN,GAAiB,CACnCA,EAAIG,WAERP,EAAK,QAASI,CAAG,EACjBJ,EAAK,oBAAqBI,EAAI7B,IAAI,EAClCyB,EAAK,SAAUI,CAAG,EACnB,EAGKO,EAAsBC,GAAiB,CAC3C,MAAMC,EAASD,EAAMC,OACfC,EAAcb,EAAeV,MAAMwB,KACtCX,GAAQA,EAAI7B,OAASsC,EAAOtB,KAC/B,EACIuB,GACFJ,EAAeI,CAAW,CAE7B,EAGKE,EAAed,EAAS,IAExB1B,EAAMmB,YACDnB,EAAMmB,YAIXnB,EAAMY,MACDtB,EAAgBU,EAAMY,KAAK,EAG7B,QACR,EAGK6B,EAAoBf,EAAS,IAC1B1B,EAAMoB,YAAcoB,EAAazB,KACzC,EAGK2B,EAAmBhB,EAAS,IAAM,CACtC,MAAMiB,EAAYH,EAAazB,MAC/B,MAAO,CACLxB,EAAeoD,CAAS,EACxBnD,EAAamD,CAAS,CAAC,CAE3B,CAAC,EAGKC,EAAkBlB,EAAS,IAAM,CACrC,MAAMiB,EAAYF,EAAkB1B,MACpC,MAAO,CACLtB,EAAekD,CAAS,EACxBjD,EAAaiD,CAAS,CAAC,CAE3B,CAAC,EAGKE,EAAkBnB,EAAS,IAAM,CACrC,MAAMiB,EAAYH,EAAazB,MAC/B,OAAOpB,EAAgBgD,CAAS,CAClC,CAAC,EAED,MAAO,IAAA,OAAAG,OAAAA,EAAA,MAAA,KAAA,CAAAA,EAAA,MAAA,CAAA,MAAA,4BAAA,EAAA,CAAAA,EAAA,SAAA,CAAA,MAKQ9C,EAAMC,YAAcD,EAAMW,cAAcc,EAAAA,EAAeV,MAAM,CAAC,IAAtBU,YAAAA,EAAyB1B,MAAI,SAClEoC,EAAkB,aAAA,eAAA,MAErB,CACL,qGACA,gHACA,0CACAU,EAAgB9B,MAChB,gCAAgC,GAGjCU,CAAAA,EAAeV,MAAMY,IAAKC,GAAGkB,EAAA,SAAA,CAAA,IACflB,EAAI7B,KAAI,MAAS6B,EAAI7B,KAAI,SAAY6B,EAAIG,UACnDH,CAAAA,EAAIE,SAAWF,EAAI7B,IAAI,EAAA,EAAA,CAAA,QAAA,UAAA,CAAA,CAE3B,CAAC,EAAA,GAAA,CAAA,QAAA,UAAA,CAAA,EAAA+C,EAAA,MAAA,CAAA,MAAA,gFAAA,EAAA,CAAAA,EAAA,MAAA,CAAA,MAAA,2CAAA,QAAA,YAAA,KAAA,eAAA,cAAA,MAAA,EAAA,CAAAA,EAAA,OAAA,CAAA,YAAA,UAAA,EAAA,sIAAA,YAAA,SAAA,EAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAA,EAAA,MAAA,CAAA,MAAA,iBAAA,EAAA,CAAAA,EAAA,MAAA,CAAA,MAAA,+CAAA,EAAA,CAAAA,EAAA,MAAA,CAAA,MAAA,wBAAA,aAAA,OAAA,KAAA,WAsBCrB,CAAAA,EAAeV,MAAMY,IAAKC,GAAGkB,EAAA,IAAA,CAAA,IAErBlB,EAAI7B,KAAI,KACP6B,EAAIC,KAAI,KAAA,MAAA,gBAECG,EAASJ,EAAI7B,IAAI,EAAC,gBAClB,SAAS6B,EAAI7B,IAAI,GAAE,MAC3B,CACLiC,EAASJ,EAAI7B,IAAI,EACb2C,EAAiB3B,MACjB,CAAC,qBAAsB,mCAAoC,GAAG6B,EAAgB7B,KAAK,EACvF,8EACA,0CACA,CAAE,gDAAiDa,EAAIG,QAAS,CAAC,EAClE,QACSgB,GAAM,CACdA,EAAEC,eAAgB,EAClBd,EAAeN,CAAG,CACpB,CAAC,EAAA,CAEAL,EAAMK,IAAML,EAAMK,IAAI,CAAEA,IAAAA,CAAI,CAAC,EAAKA,EAAIE,SAAWF,EAAI7B,IAAK,EAAA,GAAA,CAAA,OAAA,gBAAA,SAAA,CAAA,CAE9D,CAAC,CAMPC,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,EAAMS,aAAWqC,EAAA,MAAA,CAAA,MAAA,sBAEbrB,CAAAA,EAAeV,MAAMY,IAAKC,GAAG,OAAAkB,OAAAA,EAAA,MAAA,CAAA,IAErBlB,EAAI7B,KAAI,GACT,SAAS6B,EAAI7B,IAAI,GAAE,KAAA,WAAA,kBAEN6B,EAAI7B,KAAI,MAClB,CACL,8BACAiC,EAASJ,EAAI7B,IAAI,EAAI,6BAA+B,gCAAgC,CACrF,EAAA,GAEAwB,EAAAA,EAAMK,EAAI7B,QAAVwB,YAAAA,EAAAA,KAAAA,EAAkB,CAAEK,IAAAA,MAAUA,EAAIE,OAAO,EAE7C,GAAA,CAAA,iBAAA,CAAA,EAAA,CAAC,EAEL,CAEJ,EACH,CACF,CAAC,6gBCkQK,MAAAmB,EAAWC,EAAI,OAAO,EACtBC,EAAY,CAAC,QAAS,SAAU,OAAO,EAGvCC,EAAYF,EAAI,WAAW,EAC3BG,EAAa,CACjB,CAAE,KAAM,YAAa,MAAO,MAAO,KAAM,0BAA2B,EACpE,CAAE,KAAM,UAAW,MAAO,OAAQ,KAAM,yBAA0B,EAClE,CAAE,KAAM,WAAY,MAAO,KAAM,KAAM,yBAA0B,CACnE,EAGMC,EAAcJ,EAAI,MAAM,EACxBK,EAAe,CACnB,CAAE,KAAM,OAAQ,QAAS,KAAM,EAC/B,CAAE,KAAM,OAAQ,QAAS,KAAM,EAC/B,CAAE,KAAM,OAAQ,QAAS,MAAO,SAAU,EAAK,CACjD,EAGMC,EAAc,CAAC,OAAQ,OAAQ,MAAM,EAGrCC,EAAYP,EAAI,MAAM,EACtBQ,EAAYR,EAAI,MAAM,EACtBS,EAAYT,EAAI,MAAM,EACtBU,EAAYV,EAAI,MAAM,EACtBW,EAAYX,EAAI,MAAM,EACtBY,EAAYZ,EAAI,MAAM,EACtBa,EAAY,CAAC,OAAQ,MAAM,EAG3BC,EAAed,EAAI,MAAM,EACzBe,EAAef,EAAI,MAAM,EACzBgB,EAAe,CAAC,OAAQ,MAAM,EAG9BC,EAAgBjB,EAAI,OAAO,EAC3BkB,EAAiB,CAAC,QAAS,QAAS,QAAS,QAAS,OAAO;;;;;;;;;;;;;;;;;;"}